{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/slide_window.jpg","path":"images/slide_window.jpg","modified":0,"renderable":0},{"_id":"source/images/o_state_transition_diagram.jpg","path":"images/o_state_transition_diagram.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/images.jpg","path":"images/images.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1554696934391},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1554696934392},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1554696934394},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1554696934401},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1554696934402},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1554696934403},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1554696934406},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1554696934405},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1554696934407},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1554696934409},{"_id":"themes/next/README.cn.md","hash":"b878b73f3fcdef47849453c94420871903d487b3","modified":1554696934410},{"_id":"themes/next/README.md","hash":"efcdc4b0ca791c3fc64afa28c8721e137f2d11ea","modified":1554696934412},{"_id":"themes/next/_config.yml","hash":"5c265dceef2d589d240eb64caecf2dafdfdd561e","modified":1554980012731},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1554696934415},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1554696934416},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1554696934542},{"_id":"source/_posts/2019-04-10-C++虚函数.md","hash":"a1ca98628301998444ebe4ecf780107523702096","modified":1554979788901},{"_id":"source/_posts/2019-04-09-进程终止.md","hash":"ff146679d9bce6e9f3077f4afee990c3f6726069","modified":1554788842520},{"_id":"source/_posts/2019-04-10-操作系统基本算法.md","hash":"e3d3ec1825dbe1c35e54ed9ffbf50101de377256","modified":1554903647159},{"_id":"source/_posts/2019-04-11-TCP.md","hash":"f019cc47b4cdca4caefc38965761514ca2f1c745","modified":1555639844644},{"_id":"source/_posts/2019-04-19中缀转后缀算法.md","hash":"93bbdb7a5bc87cfd2820cb349c8a3e378f7e942a","modified":1555638814552},{"_id":"source/_posts/C++面试语法总结.md","hash":"7b335cc20875ed759c514dc6ef70d20c88017f00","modified":1554885558066},{"_id":"source/_posts/IPC.md","hash":"b6fcf336e8296a5205d97c6bdbce1210facbfd7a","modified":1554691773612},{"_id":"source/_posts/Signal.md","hash":"4d146cb0fc37872bb7e7938dd4d8282b27595137","modified":1554795110066},{"_id":"source/about/index.md","hash":"d7e56936e7fe93491f7d2034b07af2c3409b7d7f","modified":1554689936693},{"_id":"source/categories/index.md","hash":"f7e575f841bfcefa33a1093c82bf290ac7c693d3","modified":1554691707808},{"_id":"source/images/slide_window.jpg","hash":"608982e1e135c5a52b016b2f7cfaa57ad2bfe576","modified":1555639239065},{"_id":"source/tags/index.md","hash":"b1e9c01f654d0b6b2867cfaa8dec7cf75dc83dc5","modified":1554691393717},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1554696934346},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1554696934364},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1554696902110},{"_id":"themes/next/.git/index","hash":"443e920837b46dfdf12c0ae444c87f56ed3407c2","modified":1554696934918},{"_id":"themes/next/.git/packed-refs","hash":"3bb2e8e3fad44742d3e3bfadfb0b4d791fe9fe9e","modified":1554696934332},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1554696934395},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1554696934397},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1554696934398},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1554696934399},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1554696934418},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1554696934419},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1554696934421},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1554696934422},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1554696934423},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1554696934426},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1554696934425},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1554696934428},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1554696934429},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1554696934430},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1554696934432},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1554696934433},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1554696934435},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1554696934436},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1554696934437},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1554696934438},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1554696934441},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1554696934533},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1554696934534},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1554696934535},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1554696934536},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1554696934538},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1554696934539},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1554696934540},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1554696934543},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1554696934546},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1554696934911},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1554696934913},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1554696934915},{"_id":"source/images/o_state_transition_diagram.jpg","hash":"828d7f349ffc490294c96b87678381b0d77b5128","modified":1555639177602},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554696934701},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1554696902118},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1554696902124},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1554696902127},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1554696902131},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1554696902134},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1554696902140},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1554696902147},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1554696902150},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1554696902156},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1554696902163},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1554696902170},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1554696902177},{"_id":"themes/next/.git/logs/HEAD","hash":"7e08d82f1601a1bd0423de1df5eb2a2329bc2902","modified":1554696934353},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1554696934440},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1554696934441},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1554696934443},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1554696934444},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1554696934446},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1554696934447},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1554696934449},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1554696934450},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1554696934453},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1554696934452},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1554696934454},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1554696934459},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1554696934460},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1554696934461},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1554696934463},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1554696934474},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1554696934476},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1554696934483},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1554696934515},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1554696934517},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1554696934518},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1554696934519},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1554696934521},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1554696934522},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1554696934523},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1554696934547},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1554696934548},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1554696934550},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1554696934551},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1554696934553},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1554696934554},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1554696934555},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1554696934556},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1554696934557},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1554696934700},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1554696934702},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1554696934704},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1554696934703},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1554696934706},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1554696934707},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1554696934708},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1554696934710},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1554696934711},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1554696934712},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1554696934713},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1554696934715},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1554696934716},{"_id":"themes/next/source/images/images.jpg","hash":"3288d9f8a1594364883dc936d1ff20d301f6dbd9","modified":1554697090669},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554696934717},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1554696934718},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554696934719},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1554696934720},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1554696934721},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1554696934722},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554696934480},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554696934481},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554696934660},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554696934661},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554696934664},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554696934696},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554696934699},{"_id":"themes/next/.git/refs/heads/master","hash":"3c959678e3fe6e51e935526c19927d21443a3be3","modified":1554696934351},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1554696934456},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1554696934457},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1554696934464},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1554696934466},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1554696934467},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1554696934469},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1554696934470},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1554696934471},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1554696934473},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1554696934478},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1554696934479},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1554696934482},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1554696934485},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1554696934486},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1554696934488},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1554696934489},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1554696934490},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1554696934491},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1554696934493},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1554696934494},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1554696934495},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1554696934497},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1554696934498},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1554696934499},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1554696934501},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1554696934502},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1554696934504},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1554696934505},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1554696934507},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1554696934508},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1554696934509},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1554696934511},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1554696934512},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1554696934514},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1554696934528},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1554696934529},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1554696934531},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1554696934532},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1554696934658},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1554696934660},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1554696934662},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1554696934663},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1554696934694},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1554696934695},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1554696934696},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1554696934698},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1554696934725},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1554696934727},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1554696934726},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1554696934729},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1554696934730},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1554696934732},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1554696934731},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1554696934734},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1554696934736},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1554696934738},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1554696934739},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1554696934756},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1554696934763},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1554696934765},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1554696934766},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1554696934768},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1554696934802},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1554696934801},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1554696934803},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1554696934805},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1554696934811},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1554696934810},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1554696934812},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1554696934814},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1554696934815},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1554696934843},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1554696934847},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1554696934848},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1554696934850},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1554696934851},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1554696934852},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1554696934857},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1554696934855},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1554696934858},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1554696934861},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1554696934860},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1554696934863},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1554696934864},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1554696934866},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1554696934867},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1554696934868},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1554696934870},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1554696934871},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1554696934872},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1554696934874},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1554696934875},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1554696934876},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1554696934878},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1554696934879},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1554696934882},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1554696934883},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1554696934884},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1554696934897},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1554696934899},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1554696934904},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1554696934906},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1554696934907},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1554696934845},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"7e08d82f1601a1bd0423de1df5eb2a2329bc2902","modified":1554696934355},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1554696934343},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1554696934525},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1554696934527},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1554696934560},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1554696934561},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1554696934562},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1554696934564},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1554696934565},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1554696934587},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1554696934621},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1554696934648},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1554696934650},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1554696934651},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1554696934653},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1554696934654},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1554696934655},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1554696934657},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1554696934665},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1554696934667},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1554696934668},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1554696934669},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1554696934671},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1554696934670},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1554696934672},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1554696934674},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1554696934678},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1554696934679},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1554696934680},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1554696934682},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1554696934683},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1554696934686},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1554696934687},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1554696934688},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1554696934690},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1554696934691},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1554696934692},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1554696934735},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1554696934749},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1554696934753},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1554696934754},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1554696934769},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1554696934772},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1554696934774},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1554696934776},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1554696934778},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1554696934780},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1554696934794},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1554696934797},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1554696934799},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1554696934807},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1554696934808},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1554696934817},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1554696934819},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1554696934820},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1554696934893},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1554696934896},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1554696934751},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1554696934840},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1554696934841},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1554696934903},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"7e08d82f1601a1bd0423de1df5eb2a2329bc2902","modified":1554696934342},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1554696934566},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1554696934568},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1554696934570},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1554696934571},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1554696934572},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1554696934574},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1554696934575},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1554696934577},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1554696934578},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1554696934580},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1554696934581},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1554696934583},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1554696934584},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1554696934585},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1554696934588},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1554696934590},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1554696934591},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1554696934592},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1554696934594},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1554696934595},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1554696934596},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1554696934598},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1554696934599},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1554696934600},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1554696934602},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1554696934603},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1554696934604},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1554696934606},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1554696934607},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1554696934609},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1554696934610},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1554696934611},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1554696934613},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1554696934614},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1554696934615},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1554696934616},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1554696934618},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1554696934619},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1554696934620},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1554696934623},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1554696934624},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1554696934626},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1554696934627},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1554696934628},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1554696934630},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1554696934631},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1554696934632},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1554696934633},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1554696934635},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1554696934636},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1554696934638},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1554696934639},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1554696934640},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1554696934642},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1554696934643},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1554696934644},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1554696934645},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1554696934647},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1554696934675},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1554696934676},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1554696934684},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1554696934742},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1554696934743},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1554696934745},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1554696934746},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1554696934748},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1554696934784},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1554696934782},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1554696934787},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1554696934791},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1554696934789},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1554696934792},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1554696934823},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1554696934827},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1554696934837},{"_id":"themes/next/.git/objects/pack/pack-a22441d9cf9615334864bdd6f0dc9f36fa85a688.idx","hash":"e1a03c22c203c8bc00116c1eb37b303209841ad6","modified":1554696934271},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1554696934761},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1554696934890},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1554696934833},{"_id":"themes/next/.git/objects/pack/pack-a22441d9cf9615334864bdd6f0dc9f36fa85a688.pack","hash":"b6f7b404d7357ffea67227f3b4b61bf694599f9d","modified":1554696934264},{"_id":"source/_posts/2019-04-19-中缀转后缀算法.md","hash":"c0a041504ac2010877beb1bd7f23a4d9ec945250","modified":1555639772330},{"_id":"public/about/index.html","hash":"35b009121d4e6f219ba8e21ca2b9196685007029","modified":1557221301443},{"_id":"public/tags/index.html","hash":"b65cc67e38dac10cf2c49355ae38ed107b9ab0de","modified":1557221301443},{"_id":"public/categories/index.html","hash":"4ae1499158115b5e553908857fe50d322688acbd","modified":1557221301451},{"_id":"public/archives/index.html","hash":"fe73833f9380dea019d687f1444cdcebb2a895f0","modified":1557221301973},{"_id":"public/archives/2019/index.html","hash":"4d32ed599067886abe68b68871a25d12900dc059","modified":1557221301973},{"_id":"public/categories/C/index.html","hash":"91cb3899179a637c78a2e2172da1f9a08b97f66c","modified":1557221301958},{"_id":"public/categories/Unix/index.html","hash":"3fe572eb49197f0f0595ee6bf1ea9e6ddf833226","modified":1557221301958},{"_id":"public/categories/操作系统/index.html","hash":"f1f79149b65916f845162a1e53df31f8b5b5b2ca","modified":1557221301970},{"_id":"public/categories/算法/index.html","hash":"7414fe8472fdcf7e42bb576bb44b3a871a3de78d","modified":1557221301969},{"_id":"public/categories/计算机网络/index.html","hash":"f01461ae350e60110912237308a59439fd605fee","modified":1557221301969},{"_id":"public/tags/C/index.html","hash":"8565b1f4c1ceb47cd6c28429567f6ba8b3e2ea29","modified":1557221301970},{"_id":"public/archives/2019/04/index.html","hash":"c31cba54761354caf3962f4b82de9afb8ac4cdbc","modified":1557221301970},{"_id":"public/tags/对象模型/index.html","hash":"b14b2550c3b9eb72c8b2205ec3195d6f40e81c58","modified":1557221301970},{"_id":"public/tags/Unix/index.html","hash":"5e202297ac9ea4b4c2b831bb397aa4711b94a163","modified":1557221301970},{"_id":"public/tags/进程/index.html","hash":"cb986369a5af26a4ca624a5a7cd82d45f2d65391","modified":1557221301970},{"_id":"public/tags/操作系统/index.html","hash":"fe98a99e7eb0dbcc582b3d1a4465932f2897556f","modified":1557221301970},{"_id":"public/tags/信号/index.html","hash":"26f87b3011bbf337b4a1c1b964f2a498250987c6","modified":1557221301970},{"_id":"public/tags/算法/index.html","hash":"f7819bcee367b573cda3d73b317c517e9def154d","modified":1557221301970},{"_id":"public/tags/编译原理/index.html","hash":"796944c804c7e20a557bf46168f7f3b9c8c82bb5","modified":1557221301971},{"_id":"public/tags/APUE/index.html","hash":"66c2ed7b8fe42721cf3d685a6850a2e610545287","modified":1557221301971},{"_id":"public/tags/计算机网络/index.html","hash":"1061cd05ed586b9fe25fd5f93ad40a7e01756671","modified":1557221301971},{"_id":"public/tags/IPC/index.html","hash":"578d38973d80672886a6c7acb37628023060b28a","modified":1557221301972},{"_id":"public/tags/面试/index.html","hash":"7fd232911c0eb4b4d39556673171e714610be344","modified":1557221301971},{"_id":"public/tags/TCP/index.html","hash":"584d26eec061343a34651c28241d1d4b223c3006","modified":1557221301971},{"_id":"public/2019/04/11/2019-04-11-TCP/index.html","hash":"f6746b89e863a74c51f4d4575a5d578aaee3b0ca","modified":1555639874388},{"_id":"public/2019/04/10/2019-04-10-C++虚函数/index.html","hash":"b9a91a6e56966983c4df3e4ac49882e7a1d6d914","modified":1555639874388},{"_id":"public/2019/04/10/2019-04-10-操作系统基本算法/index.html","hash":"3e61559ffd7522ece81ff0c92d8448b780f65170","modified":1555639874388},{"_id":"public/2019/04/08/Signal/index.html","hash":"b094267e51497c4b12028d6091d9b22d8b868a15","modified":1555639874388},{"_id":"public/2019/04/09/2019-04-09-进程终止/index.html","hash":"a8aca39cd17d3001230c46837eb322db8948ff5d","modified":1555639874388},{"_id":"public/2019/04/05/C++面试语法总结/index.html","hash":"7bf5c55aaec448d27e454d0260c80a098dc64468","modified":1555639874388},{"_id":"public/2019/04/08/IPC/index.html","hash":"d377bfe2dd62c679f7fd056e22bb9a2b721112bb","modified":1555639874389},{"_id":"public/index.html","hash":"e2c88f208aa2a79350ce9d487d58ca7de389d396","modified":1557221301973},{"_id":"public/2019/04/15/2019-04-19-中缀转后缀算法/index.html","hash":"afb31b82b0cf4ae9ecae0bc5123920850db75ab9","modified":1555639874390},{"_id":"source/_posts/C++/2019-04-08-C++面试语法总结.md","hash":"7b335cc20875ed759c514dc6ef70d20c88017f00","modified":1554885558066},{"_id":"source/_posts/Unix/2019-04-08-IPC.md","hash":"b6fcf336e8296a5205d97c6bdbce1210facbfd7a","modified":1554691773612},{"_id":"source/_posts/Unix/2019-04-08-Signal.md","hash":"4d146cb0fc37872bb7e7938dd4d8282b27595137","modified":1554795110066},{"_id":"source/_posts/C++/2019-04-10-C++虚函数.md","hash":"a1ca98628301998444ebe4ecf780107523702096","modified":1554979788901},{"_id":"source/_posts/算法/2019-04-19-中缀转后缀算法.md","hash":"c0a041504ac2010877beb1bd7f23a4d9ec945250","modified":1555639772330},{"_id":"source/_posts/C++/2019-05-07-EffectiveC++读书笔记[6].md","hash":"cc3c90c61d2ab227056e580313e9e2363ee131d6","modified":1557221011915},{"_id":"source/_posts/计算机网络/2019-04-11-TCP.md","hash":"f019cc47b4cdca4caefc38965761514ca2f1c745","modified":1555639844644},{"_id":"source/_posts/Unix/2019-04-09-进程终止.md","hash":"ff146679d9bce6e9f3077f4afee990c3f6726069","modified":1554788842520},{"_id":"source/_posts/操作系统/2019-04-10-操作系统基本算法.md","hash":"e3d3ec1825dbe1c35e54ed9ffbf50101de377256","modified":1554903647159},{"_id":"public/2019/05/07/C++/2019-05-07-EffectiveC++读书笔记[6]/index.html","hash":"974b1d794d4143723c135653bbf8006841f7b9c4","modified":1557221301972},{"_id":"public/2019/04/15/算法/2019-04-19-中缀转后缀算法/index.html","hash":"a6a572c2107c8d5f6815cf1d6b00dcfcbc57b27f","modified":1557221301972},{"_id":"public/2019/04/11/计算机网络/2019-04-11-TCP/index.html","hash":"4e979114f0513ef82548ad3ee8155edebf4aa168","modified":1557221301972},{"_id":"public/2019/04/10/C++/2019-04-10-C++虚函数/index.html","hash":"467160af3cb162423ef51d3ef269a121cb524f11","modified":1557221301972},{"_id":"public/2019/04/10/操作系统/2019-04-10-操作系统基本算法/index.html","hash":"cbecd85031d6ba8647c81080a2afdf251669d862","modified":1557221301972},{"_id":"public/archives/2019/05/index.html","hash":"2bfff4447a3e848adc1d62132cbf2bba39e30a9a","modified":1557221301976},{"_id":"public/tags/读书笔记/index.html","hash":"15b612ab5a4decd7e214ea83db36fb14cb0c922f","modified":1557221301976},{"_id":"public/tags/Effective-C/index.html","hash":"71bd9e57489ca987018c9d358b23cd91b71f2317","modified":1557221301977},{"_id":"public/2019/04/09/Unix/2019-04-09-进程终止/index.html","hash":"b531caabd36adc9b16c2f2ffdd8167fd6c9d9300","modified":1557221301977},{"_id":"public/2019/04/08/Unix/2019-04-08-Signal/index.html","hash":"a841dcf6f5e952104d6ddeedaf1a346d23ecc524","modified":1557221301977},{"_id":"public/2019/04/05/C++/2019-04-08-C++面试语法总结/index.html","hash":"7d3ac14cb6ceda821e4287c79c352fbe5290749f","modified":1557221301977},{"_id":"public/2019/04/08/Unix/2019-04-08-IPC/index.html","hash":"2bc0731c90864d319a01ee7afe51d1e8c9d3f16a","modified":1557221301977}],"Category":[{"name":"C++","_id":"cjunfoz3000041kuh0trloxhu"},{"name":"Unix","_id":"cjunfoz37000a1kuh1v2akl9h"},{"name":"操作系统","_id":"cjunfoz39000d1kuh7yj2ymzg"},{"name":"算法","_id":"cjunfoz3b000i1kuhdp7lhp2j"},{"name":"计算机网络","_id":"cjunfoz5a00141kuhf1n15hq3"}],"Data":[],"Page":[{"title":"about","date":"2019-04-08T02:18:56.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-04-08 10:18:56\n---\n","updated":"2019-04-08T02:18:56.693Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjunfoz2q00011kuhd403reo7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-04-08T02:17:56.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-04-08 10:17:56\ntype: \"tags\"\n---\n","updated":"2019-04-08T02:43:13.717Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjunfoz2x00031kuhldkjhk3r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2019-04-08T02:18:30.000Z","type":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-04-08 10:18:30\ntype: \"categories\"\n---\n\n","updated":"2019-04-08T02:48:27.808Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjunfoz3400071kuhukcuygvq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"C++面试","data":"2019-04-07T16:00:00.000Z","_content":"\n\n\n# C++面试语法总结\n\n\n\n### static\n 1. static能够限制全局变量的作用域。在某一cpp文件中，我能通过extern的方式来访问其他cpp文件的全局变量。而static就断绝了这种可能性。\n\n     ```c++\n     /*A.cpp*/\n     int a = 1;\n     extern const int b = 1;\n     \t//const在cpp文件中默认是当前文件可见，若需要扩展可见性需要加上extern关键字\n     static int c = 1;\n     \n     /*B.cpp*/\n     extern int a;\n     extern const  int b;\n     extern int c;\n     \t\t \n     int main(){\n     \tstd::cout<<a<<std::endl;//Success.\n     \tstd::cout<<b<<std::endl;//Success. \n     \tstd::cout<<c<<std::endl;//Link error. \n     }\n     ```\n\n 2. static表示数据的唯一性。在C++类里的static成员以及static成员函数，这些成员他们的归属不是对象，而是这个类本身，因此我们可以通过static成员来记录当前实例对象的数目。\n\n     对于static成员的初始化，在类外进行。\n\n 3. 局部变量的static能够为函数加上状态。\n\n\n\n### extern\n\n 1. 正如在static中所说的，通过extern声明可以访问其他cpp文件中的全局变量。通常在头文件中声明，在源文件中定义。比方说在一个项目里，我想定义一些可以供其他代码使用的常量。我可以通过宏的方式，在一个单独的头文件里进行宏的定义，在需要使用到某一变量时便引入该头文件。但这种使用一个便要引入全部的方式可能并不是太理想。我们可以换种其他的方式，在一个cpp文件里面定义所有的常量，然后每次需要使用的时候便通过extern引入该变量。使代码更简洁。\n\n 2. extern “C”。C++为函数实现了重载，重载的实现方式是一种叫做name mangling的处理。将函数的形参以及初始函数名结合进行编码，形成一个该函数唯一标识的函数名。比方说重载函数，因为形参不同，通过name mangling处理后，函数名便变得唯一了。\n\n    正因为C++对于重载采取的特殊处理，当C++与C协同工作时可能会出现问题。比方说我想使用某个C的函数，我在文件进行声明，但C++编译器会对该声明进行name mangling处理，处理后在与该C函数所在obj文件链接时会出现链接错误。(名字不符了，有点被打得妈都不认识的意思。hhh)这个时候我们就需要在这段代码前加上extern “C”，用来告诉编译器，别对我进行name mangling处理。\n\n\n\n### volatile\n\n​\t在知乎上面看到个回答觉得特别好，volatile的意思就是<b>非CPU改内存</b>。\n\n​\t在程序执行的时候往往会进行某种程度的优化，比方说\n\n```c++\nint a = *ptr;\nint b = *ptr;\n```\n​\t正常来讲代码需要两次访问ptr指向的内存，编译器可能就会在此基础上做出优化，在第一次访问后将该内容放在寄存器里，后面再访问时，直接访问寄存器就行，节省一次访存时间。\n\n​\t但是这种优化的正确性在于我对没有非CPU部分改内存的假设。假若有个IO设备，修改了该内存，而程序却对此一无所知。volatile就是告诉编译器对该变量别做优化，每次访问从内存里读。\n\n\n\n\n\n### 多态与虚函数\n\n​\t我理解的多态就是<b>一种接口，多种方法</b>。多态分为<b>编译期多态</b>和<b>运行期多态</b>。\n\n 1. 编译期多态。谈起编译期多态，我们首先提到的便是重载。相同的函数名，因为参数的不同有着不同的方法。重载的实现是通过采用一种叫做name mangling的处理方式。因为对函数调用的绑定是在编译期决议的，因此是一种编译期多态。\n\n    另外一种用得比较多的编译期多态便是函数模板。一个简单的函数模板，因为模板参数的不同，在编译期实例化出不同的模板实例。这也是所谓的一种接口，多种方法。\n\n 2. 运行期多态。也是我们谈起多态时的默认含义，它是通过基类的指针或引用来调用虚函数接口，实际调用的函数取决于指针(或引用)实际指向的对象。\n\n    虚函数的实现建议阅读《深度探索C++对象模型》，以及陈皓博客\n\n    <https://blog.csdn.net/haoel/article/details/1948051/>\n\n    \n\n### 四种类型转换\n\n​\t在介绍C++的四种类型转换时，我们先来看看C语言的显式转换。TYPE b = (TYPE) a，这种C风格的转换存在着许多缺点。因为它可以在任意类型之间进行转换，比如你可以把一个指向const对象的指针转换成指向非 const对象的指针，把一个指向基类对象的指针转换成指向一个派生类对象的指针。这两种转换差别巨大，但是传统C语言风格的类型转换没有区分。还有就是C语言针对每一种转换的格式都一样，不容易查找。\n\n- static_cast，主要用于以下场合：\n\n  - 用于类层次结构中，父类和子类之间指针和引用的转换；进行上行转换，把子类对象的指针/引用转换为父类指针/引用，这种转换是安全的；进行下行转换，把父类对象的指针/引用转换成子类指针/引用，这种转换是不安全的，需要编写程序时来确认；\n  - 用于基本数据类型之间的转换，例如把int转char，int转enum等，需要编写程序时来确认安全性；\n  - 把void指针转换成目标类型的指针（这是极其不安全的；\n\n- const_cast，用于移除类型的const，volatile，__unaligned属性。\n\n  ```c++\n  const char* pc;\n  char *p = const_cast<char*>(pc);\n  ```\n\n- dynamic_cast， 转换仅适用于指针h或引用。\n\n  ​\t相比static_cast，dynamic_cast会在运行时检查类型转换是否合法，具有一定的安全性。由于运行时的检查，所以会额外消耗一些性能。dynamic_cast使用场景与static相似，在类层次结构中使用时，上行转换和static_cast没有区别，都是安全的；下行转换时，dynamic_cast会检查转换的类型，相比static_cast更安全。\n\n  ​\t在转换可能发生的前提下，dynamic_cast会尝试转换，若指针转换失败，则返回空指针，若引用转换失败，则抛出异常。\n\n  1. 继承中的转换\n\n     - 上行转换：在继承关系中，dynamic_cast由子类向父类转换与static_cast和隐式转换一样，都是非常安全的。\n\n     - 下行转换：\n\n       ```c++\n       class A{virtual void f(){}};\n       class B:public A{};\n       void main(){\n           A* pa = new B;\n           B* pb = dynamic_cast<B*>(pa);\n       }\n       ```\n\n       A中定义了一个虚函数，这是不可缺少的。由于运行时类型检查需要运行时类型信息，而这个信息存在类的虚函数表中，只有定义了虚函数的类才有虚函数表。\n\n  2. void*的转换\n\n     一些情况下，我们需要将指针转换为void*，然后再合适的时候重新将void*转换为目标类型指针。\n\n     因为在多重继承里，存在着指针调整的情况，调用<i>dynamic_cast</i><void*>(ptr)，可以通过查表的方式，确定ptr实际对象的初始地址。\n\n     ```cpp\n     class A { virtual void f(){} };\n     int main()\n     {\n          A *pA = new A;\n          void *pV = dynamic_cast<void *>(pA); \n     }菱形继承中的上行转换\n     ```\n\n\n  3. 首先，定义一组菱形继承的类：\n\n  ```cpp\n  class A { virtual void f() {}; };\n  class B :public A { void f() {}; };\n  class C :public A { void f() {}; };\n  class D :public B, public C { void f() {}; };\n  ```\n\n  \n\n  B继承A，C继承A。\n\n  D继承B和C。\n\n  考虑这样的情况：D对象指针能否安全的转换为A类型指针？\n\n  直觉来说是可以的，因为从子类向父类转化，无论如何都是安全的。\n\n  ```cpp\n  class A { virtual void f() {}; };\n  class B :public A { void f() {}; };\n  class C :public A { void f() {}; };\n  class D :public B, public C { virtual void f() {}; };\n  \n  void main()\n  {\n      D *pD = new D;\n      A *pA = dynamic_cast<A *>(pD); // pA = NULL\n  }\n  ```\n\n  但实际上，如果尝试这样的转换，只能得到一个空指针。因为B和C都继承了A，并且都实现了虚函数f()，导致在进行转换时，无法选择一条转换路径。\n\n  一种可行的方法是，自行指定一条转换路径：\n\n  ```cpp\n  class A { virtual void f() {}; };\n  class B :public A { void f() {}; };\n  class C :public A { void f() {}; };\n  class D :public B, public C { void f() {}; };\n  \n  void main()\n  {\n      D *pD = new D;\n      B *pB = dynamic_cast<B *>(pD);\n      A *pA = dynamic_cast<A *>(pB);\n  }\n  ```\n\n  4. reinterpret_cast\n\n     可以转换任意类型的指针，在编译器完成，最好别使用。\n\n### 常见问题\n\n1. 为什么析构函数不能抛出异常？\n\n- 如果析构函数抛出异常，则**异常点之后的程序不会执行**，如果析构函数在异常点之后执行了某些必要的动作比如释放某些资源，则这些动作不会执行，会造成诸如资源泄漏的问题。(抛出点意味着后面的内容不会执行。)\n- 通常异常发生时，c++的机制会调用已经构造对象的析构函数来释放资源，此时若析构函数本身也抛出异常，则前一个异常尚未处理，又有新的异常，会造成程序崩溃的问题。\n\n析构函数无法保证没有异常情况怎么处理?\n\n​\t把异常封闭在析构函数的内部，不让异常抛出函数之外。\n\n```c++\n~Destructor{\n    try{\n        do_something();\n    }catch(){\n        //可以什么都不做，只是确保异常不要逃出析构函数。\n    }\n}\t\n```\n\n\n\n2. 构造函数和析构函数中调用虚函数吗？(Effective C++ Item9)\n\n​\t最好不要在构造函数和析构函数中调用虚函数，不见得一定会出现错误，但可能不符合你的预期。\n\n- 在我们构造一个子类对象时，我们先执行的是父类的构造函数，然后执行子类的构造函数。倘若我们在父类构造函数里面调用虚函数。我们可以猜想到编译器可能会采取的两种处理方式：\n\n  - Plan A，调用虚函数的基类版本，这样失去了运行时调用的正确版本的意义。\n  - Plan B，调用虚函数的正确版本，倘若正确版本是子类函数，但子类这个时候还不存在，函数调用会导致未知行为。\n\n  实际上编译器采用的是Plan A, 这种方式可以避免严重错误。但不可避免的是给使用者造成不符预期的困惑。\n\n- 同样的道理，析构函数的调用顺序是先子类，再父类。同样存在在父类中调用所谓“正确版本”的虚函数时而子类不存在的问题。编译器采用的同样是调用虚函数的基类版本的方式。\n\n  为了演示这只是构造函数和析构函数的特殊性，让我们来看下面的代码。\n\n```c++\nclass A{\npublic:\n  \tA(){func();}\n    virtual void func(){std::cout<<\"A::func\";}\n    void f(){func();}\n};\n\nclass B:public A{\npublic:\n  \tB():A(){}\n\tvoid func() override{std::cout<<\"B::func\";}\n};\n\nint main(){\n    A* a = new B;\n    a->f();//result : A::func. B::func.\n}\n```\n\n​\t很明显在构造函数里面和普通函数分别调用虚函数行为不一样。\n\n\n\n3. 引用和指针的区别\n\n   - 引用在创建时必须初始化，引用到一个有效对象；而指针在定义时不必初始化，可以在定义后的任何地方重新赋值。\n\n   - 指针可以是NULL，引用不行\n\n   - 引用貌似一个对象的小名，一旦初始化指向一个对象，就不能将其他对象重新赋值给该引用，这样引用和原对象的值都会被更改。\n\n   - 引用的创建和销毁不会调用类的拷贝构造函数和析构函数。\n\n     \n\n4. 内存对齐的原则\n\n   - 结构体的总大小，必须要是其内部最大成员的整数倍，不足的要补齐。\n\n     ```c\n     typedef struct one {\n         char a;=====> 1 -> 4\n         int b;======> 4\n         double c;===> 8. //max\n         char d;=====> 1 -> 8  //补齐到8的整数倍\n     } ONE;\n     //结构体one总大小： 4+4+8 = 16\n     ```\n\n     \n\n   - 结构体或联合的数据成员，第一个数据成员要放在offset==0的地方，如果遇上子成员，要根据子成员的类型存放在对应的整数倍上。\n\n     ```c\n     typedef struct two {\n         char array[2];==> 2 -> 4\n         int b;==========> 4\n         double c;=======> 8  //max\n         float d;========> 4 -> 8  //原则1\n     } TWO;\n     //结构体two总大小： 4+4+8+8 = 24\n     ```\n\n     \n\n   - 如果结构体作为成员，则要找到这个结构体中的最大元素，然后从这个最大成员的整数倍地址开始存储。\n\n     ```c\n     struct three {\n         char a; ====> 1 -> 4\n         int b;======> 4\n         double c;===> 8\n         short d;====> 2 -> 8  //原则3 ,下面是个结构体，其中最大成员为8，则需要从8的整数倍地址存放，所以变量d补齐到8\n         TWO e;     ==> 24 (max 8)\n     };\n     //结构体two总大小： 4+4+8+8+24 = 48\n     ```\n\n     ","source":"_posts/C++/2019-04-08-C++面试语法总结.md","raw":"---\ntitle: C++面试\ncategories: C++\ntags: [面试,C++]\ndata: 2019-04-08\n---\n\n\n\n# C++面试语法总结\n\n\n\n### static\n 1. static能够限制全局变量的作用域。在某一cpp文件中，我能通过extern的方式来访问其他cpp文件的全局变量。而static就断绝了这种可能性。\n\n     ```c++\n     /*A.cpp*/\n     int a = 1;\n     extern const int b = 1;\n     \t//const在cpp文件中默认是当前文件可见，若需要扩展可见性需要加上extern关键字\n     static int c = 1;\n     \n     /*B.cpp*/\n     extern int a;\n     extern const  int b;\n     extern int c;\n     \t\t \n     int main(){\n     \tstd::cout<<a<<std::endl;//Success.\n     \tstd::cout<<b<<std::endl;//Success. \n     \tstd::cout<<c<<std::endl;//Link error. \n     }\n     ```\n\n 2. static表示数据的唯一性。在C++类里的static成员以及static成员函数，这些成员他们的归属不是对象，而是这个类本身，因此我们可以通过static成员来记录当前实例对象的数目。\n\n     对于static成员的初始化，在类外进行。\n\n 3. 局部变量的static能够为函数加上状态。\n\n\n\n### extern\n\n 1. 正如在static中所说的，通过extern声明可以访问其他cpp文件中的全局变量。通常在头文件中声明，在源文件中定义。比方说在一个项目里，我想定义一些可以供其他代码使用的常量。我可以通过宏的方式，在一个单独的头文件里进行宏的定义，在需要使用到某一变量时便引入该头文件。但这种使用一个便要引入全部的方式可能并不是太理想。我们可以换种其他的方式，在一个cpp文件里面定义所有的常量，然后每次需要使用的时候便通过extern引入该变量。使代码更简洁。\n\n 2. extern “C”。C++为函数实现了重载，重载的实现方式是一种叫做name mangling的处理。将函数的形参以及初始函数名结合进行编码，形成一个该函数唯一标识的函数名。比方说重载函数，因为形参不同，通过name mangling处理后，函数名便变得唯一了。\n\n    正因为C++对于重载采取的特殊处理，当C++与C协同工作时可能会出现问题。比方说我想使用某个C的函数，我在文件进行声明，但C++编译器会对该声明进行name mangling处理，处理后在与该C函数所在obj文件链接时会出现链接错误。(名字不符了，有点被打得妈都不认识的意思。hhh)这个时候我们就需要在这段代码前加上extern “C”，用来告诉编译器，别对我进行name mangling处理。\n\n\n\n### volatile\n\n​\t在知乎上面看到个回答觉得特别好，volatile的意思就是<b>非CPU改内存</b>。\n\n​\t在程序执行的时候往往会进行某种程度的优化，比方说\n\n```c++\nint a = *ptr;\nint b = *ptr;\n```\n​\t正常来讲代码需要两次访问ptr指向的内存，编译器可能就会在此基础上做出优化，在第一次访问后将该内容放在寄存器里，后面再访问时，直接访问寄存器就行，节省一次访存时间。\n\n​\t但是这种优化的正确性在于我对没有非CPU部分改内存的假设。假若有个IO设备，修改了该内存，而程序却对此一无所知。volatile就是告诉编译器对该变量别做优化，每次访问从内存里读。\n\n\n\n\n\n### 多态与虚函数\n\n​\t我理解的多态就是<b>一种接口，多种方法</b>。多态分为<b>编译期多态</b>和<b>运行期多态</b>。\n\n 1. 编译期多态。谈起编译期多态，我们首先提到的便是重载。相同的函数名，因为参数的不同有着不同的方法。重载的实现是通过采用一种叫做name mangling的处理方式。因为对函数调用的绑定是在编译期决议的，因此是一种编译期多态。\n\n    另外一种用得比较多的编译期多态便是函数模板。一个简单的函数模板，因为模板参数的不同，在编译期实例化出不同的模板实例。这也是所谓的一种接口，多种方法。\n\n 2. 运行期多态。也是我们谈起多态时的默认含义，它是通过基类的指针或引用来调用虚函数接口，实际调用的函数取决于指针(或引用)实际指向的对象。\n\n    虚函数的实现建议阅读《深度探索C++对象模型》，以及陈皓博客\n\n    <https://blog.csdn.net/haoel/article/details/1948051/>\n\n    \n\n### 四种类型转换\n\n​\t在介绍C++的四种类型转换时，我们先来看看C语言的显式转换。TYPE b = (TYPE) a，这种C风格的转换存在着许多缺点。因为它可以在任意类型之间进行转换，比如你可以把一个指向const对象的指针转换成指向非 const对象的指针，把一个指向基类对象的指针转换成指向一个派生类对象的指针。这两种转换差别巨大，但是传统C语言风格的类型转换没有区分。还有就是C语言针对每一种转换的格式都一样，不容易查找。\n\n- static_cast，主要用于以下场合：\n\n  - 用于类层次结构中，父类和子类之间指针和引用的转换；进行上行转换，把子类对象的指针/引用转换为父类指针/引用，这种转换是安全的；进行下行转换，把父类对象的指针/引用转换成子类指针/引用，这种转换是不安全的，需要编写程序时来确认；\n  - 用于基本数据类型之间的转换，例如把int转char，int转enum等，需要编写程序时来确认安全性；\n  - 把void指针转换成目标类型的指针（这是极其不安全的；\n\n- const_cast，用于移除类型的const，volatile，__unaligned属性。\n\n  ```c++\n  const char* pc;\n  char *p = const_cast<char*>(pc);\n  ```\n\n- dynamic_cast， 转换仅适用于指针h或引用。\n\n  ​\t相比static_cast，dynamic_cast会在运行时检查类型转换是否合法，具有一定的安全性。由于运行时的检查，所以会额外消耗一些性能。dynamic_cast使用场景与static相似，在类层次结构中使用时，上行转换和static_cast没有区别，都是安全的；下行转换时，dynamic_cast会检查转换的类型，相比static_cast更安全。\n\n  ​\t在转换可能发生的前提下，dynamic_cast会尝试转换，若指针转换失败，则返回空指针，若引用转换失败，则抛出异常。\n\n  1. 继承中的转换\n\n     - 上行转换：在继承关系中，dynamic_cast由子类向父类转换与static_cast和隐式转换一样，都是非常安全的。\n\n     - 下行转换：\n\n       ```c++\n       class A{virtual void f(){}};\n       class B:public A{};\n       void main(){\n           A* pa = new B;\n           B* pb = dynamic_cast<B*>(pa);\n       }\n       ```\n\n       A中定义了一个虚函数，这是不可缺少的。由于运行时类型检查需要运行时类型信息，而这个信息存在类的虚函数表中，只有定义了虚函数的类才有虚函数表。\n\n  2. void*的转换\n\n     一些情况下，我们需要将指针转换为void*，然后再合适的时候重新将void*转换为目标类型指针。\n\n     因为在多重继承里，存在着指针调整的情况，调用<i>dynamic_cast</i><void*>(ptr)，可以通过查表的方式，确定ptr实际对象的初始地址。\n\n     ```cpp\n     class A { virtual void f(){} };\n     int main()\n     {\n          A *pA = new A;\n          void *pV = dynamic_cast<void *>(pA); \n     }菱形继承中的上行转换\n     ```\n\n\n  3. 首先，定义一组菱形继承的类：\n\n  ```cpp\n  class A { virtual void f() {}; };\n  class B :public A { void f() {}; };\n  class C :public A { void f() {}; };\n  class D :public B, public C { void f() {}; };\n  ```\n\n  \n\n  B继承A，C继承A。\n\n  D继承B和C。\n\n  考虑这样的情况：D对象指针能否安全的转换为A类型指针？\n\n  直觉来说是可以的，因为从子类向父类转化，无论如何都是安全的。\n\n  ```cpp\n  class A { virtual void f() {}; };\n  class B :public A { void f() {}; };\n  class C :public A { void f() {}; };\n  class D :public B, public C { virtual void f() {}; };\n  \n  void main()\n  {\n      D *pD = new D;\n      A *pA = dynamic_cast<A *>(pD); // pA = NULL\n  }\n  ```\n\n  但实际上，如果尝试这样的转换，只能得到一个空指针。因为B和C都继承了A，并且都实现了虚函数f()，导致在进行转换时，无法选择一条转换路径。\n\n  一种可行的方法是，自行指定一条转换路径：\n\n  ```cpp\n  class A { virtual void f() {}; };\n  class B :public A { void f() {}; };\n  class C :public A { void f() {}; };\n  class D :public B, public C { void f() {}; };\n  \n  void main()\n  {\n      D *pD = new D;\n      B *pB = dynamic_cast<B *>(pD);\n      A *pA = dynamic_cast<A *>(pB);\n  }\n  ```\n\n  4. reinterpret_cast\n\n     可以转换任意类型的指针，在编译器完成，最好别使用。\n\n### 常见问题\n\n1. 为什么析构函数不能抛出异常？\n\n- 如果析构函数抛出异常，则**异常点之后的程序不会执行**，如果析构函数在异常点之后执行了某些必要的动作比如释放某些资源，则这些动作不会执行，会造成诸如资源泄漏的问题。(抛出点意味着后面的内容不会执行。)\n- 通常异常发生时，c++的机制会调用已经构造对象的析构函数来释放资源，此时若析构函数本身也抛出异常，则前一个异常尚未处理，又有新的异常，会造成程序崩溃的问题。\n\n析构函数无法保证没有异常情况怎么处理?\n\n​\t把异常封闭在析构函数的内部，不让异常抛出函数之外。\n\n```c++\n~Destructor{\n    try{\n        do_something();\n    }catch(){\n        //可以什么都不做，只是确保异常不要逃出析构函数。\n    }\n}\t\n```\n\n\n\n2. 构造函数和析构函数中调用虚函数吗？(Effective C++ Item9)\n\n​\t最好不要在构造函数和析构函数中调用虚函数，不见得一定会出现错误，但可能不符合你的预期。\n\n- 在我们构造一个子类对象时，我们先执行的是父类的构造函数，然后执行子类的构造函数。倘若我们在父类构造函数里面调用虚函数。我们可以猜想到编译器可能会采取的两种处理方式：\n\n  - Plan A，调用虚函数的基类版本，这样失去了运行时调用的正确版本的意义。\n  - Plan B，调用虚函数的正确版本，倘若正确版本是子类函数，但子类这个时候还不存在，函数调用会导致未知行为。\n\n  实际上编译器采用的是Plan A, 这种方式可以避免严重错误。但不可避免的是给使用者造成不符预期的困惑。\n\n- 同样的道理，析构函数的调用顺序是先子类，再父类。同样存在在父类中调用所谓“正确版本”的虚函数时而子类不存在的问题。编译器采用的同样是调用虚函数的基类版本的方式。\n\n  为了演示这只是构造函数和析构函数的特殊性，让我们来看下面的代码。\n\n```c++\nclass A{\npublic:\n  \tA(){func();}\n    virtual void func(){std::cout<<\"A::func\";}\n    void f(){func();}\n};\n\nclass B:public A{\npublic:\n  \tB():A(){}\n\tvoid func() override{std::cout<<\"B::func\";}\n};\n\nint main(){\n    A* a = new B;\n    a->f();//result : A::func. B::func.\n}\n```\n\n​\t很明显在构造函数里面和普通函数分别调用虚函数行为不一样。\n\n\n\n3. 引用和指针的区别\n\n   - 引用在创建时必须初始化，引用到一个有效对象；而指针在定义时不必初始化，可以在定义后的任何地方重新赋值。\n\n   - 指针可以是NULL，引用不行\n\n   - 引用貌似一个对象的小名，一旦初始化指向一个对象，就不能将其他对象重新赋值给该引用，这样引用和原对象的值都会被更改。\n\n   - 引用的创建和销毁不会调用类的拷贝构造函数和析构函数。\n\n     \n\n4. 内存对齐的原则\n\n   - 结构体的总大小，必须要是其内部最大成员的整数倍，不足的要补齐。\n\n     ```c\n     typedef struct one {\n         char a;=====> 1 -> 4\n         int b;======> 4\n         double c;===> 8. //max\n         char d;=====> 1 -> 8  //补齐到8的整数倍\n     } ONE;\n     //结构体one总大小： 4+4+8 = 16\n     ```\n\n     \n\n   - 结构体或联合的数据成员，第一个数据成员要放在offset==0的地方，如果遇上子成员，要根据子成员的类型存放在对应的整数倍上。\n\n     ```c\n     typedef struct two {\n         char array[2];==> 2 -> 4\n         int b;==========> 4\n         double c;=======> 8  //max\n         float d;========> 4 -> 8  //原则1\n     } TWO;\n     //结构体two总大小： 4+4+8+8 = 24\n     ```\n\n     \n\n   - 如果结构体作为成员，则要找到这个结构体中的最大元素，然后从这个最大成员的整数倍地址开始存储。\n\n     ```c\n     struct three {\n         char a; ====> 1 -> 4\n         int b;======> 4\n         double c;===> 8\n         short d;====> 2 -> 8  //原则3 ,下面是个结构体，其中最大成员为8，则需要从8的整数倍地址存放，所以变量d补齐到8\n         TWO e;     ==> 24 (max 8)\n     };\n     //结构体two总大小： 4+4+8+8+24 = 48\n     ```\n\n     ","slug":"C++/2019-04-08-C++面试语法总结","published":1,"date":"2019-04-05T11:24:53.446Z","updated":"2019-04-10T08:39:18.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdlcrx70000eguhpdnm9xyj","content":"<h1 id=\"C-面试语法总结\"><a href=\"#C-面试语法总结\" class=\"headerlink\" title=\"C++面试语法总结\"></a>C++面试语法总结</h1><h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><ol>\n<li><p>static能够限制全局变量的作用域。在某一cpp文件中，我能通过extern的方式来访问其他cpp文件的全局变量。而static就断绝了这种可能性。</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*A.cpp*/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//const在cpp文件中默认是当前文件可见，若需要扩展可见性需要加上extern关键字</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> c = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*B.cpp*/</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">const</span>  <span class=\"keyword\">int</span> b;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> c;</span><br><span class=\"line\">\t\t </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;<span class=\"comment\">//Success.</span></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;b&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;<span class=\"comment\">//Success. </span></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;c&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;<span class=\"comment\">//Link error. </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>static表示数据的唯一性。在C++类里的static成员以及static成员函数，这些成员他们的归属不是对象，而是这个类本身，因此我们可以通过static成员来记录当前实例对象的数目。</p>\n<p> 对于static成员的初始化，在类外进行。</p>\n</li>\n<li><p>局部变量的static能够为函数加上状态。</p>\n</li>\n</ol>\n<h3 id=\"extern\"><a href=\"#extern\" class=\"headerlink\" title=\"extern\"></a>extern</h3><ol>\n<li><p>正如在static中所说的，通过extern声明可以访问其他cpp文件中的全局变量。通常在头文件中声明，在源文件中定义。比方说在一个项目里，我想定义一些可以供其他代码使用的常量。我可以通过宏的方式，在一个单独的头文件里进行宏的定义，在需要使用到某一变量时便引入该头文件。但这种使用一个便要引入全部的方式可能并不是太理想。我们可以换种其他的方式，在一个cpp文件里面定义所有的常量，然后每次需要使用的时候便通过extern引入该变量。使代码更简洁。</p>\n</li>\n<li><p>extern “C”。C++为函数实现了重载，重载的实现方式是一种叫做name mangling的处理。将函数的形参以及初始函数名结合进行编码，形成一个该函数唯一标识的函数名。比方说重载函数，因为形参不同，通过name mangling处理后，函数名便变得唯一了。</p>\n<p>正因为C++对于重载采取的特殊处理，当C++与C协同工作时可能会出现问题。比方说我想使用某个C的函数，我在文件进行声明，但C++编译器会对该声明进行name mangling处理，处理后在与该C函数所在obj文件链接时会出现链接错误。(名字不符了，有点被打得妈都不认识的意思。hhh)这个时候我们就需要在这段代码前加上extern “C”，用来告诉编译器，别对我进行name mangling处理。</p>\n</li>\n</ol>\n<h3 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h3><p>​    在知乎上面看到个回答觉得特别好，volatile的意思就是<b>非CPU改内存</b>。</p>\n<p>​    在程序执行的时候往往会进行某种程度的优化，比方说</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = *ptr;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = *ptr;</span><br></pre></td></tr></table></figure>\n<p>​    正常来讲代码需要两次访问ptr指向的内存，编译器可能就会在此基础上做出优化，在第一次访问后将该内容放在寄存器里，后面再访问时，直接访问寄存器就行，节省一次访存时间。</p>\n<p>​    但是这种优化的正确性在于我对没有非CPU部分改内存的假设。假若有个IO设备，修改了该内存，而程序却对此一无所知。volatile就是告诉编译器对该变量别做优化，每次访问从内存里读。</p>\n<h3 id=\"多态与虚函数\"><a href=\"#多态与虚函数\" class=\"headerlink\" title=\"多态与虚函数\"></a>多态与虚函数</h3><p>​    我理解的多态就是<b>一种接口，多种方法</b>。多态分为<b>编译期多态</b>和<b>运行期多态</b>。</p>\n<ol>\n<li><p>编译期多态。谈起编译期多态，我们首先提到的便是重载。相同的函数名，因为参数的不同有着不同的方法。重载的实现是通过采用一种叫做name mangling的处理方式。因为对函数调用的绑定是在编译期决议的，因此是一种编译期多态。</p>\n<p>另外一种用得比较多的编译期多态便是函数模板。一个简单的函数模板，因为模板参数的不同，在编译期实例化出不同的模板实例。这也是所谓的一种接口，多种方法。</p>\n</li>\n<li><p>运行期多态。也是我们谈起多态时的默认含义，它是通过基类的指针或引用来调用虚函数接口，实际调用的函数取决于指针(或引用)实际指向的对象。</p>\n<p>虚函数的实现建议阅读《深度探索C++对象模型》，以及陈皓博客</p>\n<p><a href=\"https://blog.csdn.net/haoel/article/details/1948051/\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/haoel/article/details/1948051/</a></p>\n</li>\n</ol>\n<h3 id=\"四种类型转换\"><a href=\"#四种类型转换\" class=\"headerlink\" title=\"四种类型转换\"></a>四种类型转换</h3><p>​    在介绍C++的四种类型转换时，我们先来看看C语言的显式转换。TYPE b = (TYPE) a，这种C风格的转换存在着许多缺点。因为它可以在任意类型之间进行转换，比如你可以把一个指向const对象的指针转换成指向非 const对象的指针，把一个指向基类对象的指针转换成指向一个派生类对象的指针。这两种转换差别巨大，但是传统C语言风格的类型转换没有区分。还有就是C语言针对每一种转换的格式都一样，不容易查找。</p>\n<ul>\n<li><p>static_cast，主要用于以下场合：</p>\n<ul>\n<li>用于类层次结构中，父类和子类之间指针和引用的转换；进行上行转换，把子类对象的指针/引用转换为父类指针/引用，这种转换是安全的；进行下行转换，把父类对象的指针/引用转换成子类指针/引用，这种转换是不安全的，需要编写程序时来确认；</li>\n<li>用于基本数据类型之间的转换，例如把int转char，int转enum等，需要编写程序时来确认安全性；</li>\n<li>把void指针转换成目标类型的指针（这是极其不安全的；</li>\n</ul>\n</li>\n<li><p>const_cast，用于移除类型的const，volatile，__unaligned属性。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pc;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *p = <span class=\"keyword\">const_cast</span>&lt;<span class=\"keyword\">char</span>*&gt;(pc);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>dynamic_cast， 转换仅适用于指针h或引用。</p>\n<p>​    相比static_cast，dynamic_cast会在运行时检查类型转换是否合法，具有一定的安全性。由于运行时的检查，所以会额外消耗一些性能。dynamic_cast使用场景与static相似，在类层次结构中使用时，上行转换和static_cast没有区别，都是安全的；下行转换时，dynamic_cast会检查转换的类型，相比static_cast更安全。</p>\n<p>​    在转换可能发生的前提下，dynamic_cast会尝试转换，若指针转换失败，则返回空指针，若引用转换失败，则抛出异常。</p>\n<ol>\n<li><p>继承中的转换</p>\n<ul>\n<li><p>上行转换：在继承关系中，dynamic_cast由子类向父类转换与static_cast和隐式转换一样，都是非常安全的。</p>\n</li>\n<li><p>下行转换：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span><span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>&#123;&#125;&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>:</span><span class=\"keyword\">public</span> A&#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    A* pa = <span class=\"keyword\">new</span> B;</span><br><span class=\"line\">    B* pb = <span class=\"keyword\">dynamic_cast</span>&lt;B*&gt;(pa);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>A中定义了一个虚函数，这是不可缺少的。由于运行时类型检查需要运行时类型信息，而这个信息存在类的虚函数表中，只有定义了虚函数的类才有虚函数表。</p>\n</li>\n</ul>\n</li>\n<li><p>void*的转换</p>\n<p>一些情况下，我们需要将指针转换为void<em>，然后再合适的时候重新将void</em>转换为目标类型指针。</p>\n<p>因为在多重继承里，存在着指针调整的情况，调用<i>dynamic_cast</i>&lt;void*&gt;(ptr)，可以通过查表的方式，确定ptr实际对象的初始地址。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span> <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>&#123;&#125; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">     A *pA = <span class=\"keyword\">new</span> A;</span><br><span class=\"line\">     <span class=\"keyword\">void</span> *pV = <span class=\"keyword\">dynamic_cast</span>&lt;<span class=\"keyword\">void</span> *&gt;(pA); </span><br><span class=\"line\">&#125;菱形继承中的上行转换</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>首先，定义一组菱形继承的类：</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span> <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> :</span><span class=\"keyword\">public</span> A &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> :</span><span class=\"keyword\">public</span> A &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> :</span><span class=\"keyword\">public</span> B, <span class=\"keyword\">public</span> C &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>  B继承A，C继承A。</p>\n<p>  D继承B和C。</p>\n<p>  考虑这样的情况：D对象指针能否安全的转换为A类型指针？</p>\n<p>  直觉来说是可以的，因为从子类向父类转化，无论如何都是安全的。</p>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span> <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> :</span><span class=\"keyword\">public</span> A &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> :</span><span class=\"keyword\">public</span> A &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> :</span><span class=\"keyword\">public</span> B, <span class=\"keyword\">public</span> C &#123; <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    D *pD = <span class=\"keyword\">new</span> D;</span><br><span class=\"line\">    A *pA = <span class=\"keyword\">dynamic_cast</span>&lt;A *&gt;(pD); <span class=\"comment\">// pA = NULL</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  但实际上，如果尝试这样的转换，只能得到一个空指针。因为B和C都继承了A，并且都实现了虚函数f()，导致在进行转换时，无法选择一条转换路径。</p>\n<p>  一种可行的方法是，自行指定一条转换路径：</p>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span> <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> :</span><span class=\"keyword\">public</span> A &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> :</span><span class=\"keyword\">public</span> A &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> :</span><span class=\"keyword\">public</span> B, <span class=\"keyword\">public</span> C &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    D *pD = <span class=\"keyword\">new</span> D;</span><br><span class=\"line\">    B *pB = <span class=\"keyword\">dynamic_cast</span>&lt;B *&gt;(pD);</span><br><span class=\"line\">    A *pA = <span class=\"keyword\">dynamic_cast</span>&lt;A *&gt;(pB);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><p>reinterpret_cast</p>\n<p>可以转换任意类型的指针，在编译器完成，最好别使用。</p>\n</li>\n</ol>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ol>\n<li>为什么析构函数不能抛出异常？</li>\n</ol>\n<ul>\n<li>如果析构函数抛出异常，则<strong>异常点之后的程序不会执行</strong>，如果析构函数在异常点之后执行了某些必要的动作比如释放某些资源，则这些动作不会执行，会造成诸如资源泄漏的问题。(抛出点意味着后面的内容不会执行。)</li>\n<li>通常异常发生时，c++的机制会调用已经构造对象的析构函数来释放资源，此时若析构函数本身也抛出异常，则前一个异常尚未处理，又有新的异常，会造成程序崩溃的问题。</li>\n</ul>\n<p>析构函数无法保证没有异常情况怎么处理?</p>\n<p>​    把异常封闭在析构函数的内部，不让异常抛出函数之外。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~Destructor&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        do_something();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>()&#123;</span><br><span class=\"line\">        <span class=\"comment\">//可以什么都不做，只是确保异常不要逃出析构函数。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>构造函数和析构函数中调用虚函数吗？(Effective C++ Item9)</li>\n</ol>\n<p>​    最好不要在构造函数和析构函数中调用虚函数，不见得一定会出现错误，但可能不符合你的预期。</p>\n<ul>\n<li><p>在我们构造一个子类对象时，我们先执行的是父类的构造函数，然后执行子类的构造函数。倘若我们在父类构造函数里面调用虚函数。我们可以猜想到编译器可能会采取的两种处理方式：</p>\n<ul>\n<li>Plan A，调用虚函数的基类版本，这样失去了运行时调用的正确版本的意义。</li>\n<li>Plan B，调用虚函数的正确版本，倘若正确版本是子类函数，但子类这个时候还不存在，函数调用会导致未知行为。</li>\n</ul>\n<p>实际上编译器采用的是Plan A, 这种方式可以避免严重错误。但不可避免的是给使用者造成不符预期的困惑。</p>\n</li>\n<li><p>同样的道理，析构函数的调用顺序是先子类，再父类。同样存在在父类中调用所谓“正确版本”的虚函数时而子类不存在的问题。编译器采用的同样是调用虚函数的基类版本的方式。</p>\n<p>为了演示这只是构造函数和析构函数的特殊性，让我们来看下面的代码。</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  \tA()&#123;func();&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"A::func\"</span>;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>&#123;func();&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>:</span><span class=\"keyword\">public</span> A&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  \tB():A()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> override</span>&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"B::func\"</span>;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    A* a = <span class=\"keyword\">new</span> B;</span><br><span class=\"line\">    a-&gt;f();<span class=\"comment\">//result : A::func. B::func.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​    很明显在构造函数里面和普通函数分别调用虚函数行为不一样。</p>\n<ol start=\"3\">\n<li><p>引用和指针的区别</p>\n<ul>\n<li><p>引用在创建时必须初始化，引用到一个有效对象；而指针在定义时不必初始化，可以在定义后的任何地方重新赋值。</p>\n</li>\n<li><p>指针可以是NULL，引用不行</p>\n</li>\n<li><p>引用貌似一个对象的小名，一旦初始化指向一个对象，就不能将其他对象重新赋值给该引用，这样引用和原对象的值都会被更改。</p>\n</li>\n<li><p>引用的创建和销毁不会调用类的拷贝构造函数和析构函数。</p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>内存对齐的原则</p>\n<ul>\n<li><p>结构体的总大小，必须要是其内部最大成员的整数倍，不足的要补齐。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">one</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> a;=====&gt; <span class=\"number\">1</span> -&gt; <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;======&gt; <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> c;===&gt; <span class=\"number\">8.</span> <span class=\"comment\">//max</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> d;=====&gt; <span class=\"number\">1</span> -&gt; <span class=\"number\">8</span>  <span class=\"comment\">//补齐到8的整数倍</span></span><br><span class=\"line\">&#125; ONE;</span><br><span class=\"line\"><span class=\"comment\">//结构体one总大小： 4+4+8 = 16</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>结构体或联合的数据成员，第一个数据成员要放在offset==0的地方，如果遇上子成员，要根据子成员的类型存放在对应的整数倍上。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">two</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">array</span>[<span class=\"number\">2</span>];==&gt; <span class=\"number\">2</span> -&gt; <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;==========&gt; <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> c;=======&gt; <span class=\"number\">8</span>  <span class=\"comment\">//max</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> d;========&gt; <span class=\"number\">4</span> -&gt; <span class=\"number\">8</span>  <span class=\"comment\">//原则1</span></span><br><span class=\"line\">&#125; TWO;</span><br><span class=\"line\"><span class=\"comment\">//结构体two总大小： 4+4+8+8 = 24</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>如果结构体作为成员，则要找到这个结构体中的最大元素，然后从这个最大成员的整数倍地址开始存储。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">three</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> a; ====&gt; <span class=\"number\">1</span> -&gt; <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;======&gt; <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> c;===&gt; <span class=\"number\">8</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> d;====&gt; <span class=\"number\">2</span> -&gt; <span class=\"number\">8</span>  <span class=\"comment\">//原则3 ,下面是个结构体，其中最大成员为8，则需要从8的整数倍地址存放，所以变量d补齐到8</span></span><br><span class=\"line\">    TWO e;     ==&gt; <span class=\"number\">24</span> (max <span class=\"number\">8</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//结构体two总大小： 4+4+8+8+24 = 48</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"C-面试语法总结\"><a href=\"#C-面试语法总结\" class=\"headerlink\" title=\"C++面试语法总结\"></a>C++面试语法总结</h1><h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><ol>\n<li><p>static能够限制全局变量的作用域。在某一cpp文件中，我能通过extern的方式来访问其他cpp文件的全局变量。而static就断绝了这种可能性。</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*A.cpp*/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//const在cpp文件中默认是当前文件可见，若需要扩展可见性需要加上extern关键字</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> c = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*B.cpp*/</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">const</span>  <span class=\"keyword\">int</span> b;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> c;</span><br><span class=\"line\">\t\t </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;<span class=\"comment\">//Success.</span></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;b&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;<span class=\"comment\">//Success. </span></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;c&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;<span class=\"comment\">//Link error. </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>static表示数据的唯一性。在C++类里的static成员以及static成员函数，这些成员他们的归属不是对象，而是这个类本身，因此我们可以通过static成员来记录当前实例对象的数目。</p>\n<p> 对于static成员的初始化，在类外进行。</p>\n</li>\n<li><p>局部变量的static能够为函数加上状态。</p>\n</li>\n</ol>\n<h3 id=\"extern\"><a href=\"#extern\" class=\"headerlink\" title=\"extern\"></a>extern</h3><ol>\n<li><p>正如在static中所说的，通过extern声明可以访问其他cpp文件中的全局变量。通常在头文件中声明，在源文件中定义。比方说在一个项目里，我想定义一些可以供其他代码使用的常量。我可以通过宏的方式，在一个单独的头文件里进行宏的定义，在需要使用到某一变量时便引入该头文件。但这种使用一个便要引入全部的方式可能并不是太理想。我们可以换种其他的方式，在一个cpp文件里面定义所有的常量，然后每次需要使用的时候便通过extern引入该变量。使代码更简洁。</p>\n</li>\n<li><p>extern “C”。C++为函数实现了重载，重载的实现方式是一种叫做name mangling的处理。将函数的形参以及初始函数名结合进行编码，形成一个该函数唯一标识的函数名。比方说重载函数，因为形参不同，通过name mangling处理后，函数名便变得唯一了。</p>\n<p>正因为C++对于重载采取的特殊处理，当C++与C协同工作时可能会出现问题。比方说我想使用某个C的函数，我在文件进行声明，但C++编译器会对该声明进行name mangling处理，处理后在与该C函数所在obj文件链接时会出现链接错误。(名字不符了，有点被打得妈都不认识的意思。hhh)这个时候我们就需要在这段代码前加上extern “C”，用来告诉编译器，别对我进行name mangling处理。</p>\n</li>\n</ol>\n<h3 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h3><p>​    在知乎上面看到个回答觉得特别好，volatile的意思就是<b>非CPU改内存</b>。</p>\n<p>​    在程序执行的时候往往会进行某种程度的优化，比方说</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = *ptr;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = *ptr;</span><br></pre></td></tr></table></figure>\n<p>​    正常来讲代码需要两次访问ptr指向的内存，编译器可能就会在此基础上做出优化，在第一次访问后将该内容放在寄存器里，后面再访问时，直接访问寄存器就行，节省一次访存时间。</p>\n<p>​    但是这种优化的正确性在于我对没有非CPU部分改内存的假设。假若有个IO设备，修改了该内存，而程序却对此一无所知。volatile就是告诉编译器对该变量别做优化，每次访问从内存里读。</p>\n<h3 id=\"多态与虚函数\"><a href=\"#多态与虚函数\" class=\"headerlink\" title=\"多态与虚函数\"></a>多态与虚函数</h3><p>​    我理解的多态就是<b>一种接口，多种方法</b>。多态分为<b>编译期多态</b>和<b>运行期多态</b>。</p>\n<ol>\n<li><p>编译期多态。谈起编译期多态，我们首先提到的便是重载。相同的函数名，因为参数的不同有着不同的方法。重载的实现是通过采用一种叫做name mangling的处理方式。因为对函数调用的绑定是在编译期决议的，因此是一种编译期多态。</p>\n<p>另外一种用得比较多的编译期多态便是函数模板。一个简单的函数模板，因为模板参数的不同，在编译期实例化出不同的模板实例。这也是所谓的一种接口，多种方法。</p>\n</li>\n<li><p>运行期多态。也是我们谈起多态时的默认含义，它是通过基类的指针或引用来调用虚函数接口，实际调用的函数取决于指针(或引用)实际指向的对象。</p>\n<p>虚函数的实现建议阅读《深度探索C++对象模型》，以及陈皓博客</p>\n<p><a href=\"https://blog.csdn.net/haoel/article/details/1948051/\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/haoel/article/details/1948051/</a></p>\n</li>\n</ol>\n<h3 id=\"四种类型转换\"><a href=\"#四种类型转换\" class=\"headerlink\" title=\"四种类型转换\"></a>四种类型转换</h3><p>​    在介绍C++的四种类型转换时，我们先来看看C语言的显式转换。TYPE b = (TYPE) a，这种C风格的转换存在着许多缺点。因为它可以在任意类型之间进行转换，比如你可以把一个指向const对象的指针转换成指向非 const对象的指针，把一个指向基类对象的指针转换成指向一个派生类对象的指针。这两种转换差别巨大，但是传统C语言风格的类型转换没有区分。还有就是C语言针对每一种转换的格式都一样，不容易查找。</p>\n<ul>\n<li><p>static_cast，主要用于以下场合：</p>\n<ul>\n<li>用于类层次结构中，父类和子类之间指针和引用的转换；进行上行转换，把子类对象的指针/引用转换为父类指针/引用，这种转换是安全的；进行下行转换，把父类对象的指针/引用转换成子类指针/引用，这种转换是不安全的，需要编写程序时来确认；</li>\n<li>用于基本数据类型之间的转换，例如把int转char，int转enum等，需要编写程序时来确认安全性；</li>\n<li>把void指针转换成目标类型的指针（这是极其不安全的；</li>\n</ul>\n</li>\n<li><p>const_cast，用于移除类型的const，volatile，__unaligned属性。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pc;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *p = <span class=\"keyword\">const_cast</span>&lt;<span class=\"keyword\">char</span>*&gt;(pc);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>dynamic_cast， 转换仅适用于指针h或引用。</p>\n<p>​    相比static_cast，dynamic_cast会在运行时检查类型转换是否合法，具有一定的安全性。由于运行时的检查，所以会额外消耗一些性能。dynamic_cast使用场景与static相似，在类层次结构中使用时，上行转换和static_cast没有区别，都是安全的；下行转换时，dynamic_cast会检查转换的类型，相比static_cast更安全。</p>\n<p>​    在转换可能发生的前提下，dynamic_cast会尝试转换，若指针转换失败，则返回空指针，若引用转换失败，则抛出异常。</p>\n<ol>\n<li><p>继承中的转换</p>\n<ul>\n<li><p>上行转换：在继承关系中，dynamic_cast由子类向父类转换与static_cast和隐式转换一样，都是非常安全的。</p>\n</li>\n<li><p>下行转换：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span><span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>&#123;&#125;&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>:</span><span class=\"keyword\">public</span> A&#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    A* pa = <span class=\"keyword\">new</span> B;</span><br><span class=\"line\">    B* pb = <span class=\"keyword\">dynamic_cast</span>&lt;B*&gt;(pa);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>A中定义了一个虚函数，这是不可缺少的。由于运行时类型检查需要运行时类型信息，而这个信息存在类的虚函数表中，只有定义了虚函数的类才有虚函数表。</p>\n</li>\n</ul>\n</li>\n<li><p>void*的转换</p>\n<p>一些情况下，我们需要将指针转换为void<em>，然后再合适的时候重新将void</em>转换为目标类型指针。</p>\n<p>因为在多重继承里，存在着指针调整的情况，调用<i>dynamic_cast</i>&lt;void*&gt;(ptr)，可以通过查表的方式，确定ptr实际对象的初始地址。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span> <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>&#123;&#125; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">     A *pA = <span class=\"keyword\">new</span> A;</span><br><span class=\"line\">     <span class=\"keyword\">void</span> *pV = <span class=\"keyword\">dynamic_cast</span>&lt;<span class=\"keyword\">void</span> *&gt;(pA); </span><br><span class=\"line\">&#125;菱形继承中的上行转换</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>首先，定义一组菱形继承的类：</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span> <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> :</span><span class=\"keyword\">public</span> A &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> :</span><span class=\"keyword\">public</span> A &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> :</span><span class=\"keyword\">public</span> B, <span class=\"keyword\">public</span> C &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>  B继承A，C继承A。</p>\n<p>  D继承B和C。</p>\n<p>  考虑这样的情况：D对象指针能否安全的转换为A类型指针？</p>\n<p>  直觉来说是可以的，因为从子类向父类转化，无论如何都是安全的。</p>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span> <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> :</span><span class=\"keyword\">public</span> A &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> :</span><span class=\"keyword\">public</span> A &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> :</span><span class=\"keyword\">public</span> B, <span class=\"keyword\">public</span> C &#123; <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    D *pD = <span class=\"keyword\">new</span> D;</span><br><span class=\"line\">    A *pA = <span class=\"keyword\">dynamic_cast</span>&lt;A *&gt;(pD); <span class=\"comment\">// pA = NULL</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  但实际上，如果尝试这样的转换，只能得到一个空指针。因为B和C都继承了A，并且都实现了虚函数f()，导致在进行转换时，无法选择一条转换路径。</p>\n<p>  一种可行的方法是，自行指定一条转换路径：</p>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span> <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> :</span><span class=\"keyword\">public</span> A &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> :</span><span class=\"keyword\">public</span> A &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> :</span><span class=\"keyword\">public</span> B, <span class=\"keyword\">public</span> C &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    D *pD = <span class=\"keyword\">new</span> D;</span><br><span class=\"line\">    B *pB = <span class=\"keyword\">dynamic_cast</span>&lt;B *&gt;(pD);</span><br><span class=\"line\">    A *pA = <span class=\"keyword\">dynamic_cast</span>&lt;A *&gt;(pB);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><p>reinterpret_cast</p>\n<p>可以转换任意类型的指针，在编译器完成，最好别使用。</p>\n</li>\n</ol>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ol>\n<li>为什么析构函数不能抛出异常？</li>\n</ol>\n<ul>\n<li>如果析构函数抛出异常，则<strong>异常点之后的程序不会执行</strong>，如果析构函数在异常点之后执行了某些必要的动作比如释放某些资源，则这些动作不会执行，会造成诸如资源泄漏的问题。(抛出点意味着后面的内容不会执行。)</li>\n<li>通常异常发生时，c++的机制会调用已经构造对象的析构函数来释放资源，此时若析构函数本身也抛出异常，则前一个异常尚未处理，又有新的异常，会造成程序崩溃的问题。</li>\n</ul>\n<p>析构函数无法保证没有异常情况怎么处理?</p>\n<p>​    把异常封闭在析构函数的内部，不让异常抛出函数之外。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~Destructor&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        do_something();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>()&#123;</span><br><span class=\"line\">        <span class=\"comment\">//可以什么都不做，只是确保异常不要逃出析构函数。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>构造函数和析构函数中调用虚函数吗？(Effective C++ Item9)</li>\n</ol>\n<p>​    最好不要在构造函数和析构函数中调用虚函数，不见得一定会出现错误，但可能不符合你的预期。</p>\n<ul>\n<li><p>在我们构造一个子类对象时，我们先执行的是父类的构造函数，然后执行子类的构造函数。倘若我们在父类构造函数里面调用虚函数。我们可以猜想到编译器可能会采取的两种处理方式：</p>\n<ul>\n<li>Plan A，调用虚函数的基类版本，这样失去了运行时调用的正确版本的意义。</li>\n<li>Plan B，调用虚函数的正确版本，倘若正确版本是子类函数，但子类这个时候还不存在，函数调用会导致未知行为。</li>\n</ul>\n<p>实际上编译器采用的是Plan A, 这种方式可以避免严重错误。但不可避免的是给使用者造成不符预期的困惑。</p>\n</li>\n<li><p>同样的道理，析构函数的调用顺序是先子类，再父类。同样存在在父类中调用所谓“正确版本”的虚函数时而子类不存在的问题。编译器采用的同样是调用虚函数的基类版本的方式。</p>\n<p>为了演示这只是构造函数和析构函数的特殊性，让我们来看下面的代码。</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  \tA()&#123;func();&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"A::func\"</span>;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>&#123;func();&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>:</span><span class=\"keyword\">public</span> A&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  \tB():A()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> override</span>&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"B::func\"</span>;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    A* a = <span class=\"keyword\">new</span> B;</span><br><span class=\"line\">    a-&gt;f();<span class=\"comment\">//result : A::func. B::func.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​    很明显在构造函数里面和普通函数分别调用虚函数行为不一样。</p>\n<ol start=\"3\">\n<li><p>引用和指针的区别</p>\n<ul>\n<li><p>引用在创建时必须初始化，引用到一个有效对象；而指针在定义时不必初始化，可以在定义后的任何地方重新赋值。</p>\n</li>\n<li><p>指针可以是NULL，引用不行</p>\n</li>\n<li><p>引用貌似一个对象的小名，一旦初始化指向一个对象，就不能将其他对象重新赋值给该引用，这样引用和原对象的值都会被更改。</p>\n</li>\n<li><p>引用的创建和销毁不会调用类的拷贝构造函数和析构函数。</p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>内存对齐的原则</p>\n<ul>\n<li><p>结构体的总大小，必须要是其内部最大成员的整数倍，不足的要补齐。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">one</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> a;=====&gt; <span class=\"number\">1</span> -&gt; <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;======&gt; <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> c;===&gt; <span class=\"number\">8.</span> <span class=\"comment\">//max</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> d;=====&gt; <span class=\"number\">1</span> -&gt; <span class=\"number\">8</span>  <span class=\"comment\">//补齐到8的整数倍</span></span><br><span class=\"line\">&#125; ONE;</span><br><span class=\"line\"><span class=\"comment\">//结构体one总大小： 4+4+8 = 16</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>结构体或联合的数据成员，第一个数据成员要放在offset==0的地方，如果遇上子成员，要根据子成员的类型存放在对应的整数倍上。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">two</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">array</span>[<span class=\"number\">2</span>];==&gt; <span class=\"number\">2</span> -&gt; <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;==========&gt; <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> c;=======&gt; <span class=\"number\">8</span>  <span class=\"comment\">//max</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> d;========&gt; <span class=\"number\">4</span> -&gt; <span class=\"number\">8</span>  <span class=\"comment\">//原则1</span></span><br><span class=\"line\">&#125; TWO;</span><br><span class=\"line\"><span class=\"comment\">//结构体two总大小： 4+4+8+8 = 24</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>如果结构体作为成员，则要找到这个结构体中的最大元素，然后从这个最大成员的整数倍地址开始存储。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">three</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> a; ====&gt; <span class=\"number\">1</span> -&gt; <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;======&gt; <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> c;===&gt; <span class=\"number\">8</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> d;====&gt; <span class=\"number\">2</span> -&gt; <span class=\"number\">8</span>  <span class=\"comment\">//原则3 ,下面是个结构体，其中最大成员为8，则需要从8的整数倍地址存放，所以变量d补齐到8</span></span><br><span class=\"line\">    TWO e;     ==&gt; <span class=\"number\">24</span> (max <span class=\"number\">8</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//结构体two总大小： 4+4+8+8+24 = 48</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Unix信号","data":"2019-04-07T16:00:00.000Z","_content":"\n# 信号\n\n### 常见信号\n\n- SIGABRT：异常终止，默认动作：终止+core.\n- SIGALRM：定时器超时，终止\n- SIGCHLD：子进程状态改变，忽略\n- SIGINT：终端中断符，终止\n- SIGKILL：终止，终止\n- SIGPIPE：写至无读进程的管道，终止\n- SIGQUIT：中断推出符，终止+core\n- SIGSTOP：停止，停止进程\n- SIGTERM：终止，终止\n\n值得注意的是，我们可以为很多信号编写自己的信号处理函数，但是对于SIGSTOP和SIGKILL，它们既不能被捕捉也不能被忽略。\n\n\n\n### 几种终止信号的比较\n\nSIGINT：当用户按中断键，终端驱动程序产生此信号并发送到前台进程组中每一个进程。\n\nSIGABRT：调用abort产生此信号，进程异常终止。\n\nSIGKILL：不能被忽略或捕捉的信号，杀死一个进程可靠的方法。\n\nSIGQUIT：相比于SIGINT，同时产生一个core文件。\n\nSIGTERM：kill命令的默认终止信号。SIGTERM让程序有机会在推出前做好清理工作，从而优雅的终止。\n\nSIGSTOP：作业控制信号，停止一个进程，类似于交互停止信号。不能被忽略或捕捉。\n\n\n\n### 常用Api\n\n```c\n#include<signal.h>\nvoid (*signal(int signo, void (*func)(int)))(int);\n\t\t\t\t//返回值：若成功，返回以前的信号处理配置；若出错，返回SIG_ERR.\n```\n\n```c\n#include<signal.h>\nint kill(pid_t pid, int signo);\nint raise(int signo);\n\t\t\t\t//返回值：若成功，返回0；若出错，返回-1.\n```\n\n<i>raise(signo)等价于调用kill(getpid(),signo)</i>\n\n进程将信号发送给其他进程需要权限，超级用户可以将信号发送给任一进程。对于非超级用户，基本规则是发送者的实际用户ID或有效用户ID必须等于接收者的实际用户ID或有效用户ID。(谁登录，执行进程的实际ID就是谁)\n\n```c\n#include<unistd.h>\nunsigned int alarm(unsigned int seconds);\n\t\t\t\t//返回：0或以前设置过的闹钟时间的余留时间。\n```\n\n每个进程只能有一个闹钟时间，以前注册的时间将作为新闹钟的返回值返回。如果seconds为0，相当于取消以前的闹钟。alarm的默认动作是终止进程，我们必须在alarm之前安装处理程序，不然可能出现意外情况。\n\n```c\n#include<unistd.h>\nint pause(void);\n\t\t\t\t//返回：-1，errno设置为EINTR\n```\n\n只有执行了信号处理程序并从其返回时，pause才返回。\n\n```c\n#include<signal.h>\nint sigemptyset(sigset_t *set);\nint sigfillset(sigset_t *set);\nint sigaddset(sigset_t *set);\nint sigdelset(sigset_t *set, int signo);\n\t\t\t\t//返回：若成功，返回0；若出错，返回-1\nint sigismember(const sigset_t *set, int signo);\n\t\t\t\t//返回：若真，返回1；若假，返回0\n```\n\n```c\n#include<signal.h>\nint sigprocmask(int how, const sigset_t *set, sigset_t *oset);\n\t\t\t\t//返回值：若成功，返回0，若出错，返回-1.\n```\n\nhow是可选的选项，包括SIG_BLOCK，SIG_UNBLOCK，SIG_SETMASK。<b>注意</b>：不能阻塞SIGKILL和SIGSTOP信号。\n\n```c\n#include<signal.h>\nint sigpending(sigset_t *set);\n\t\t\t\t//返回值：若成功，返回0，若出错，返回-1.\n```\n\n<i>sigpending</i>返回当前未决的信号。\n\n```c\n#include<signal.h>\nint sigaction(int signo, const struct sigaction *act, struct sigaction *oact);\n\t\t\t\t//返回值：若成功，返回0；若出错，返回-1.\n\nstruct sigaction{\n    void (*sa_handler)(int); //addr of signal handler.\n    sigset_t sa_mask;//additional signals to block\n    int sa_flags;//signal options, \n    void (*sa_sigaction)(int,siginfo_t *,void *);//alternate handler.\n};\n```\n\n在信号处理期间将<i>sa_mask</i>加入阻塞集，在调用完后恢复。若同一个信号发生多次，通常不会将它们加入队列，被阻塞的信号发生多次，在恢复后通常只会被调用一次。<i>sa_flags</i>能决定对于信号中断的系统调用是否重启，通过设置SA_INTERRUPT或SA_RESTART.\n\n```c\n#include<setjmp.h>\nint sigsetjmp(sigjmp_buf env, int savemask);\n\t\t\t\t//返回值：若直接调用，返回0；若从siglongjmp调用返回，则返回非0.\nvoid siglongjmp(sigjmp_buf env, int val);\n```\n\n之所以增加对于信号的跳转函数的特殊处理，是因为在信号处理函数里的屏蔽信号跟进程环境是有区别的。当<i>savemask</i>非0，则调用<i>sigsetjmp</i>时在<i>env</i>中保存当前信号屏蔽字。在<i>siglongjmp</i>后恢复。\n\n```c\n#include<signal.h>\nint sigsuspend(const sigset_t *sigmask);\n\t\t\t\t//返回值：-1，并将errno设置为EINTR\n```\n\n这个函数是为了表达进入休眠，期待被期望的信号唤醒的语义。假想在没有该函数时，我们该如何实现。为期待的信号设置阻塞，然后解除阻塞后紧接着调用pause()?那要是确实有期待的信号被阻塞了，但是在接触阻塞后，调用pause前解除了，可能就存在永远唤不醒的情况。\n\n进程的信号屏蔽字设置为由<i>sigmask</i>指向的值。如果捕捉到一个信号而且从信号处理程序返回，则sigsuspend返回，并恢复原来的屏蔽字。\n\n```c\n#include<stdlib.h>\nvoid abort(void);\n```\n\n调用此函数将给进程发送一个<i>SIGABRT</i>信号。让进程捕捉SIGABRT意图是：在进程终止之前由其执行所需的清理操作。如果进程不在信号处理程序中终止自己，POSIX对此的要求是当信号处理程序返回时，abort终止该进程。POSIX对终止进程提出的要求是，所有打开的标准流应当与对每个流调用fclose相同。\n\n```c\n#include<unistd.h>\nunsigned int sleep(unsigned int seconds);\n\t\t\t\t//返回值：0或未休眠完的秒数。\n```\n\n函数使进程被挂起直到满足下列两个条件之一：\n\n- 过了seconds指定的时间。\n- 调用进程捕捉到了一个信号并从信号处理程序返回。\n\n\n\n### 有关信号的一些小内容\n\n#### 可重入函数\n\n​\t我对信号处理函数的理解是像线程一样，它和主线程是共享全局环境的。因此在信号处理函数中调用可重入函数就显得很重要。函数的不可重入性往往是因为如下原因a)使用静态数据结构；b)调用malloc或free；c)它们是标准I/O函数，标准I/O库很多都使用全局数据结构。\n\n​\t信号处理函数虽然像线程，但是线程保存着<i>errno</i>的副本，互不干扰。但信号处理函数不一样，因此，我们在调用一些系统函数时，需要先保存<i>errno</i>值，在调用完后恢复。\n\n#### SIGCLD语义\n\n​\tSIGCLD和SIGCHLD不一样，前者时System V的信号名，与POSIX采用的SIGCHLD不同。System V的该信号有如下特点。\n\n1. 如果进程明确将信号配置为SIG_IGN，则调用进程的子进程不产生将死进程。\n2. 如果SIGCLD被设置为捕捉，则内核会立即检查是否有子进程准备好。如果是，调用SIGCLD。\n\n#### 可靠信号语义\n\n​\t当一个信号产生时，内核通常在进程表中以某种形式设置一个标志。在信号产生和递送之间的时间间隔里，信号是未决的。内核在将信号递给进程时，才决定处理方式，在此之前可以任意修改对此信号的处理动作。在进程解除对某个信号的阻塞前，这种信号发生多次，Posix允许递送信号一次或多次。除非支持Posix实时扩展，否则大多数UNIX不对信号排队，只递送信号一次。","source":"_posts/Unix/2019-04-08-Signal.md","raw":"---\ntitle: Unix信号\ncategories: Unix\ntags: [APUE,Unix]\ndata: 2019-04-08\n---\n\n# 信号\n\n### 常见信号\n\n- SIGABRT：异常终止，默认动作：终止+core.\n- SIGALRM：定时器超时，终止\n- SIGCHLD：子进程状态改变，忽略\n- SIGINT：终端中断符，终止\n- SIGKILL：终止，终止\n- SIGPIPE：写至无读进程的管道，终止\n- SIGQUIT：中断推出符，终止+core\n- SIGSTOP：停止，停止进程\n- SIGTERM：终止，终止\n\n值得注意的是，我们可以为很多信号编写自己的信号处理函数，但是对于SIGSTOP和SIGKILL，它们既不能被捕捉也不能被忽略。\n\n\n\n### 几种终止信号的比较\n\nSIGINT：当用户按中断键，终端驱动程序产生此信号并发送到前台进程组中每一个进程。\n\nSIGABRT：调用abort产生此信号，进程异常终止。\n\nSIGKILL：不能被忽略或捕捉的信号，杀死一个进程可靠的方法。\n\nSIGQUIT：相比于SIGINT，同时产生一个core文件。\n\nSIGTERM：kill命令的默认终止信号。SIGTERM让程序有机会在推出前做好清理工作，从而优雅的终止。\n\nSIGSTOP：作业控制信号，停止一个进程，类似于交互停止信号。不能被忽略或捕捉。\n\n\n\n### 常用Api\n\n```c\n#include<signal.h>\nvoid (*signal(int signo, void (*func)(int)))(int);\n\t\t\t\t//返回值：若成功，返回以前的信号处理配置；若出错，返回SIG_ERR.\n```\n\n```c\n#include<signal.h>\nint kill(pid_t pid, int signo);\nint raise(int signo);\n\t\t\t\t//返回值：若成功，返回0；若出错，返回-1.\n```\n\n<i>raise(signo)等价于调用kill(getpid(),signo)</i>\n\n进程将信号发送给其他进程需要权限，超级用户可以将信号发送给任一进程。对于非超级用户，基本规则是发送者的实际用户ID或有效用户ID必须等于接收者的实际用户ID或有效用户ID。(谁登录，执行进程的实际ID就是谁)\n\n```c\n#include<unistd.h>\nunsigned int alarm(unsigned int seconds);\n\t\t\t\t//返回：0或以前设置过的闹钟时间的余留时间。\n```\n\n每个进程只能有一个闹钟时间，以前注册的时间将作为新闹钟的返回值返回。如果seconds为0，相当于取消以前的闹钟。alarm的默认动作是终止进程，我们必须在alarm之前安装处理程序，不然可能出现意外情况。\n\n```c\n#include<unistd.h>\nint pause(void);\n\t\t\t\t//返回：-1，errno设置为EINTR\n```\n\n只有执行了信号处理程序并从其返回时，pause才返回。\n\n```c\n#include<signal.h>\nint sigemptyset(sigset_t *set);\nint sigfillset(sigset_t *set);\nint sigaddset(sigset_t *set);\nint sigdelset(sigset_t *set, int signo);\n\t\t\t\t//返回：若成功，返回0；若出错，返回-1\nint sigismember(const sigset_t *set, int signo);\n\t\t\t\t//返回：若真，返回1；若假，返回0\n```\n\n```c\n#include<signal.h>\nint sigprocmask(int how, const sigset_t *set, sigset_t *oset);\n\t\t\t\t//返回值：若成功，返回0，若出错，返回-1.\n```\n\nhow是可选的选项，包括SIG_BLOCK，SIG_UNBLOCK，SIG_SETMASK。<b>注意</b>：不能阻塞SIGKILL和SIGSTOP信号。\n\n```c\n#include<signal.h>\nint sigpending(sigset_t *set);\n\t\t\t\t//返回值：若成功，返回0，若出错，返回-1.\n```\n\n<i>sigpending</i>返回当前未决的信号。\n\n```c\n#include<signal.h>\nint sigaction(int signo, const struct sigaction *act, struct sigaction *oact);\n\t\t\t\t//返回值：若成功，返回0；若出错，返回-1.\n\nstruct sigaction{\n    void (*sa_handler)(int); //addr of signal handler.\n    sigset_t sa_mask;//additional signals to block\n    int sa_flags;//signal options, \n    void (*sa_sigaction)(int,siginfo_t *,void *);//alternate handler.\n};\n```\n\n在信号处理期间将<i>sa_mask</i>加入阻塞集，在调用完后恢复。若同一个信号发生多次，通常不会将它们加入队列，被阻塞的信号发生多次，在恢复后通常只会被调用一次。<i>sa_flags</i>能决定对于信号中断的系统调用是否重启，通过设置SA_INTERRUPT或SA_RESTART.\n\n```c\n#include<setjmp.h>\nint sigsetjmp(sigjmp_buf env, int savemask);\n\t\t\t\t//返回值：若直接调用，返回0；若从siglongjmp调用返回，则返回非0.\nvoid siglongjmp(sigjmp_buf env, int val);\n```\n\n之所以增加对于信号的跳转函数的特殊处理，是因为在信号处理函数里的屏蔽信号跟进程环境是有区别的。当<i>savemask</i>非0，则调用<i>sigsetjmp</i>时在<i>env</i>中保存当前信号屏蔽字。在<i>siglongjmp</i>后恢复。\n\n```c\n#include<signal.h>\nint sigsuspend(const sigset_t *sigmask);\n\t\t\t\t//返回值：-1，并将errno设置为EINTR\n```\n\n这个函数是为了表达进入休眠，期待被期望的信号唤醒的语义。假想在没有该函数时，我们该如何实现。为期待的信号设置阻塞，然后解除阻塞后紧接着调用pause()?那要是确实有期待的信号被阻塞了，但是在接触阻塞后，调用pause前解除了，可能就存在永远唤不醒的情况。\n\n进程的信号屏蔽字设置为由<i>sigmask</i>指向的值。如果捕捉到一个信号而且从信号处理程序返回，则sigsuspend返回，并恢复原来的屏蔽字。\n\n```c\n#include<stdlib.h>\nvoid abort(void);\n```\n\n调用此函数将给进程发送一个<i>SIGABRT</i>信号。让进程捕捉SIGABRT意图是：在进程终止之前由其执行所需的清理操作。如果进程不在信号处理程序中终止自己，POSIX对此的要求是当信号处理程序返回时，abort终止该进程。POSIX对终止进程提出的要求是，所有打开的标准流应当与对每个流调用fclose相同。\n\n```c\n#include<unistd.h>\nunsigned int sleep(unsigned int seconds);\n\t\t\t\t//返回值：0或未休眠完的秒数。\n```\n\n函数使进程被挂起直到满足下列两个条件之一：\n\n- 过了seconds指定的时间。\n- 调用进程捕捉到了一个信号并从信号处理程序返回。\n\n\n\n### 有关信号的一些小内容\n\n#### 可重入函数\n\n​\t我对信号处理函数的理解是像线程一样，它和主线程是共享全局环境的。因此在信号处理函数中调用可重入函数就显得很重要。函数的不可重入性往往是因为如下原因a)使用静态数据结构；b)调用malloc或free；c)它们是标准I/O函数，标准I/O库很多都使用全局数据结构。\n\n​\t信号处理函数虽然像线程，但是线程保存着<i>errno</i>的副本，互不干扰。但信号处理函数不一样，因此，我们在调用一些系统函数时，需要先保存<i>errno</i>值，在调用完后恢复。\n\n#### SIGCLD语义\n\n​\tSIGCLD和SIGCHLD不一样，前者时System V的信号名，与POSIX采用的SIGCHLD不同。System V的该信号有如下特点。\n\n1. 如果进程明确将信号配置为SIG_IGN，则调用进程的子进程不产生将死进程。\n2. 如果SIGCLD被设置为捕捉，则内核会立即检查是否有子进程准备好。如果是，调用SIGCLD。\n\n#### 可靠信号语义\n\n​\t当一个信号产生时，内核通常在进程表中以某种形式设置一个标志。在信号产生和递送之间的时间间隔里，信号是未决的。内核在将信号递给进程时，才决定处理方式，在此之前可以任意修改对此信号的处理动作。在进程解除对某个信号的阻塞前，这种信号发生多次，Posix允许递送信号一次或多次。除非支持Posix实时扩展，否则大多数UNIX不对信号排队，只递送信号一次。","slug":"Unix/2019-04-08-Signal","published":1,"date":"2019-04-08T08:20:18.498Z","updated":"2019-04-09T07:31:50.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdlcrxd0001eguhy2j1q4p5","content":"<h1 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h1><h3 id=\"常见信号\"><a href=\"#常见信号\" class=\"headerlink\" title=\"常见信号\"></a>常见信号</h3><ul>\n<li>SIGABRT：异常终止，默认动作：终止+core.</li>\n<li>SIGALRM：定时器超时，终止</li>\n<li>SIGCHLD：子进程状态改变，忽略</li>\n<li>SIGINT：终端中断符，终止</li>\n<li>SIGKILL：终止，终止</li>\n<li>SIGPIPE：写至无读进程的管道，终止</li>\n<li>SIGQUIT：中断推出符，终止+core</li>\n<li>SIGSTOP：停止，停止进程</li>\n<li>SIGTERM：终止，终止</li>\n</ul>\n<p>值得注意的是，我们可以为很多信号编写自己的信号处理函数，但是对于SIGSTOP和SIGKILL，它们既不能被捕捉也不能被忽略。</p>\n<h3 id=\"几种终止信号的比较\"><a href=\"#几种终止信号的比较\" class=\"headerlink\" title=\"几种终止信号的比较\"></a>几种终止信号的比较</h3><p>SIGINT：当用户按中断键，终端驱动程序产生此信号并发送到前台进程组中每一个进程。</p>\n<p>SIGABRT：调用abort产生此信号，进程异常终止。</p>\n<p>SIGKILL：不能被忽略或捕捉的信号，杀死一个进程可靠的方法。</p>\n<p>SIGQUIT：相比于SIGINT，同时产生一个core文件。</p>\n<p>SIGTERM：kill命令的默认终止信号。SIGTERM让程序有机会在推出前做好清理工作，从而优雅的终止。</p>\n<p>SIGSTOP：作业控制信号，停止一个进程，类似于交互停止信号。不能被忽略或捕捉。</p>\n<h3 id=\"常用Api\"><a href=\"#常用Api\" class=\"headerlink\" title=\"常用Api\"></a>常用Api</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">void</span> (*signal(<span class=\"keyword\">int</span> signo, <span class=\"keyword\">void</span> (*func)(<span class=\"keyword\">int</span>)))(<span class=\"keyword\">int</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回值：若成功，返回以前的信号处理配置；若出错，返回SIG_ERR.</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">kill</span><span class=\"params\">(<span class=\"keyword\">pid_t</span> pid, <span class=\"keyword\">int</span> signo)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">raise</span><span class=\"params\">(<span class=\"keyword\">int</span> signo)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回值：若成功，返回0；若出错，返回-1.</span></span><br></pre></td></tr></table></figure>\n<p><i>raise(signo)等价于调用kill(getpid(),signo)</i></p>\n<p>进程将信号发送给其他进程需要权限，超级用户可以将信号发送给任一进程。对于非超级用户，基本规则是发送者的实际用户ID或有效用户ID必须等于接收者的实际用户ID或有效用户ID。(谁登录，执行进程的实际ID就是谁)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">alarm</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> seconds)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回：0或以前设置过的闹钟时间的余留时间。</span></span><br></pre></td></tr></table></figure>\n<p>每个进程只能有一个闹钟时间，以前注册的时间将作为新闹钟的返回值返回。如果seconds为0，相当于取消以前的闹钟。alarm的默认动作是终止进程，我们必须在alarm之前安装处理程序，不然可能出现意外情况。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pause</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回：-1，errno设置为EINTR</span></span><br></pre></td></tr></table></figure>\n<p>只有执行了信号处理程序并从其返回时，pause才返回。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigemptyset</span><span class=\"params\">(<span class=\"keyword\">sigset_t</span> *<span class=\"built_in\">set</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigfillset</span><span class=\"params\">(<span class=\"keyword\">sigset_t</span> *<span class=\"built_in\">set</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigaddset</span><span class=\"params\">(<span class=\"keyword\">sigset_t</span> *<span class=\"built_in\">set</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigdelset</span><span class=\"params\">(<span class=\"keyword\">sigset_t</span> *<span class=\"built_in\">set</span>, <span class=\"keyword\">int</span> signo)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回：若成功，返回0；若出错，返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigismember</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">sigset_t</span> *<span class=\"built_in\">set</span>, <span class=\"keyword\">int</span> signo)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回：若真，返回1；若假，返回0</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigprocmask</span><span class=\"params\">(<span class=\"keyword\">int</span> how, <span class=\"keyword\">const</span> <span class=\"keyword\">sigset_t</span> *<span class=\"built_in\">set</span>, <span class=\"keyword\">sigset_t</span> *oset)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回值：若成功，返回0，若出错，返回-1.</span></span><br></pre></td></tr></table></figure>\n<p>how是可选的选项，包括SIG_BLOCK，SIG_UNBLOCK，SIG_SETMASK。<b>注意</b>：不能阻塞SIGKILL和SIGSTOP信号。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigpending</span><span class=\"params\">(<span class=\"keyword\">sigset_t</span> *<span class=\"built_in\">set</span>)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回值：若成功，返回0，若出错，返回-1.</span></span><br></pre></td></tr></table></figure>\n<p><i>sigpending</i>返回当前未决的信号。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigaction</span><span class=\"params\">(<span class=\"keyword\">int</span> signo, <span class=\"keyword\">const</span> struct sigaction *act, struct sigaction *oact)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回值：若成功，返回0；若出错，返回-1.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*sa_handler)(<span class=\"keyword\">int</span>); <span class=\"comment\">//addr of signal handler.</span></span><br><span class=\"line\">    <span class=\"keyword\">sigset_t</span> sa_mask;<span class=\"comment\">//additional signals to block</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sa_flags;<span class=\"comment\">//signal options, </span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*sa_sigaction)(<span class=\"keyword\">int</span>,<span class=\"keyword\">siginfo_t</span> *,<span class=\"keyword\">void</span> *);<span class=\"comment\">//alternate handler.</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在信号处理期间将<i>sa_mask</i>加入阻塞集，在调用完后恢复。若同一个信号发生多次，通常不会将它们加入队列，被阻塞的信号发生多次，在恢复后通常只会被调用一次。<i>sa_flags</i>能决定对于信号中断的系统调用是否重启，通过设置SA_INTERRUPT或SA_RESTART.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;setjmp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigsetjmp</span><span class=\"params\">(sigjmp_buf env, <span class=\"keyword\">int</span> savemask)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回值：若直接调用，返回0；若从siglongjmp调用返回，则返回非0.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">siglongjmp</span><span class=\"params\">(sigjmp_buf env, <span class=\"keyword\">int</span> val)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>之所以增加对于信号的跳转函数的特殊处理，是因为在信号处理函数里的屏蔽信号跟进程环境是有区别的。当<i>savemask</i>非0，则调用<i>sigsetjmp</i>时在<i>env</i>中保存当前信号屏蔽字。在<i>siglongjmp</i>后恢复。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigsuspend</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">sigset_t</span> *sigmask)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回值：-1，并将errno设置为EINTR</span></span><br></pre></td></tr></table></figure>\n<p>这个函数是为了表达进入休眠，期待被期望的信号唤醒的语义。假想在没有该函数时，我们该如何实现。为期待的信号设置阻塞，然后解除阻塞后紧接着调用pause()?那要是确实有期待的信号被阻塞了，但是在接触阻塞后，调用pause前解除了，可能就存在永远唤不醒的情况。</p>\n<p>进程的信号屏蔽字设置为由<i>sigmask</i>指向的值。如果捕捉到一个信号而且从信号处理程序返回，则sigsuspend返回，并恢复原来的屏蔽字。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">abort</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>调用此函数将给进程发送一个<i>SIGABRT</i>信号。让进程捕捉SIGABRT意图是：在进程终止之前由其执行所需的清理操作。如果进程不在信号处理程序中终止自己，POSIX对此的要求是当信号处理程序返回时，abort终止该进程。POSIX对终止进程提出的要求是，所有打开的标准流应当与对每个流调用fclose相同。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">sleep</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> seconds)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回值：0或未休眠完的秒数。</span></span><br></pre></td></tr></table></figure>\n<p>函数使进程被挂起直到满足下列两个条件之一：</p>\n<ul>\n<li>过了seconds指定的时间。</li>\n<li>调用进程捕捉到了一个信号并从信号处理程序返回。</li>\n</ul>\n<h3 id=\"有关信号的一些小内容\"><a href=\"#有关信号的一些小内容\" class=\"headerlink\" title=\"有关信号的一些小内容\"></a>有关信号的一些小内容</h3><h4 id=\"可重入函数\"><a href=\"#可重入函数\" class=\"headerlink\" title=\"可重入函数\"></a>可重入函数</h4><p>​    我对信号处理函数的理解是像线程一样，它和主线程是共享全局环境的。因此在信号处理函数中调用可重入函数就显得很重要。函数的不可重入性往往是因为如下原因a)使用静态数据结构；b)调用malloc或free；c)它们是标准I/O函数，标准I/O库很多都使用全局数据结构。</p>\n<p>​    信号处理函数虽然像线程，但是线程保存着<i>errno</i>的副本，互不干扰。但信号处理函数不一样，因此，我们在调用一些系统函数时，需要先保存<i>errno</i>值，在调用完后恢复。</p>\n<h4 id=\"SIGCLD语义\"><a href=\"#SIGCLD语义\" class=\"headerlink\" title=\"SIGCLD语义\"></a>SIGCLD语义</h4><p>​    SIGCLD和SIGCHLD不一样，前者时System V的信号名，与POSIX采用的SIGCHLD不同。System V的该信号有如下特点。</p>\n<ol>\n<li>如果进程明确将信号配置为SIG_IGN，则调用进程的子进程不产生将死进程。</li>\n<li>如果SIGCLD被设置为捕捉，则内核会立即检查是否有子进程准备好。如果是，调用SIGCLD。</li>\n</ol>\n<h4 id=\"可靠信号语义\"><a href=\"#可靠信号语义\" class=\"headerlink\" title=\"可靠信号语义\"></a>可靠信号语义</h4><p>​    当一个信号产生时，内核通常在进程表中以某种形式设置一个标志。在信号产生和递送之间的时间间隔里，信号是未决的。内核在将信号递给进程时，才决定处理方式，在此之前可以任意修改对此信号的处理动作。在进程解除对某个信号的阻塞前，这种信号发生多次，Posix允许递送信号一次或多次。除非支持Posix实时扩展，否则大多数UNIX不对信号排队，只递送信号一次。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h1><h3 id=\"常见信号\"><a href=\"#常见信号\" class=\"headerlink\" title=\"常见信号\"></a>常见信号</h3><ul>\n<li>SIGABRT：异常终止，默认动作：终止+core.</li>\n<li>SIGALRM：定时器超时，终止</li>\n<li>SIGCHLD：子进程状态改变，忽略</li>\n<li>SIGINT：终端中断符，终止</li>\n<li>SIGKILL：终止，终止</li>\n<li>SIGPIPE：写至无读进程的管道，终止</li>\n<li>SIGQUIT：中断推出符，终止+core</li>\n<li>SIGSTOP：停止，停止进程</li>\n<li>SIGTERM：终止，终止</li>\n</ul>\n<p>值得注意的是，我们可以为很多信号编写自己的信号处理函数，但是对于SIGSTOP和SIGKILL，它们既不能被捕捉也不能被忽略。</p>\n<h3 id=\"几种终止信号的比较\"><a href=\"#几种终止信号的比较\" class=\"headerlink\" title=\"几种终止信号的比较\"></a>几种终止信号的比较</h3><p>SIGINT：当用户按中断键，终端驱动程序产生此信号并发送到前台进程组中每一个进程。</p>\n<p>SIGABRT：调用abort产生此信号，进程异常终止。</p>\n<p>SIGKILL：不能被忽略或捕捉的信号，杀死一个进程可靠的方法。</p>\n<p>SIGQUIT：相比于SIGINT，同时产生一个core文件。</p>\n<p>SIGTERM：kill命令的默认终止信号。SIGTERM让程序有机会在推出前做好清理工作，从而优雅的终止。</p>\n<p>SIGSTOP：作业控制信号，停止一个进程，类似于交互停止信号。不能被忽略或捕捉。</p>\n<h3 id=\"常用Api\"><a href=\"#常用Api\" class=\"headerlink\" title=\"常用Api\"></a>常用Api</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">void</span> (*signal(<span class=\"keyword\">int</span> signo, <span class=\"keyword\">void</span> (*func)(<span class=\"keyword\">int</span>)))(<span class=\"keyword\">int</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回值：若成功，返回以前的信号处理配置；若出错，返回SIG_ERR.</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">kill</span><span class=\"params\">(<span class=\"keyword\">pid_t</span> pid, <span class=\"keyword\">int</span> signo)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">raise</span><span class=\"params\">(<span class=\"keyword\">int</span> signo)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回值：若成功，返回0；若出错，返回-1.</span></span><br></pre></td></tr></table></figure>\n<p><i>raise(signo)等价于调用kill(getpid(),signo)</i></p>\n<p>进程将信号发送给其他进程需要权限，超级用户可以将信号发送给任一进程。对于非超级用户，基本规则是发送者的实际用户ID或有效用户ID必须等于接收者的实际用户ID或有效用户ID。(谁登录，执行进程的实际ID就是谁)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">alarm</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> seconds)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回：0或以前设置过的闹钟时间的余留时间。</span></span><br></pre></td></tr></table></figure>\n<p>每个进程只能有一个闹钟时间，以前注册的时间将作为新闹钟的返回值返回。如果seconds为0，相当于取消以前的闹钟。alarm的默认动作是终止进程，我们必须在alarm之前安装处理程序，不然可能出现意外情况。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pause</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回：-1，errno设置为EINTR</span></span><br></pre></td></tr></table></figure>\n<p>只有执行了信号处理程序并从其返回时，pause才返回。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigemptyset</span><span class=\"params\">(<span class=\"keyword\">sigset_t</span> *<span class=\"built_in\">set</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigfillset</span><span class=\"params\">(<span class=\"keyword\">sigset_t</span> *<span class=\"built_in\">set</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigaddset</span><span class=\"params\">(<span class=\"keyword\">sigset_t</span> *<span class=\"built_in\">set</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigdelset</span><span class=\"params\">(<span class=\"keyword\">sigset_t</span> *<span class=\"built_in\">set</span>, <span class=\"keyword\">int</span> signo)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回：若成功，返回0；若出错，返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigismember</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">sigset_t</span> *<span class=\"built_in\">set</span>, <span class=\"keyword\">int</span> signo)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回：若真，返回1；若假，返回0</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigprocmask</span><span class=\"params\">(<span class=\"keyword\">int</span> how, <span class=\"keyword\">const</span> <span class=\"keyword\">sigset_t</span> *<span class=\"built_in\">set</span>, <span class=\"keyword\">sigset_t</span> *oset)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回值：若成功，返回0，若出错，返回-1.</span></span><br></pre></td></tr></table></figure>\n<p>how是可选的选项，包括SIG_BLOCK，SIG_UNBLOCK，SIG_SETMASK。<b>注意</b>：不能阻塞SIGKILL和SIGSTOP信号。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigpending</span><span class=\"params\">(<span class=\"keyword\">sigset_t</span> *<span class=\"built_in\">set</span>)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回值：若成功，返回0，若出错，返回-1.</span></span><br></pre></td></tr></table></figure>\n<p><i>sigpending</i>返回当前未决的信号。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigaction</span><span class=\"params\">(<span class=\"keyword\">int</span> signo, <span class=\"keyword\">const</span> struct sigaction *act, struct sigaction *oact)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回值：若成功，返回0；若出错，返回-1.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*sa_handler)(<span class=\"keyword\">int</span>); <span class=\"comment\">//addr of signal handler.</span></span><br><span class=\"line\">    <span class=\"keyword\">sigset_t</span> sa_mask;<span class=\"comment\">//additional signals to block</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sa_flags;<span class=\"comment\">//signal options, </span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*sa_sigaction)(<span class=\"keyword\">int</span>,<span class=\"keyword\">siginfo_t</span> *,<span class=\"keyword\">void</span> *);<span class=\"comment\">//alternate handler.</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在信号处理期间将<i>sa_mask</i>加入阻塞集，在调用完后恢复。若同一个信号发生多次，通常不会将它们加入队列，被阻塞的信号发生多次，在恢复后通常只会被调用一次。<i>sa_flags</i>能决定对于信号中断的系统调用是否重启，通过设置SA_INTERRUPT或SA_RESTART.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;setjmp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigsetjmp</span><span class=\"params\">(sigjmp_buf env, <span class=\"keyword\">int</span> savemask)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回值：若直接调用，返回0；若从siglongjmp调用返回，则返回非0.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">siglongjmp</span><span class=\"params\">(sigjmp_buf env, <span class=\"keyword\">int</span> val)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>之所以增加对于信号的跳转函数的特殊处理，是因为在信号处理函数里的屏蔽信号跟进程环境是有区别的。当<i>savemask</i>非0，则调用<i>sigsetjmp</i>时在<i>env</i>中保存当前信号屏蔽字。在<i>siglongjmp</i>后恢复。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigsuspend</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">sigset_t</span> *sigmask)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回值：-1，并将errno设置为EINTR</span></span><br></pre></td></tr></table></figure>\n<p>这个函数是为了表达进入休眠，期待被期望的信号唤醒的语义。假想在没有该函数时，我们该如何实现。为期待的信号设置阻塞，然后解除阻塞后紧接着调用pause()?那要是确实有期待的信号被阻塞了，但是在接触阻塞后，调用pause前解除了，可能就存在永远唤不醒的情况。</p>\n<p>进程的信号屏蔽字设置为由<i>sigmask</i>指向的值。如果捕捉到一个信号而且从信号处理程序返回，则sigsuspend返回，并恢复原来的屏蔽字。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">abort</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>调用此函数将给进程发送一个<i>SIGABRT</i>信号。让进程捕捉SIGABRT意图是：在进程终止之前由其执行所需的清理操作。如果进程不在信号处理程序中终止自己，POSIX对此的要求是当信号处理程序返回时，abort终止该进程。POSIX对终止进程提出的要求是，所有打开的标准流应当与对每个流调用fclose相同。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">sleep</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> seconds)</span></span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//返回值：0或未休眠完的秒数。</span></span><br></pre></td></tr></table></figure>\n<p>函数使进程被挂起直到满足下列两个条件之一：</p>\n<ul>\n<li>过了seconds指定的时间。</li>\n<li>调用进程捕捉到了一个信号并从信号处理程序返回。</li>\n</ul>\n<h3 id=\"有关信号的一些小内容\"><a href=\"#有关信号的一些小内容\" class=\"headerlink\" title=\"有关信号的一些小内容\"></a>有关信号的一些小内容</h3><h4 id=\"可重入函数\"><a href=\"#可重入函数\" class=\"headerlink\" title=\"可重入函数\"></a>可重入函数</h4><p>​    我对信号处理函数的理解是像线程一样，它和主线程是共享全局环境的。因此在信号处理函数中调用可重入函数就显得很重要。函数的不可重入性往往是因为如下原因a)使用静态数据结构；b)调用malloc或free；c)它们是标准I/O函数，标准I/O库很多都使用全局数据结构。</p>\n<p>​    信号处理函数虽然像线程，但是线程保存着<i>errno</i>的副本，互不干扰。但信号处理函数不一样，因此，我们在调用一些系统函数时，需要先保存<i>errno</i>值，在调用完后恢复。</p>\n<h4 id=\"SIGCLD语义\"><a href=\"#SIGCLD语义\" class=\"headerlink\" title=\"SIGCLD语义\"></a>SIGCLD语义</h4><p>​    SIGCLD和SIGCHLD不一样，前者时System V的信号名，与POSIX采用的SIGCHLD不同。System V的该信号有如下特点。</p>\n<ol>\n<li>如果进程明确将信号配置为SIG_IGN，则调用进程的子进程不产生将死进程。</li>\n<li>如果SIGCLD被设置为捕捉，则内核会立即检查是否有子进程准备好。如果是，调用SIGCLD。</li>\n</ol>\n<h4 id=\"可靠信号语义\"><a href=\"#可靠信号语义\" class=\"headerlink\" title=\"可靠信号语义\"></a>可靠信号语义</h4><p>​    当一个信号产生时，内核通常在进程表中以某种形式设置一个标志。在信号产生和递送之间的时间间隔里，信号是未决的。内核在将信号递给进程时，才决定处理方式，在此之前可以任意修改对此信号的处理动作。在进程解除对某个信号的阻塞前，这种信号发生多次，Posix允许递送信号一次或多次。除非支持Posix实时扩展，否则大多数UNIX不对信号排队，只递送信号一次。</p>\n"},{"title":"中缀转后缀算法","date":"2019-04-14T16:00:00.000Z","_content":"\n### 带优先级的中缀转二叉树\n\n在我们聊具体的算法前，我们先来看一个问题。给定中缀表达式以及各种操作数的优先级，我们如何将这个中缀表达式转换成对应的二叉树。比方说2 + 3 * 6 ，如何在这个中缀表达式的基础上构建二叉树。对于这个问题，我琢磨了很久，总结了三个简单的性质。\n\n1. 对于中缀表达式的相邻节点L和R，如果L的优先级高于R，那么L一定是R的左孩子节点。\n2. 对于中缀表达式的相邻节点L和R，如果L的优先级低于R，那么R一定是L的右子树节点。并且一旦L后续有个节点L‘的优先级小于L，那么L’后续节点不可能再是L的右子树节点了。\n3. 对于一系列节点，<i>N1，N2 …… Nx</i>如果<i>Nx</i>是第一个优先级小于<i>N1</i>的的节点，那么<i>N2--Nx-1</i>都是<i>N1</i>的右子树节点。\n\n在说完这几条定理以后，让我们来看看构建二叉树的具体算法。另外，我们给出一个定义，对于一个节点，在我们未能决议出它的右子树前，我们称这棵树是<b>不稳定的</b>。根据定理3，一旦我们为<i>N1</i>在找到了一个优先级小于它的节点<i>Nx</i>，那么<i>N1</i>右子树存在哪些节点便能确定了，需要的只是在遍历中缀序列时，对这些节点进行结构化的管理。接下来我们来看具体的算法。\n\n1. 初始化：维护一个我们称作右子树库的栈，初始为一节点HＮ，优先级MIN＋１，为序列添加一节点TＮ\n2. 遍历中缀序列：栈的顶部子树的根节点我们记作R(root)，当前遍历到的节点记作C(current)。\n   - 如果R的优先级小于C，根据定理2，我们知道C是R的的右子树节点，因此将C推入右子树库中。\n   - 如果R的优先级大于C，我们维护一个子树，初始为空，用以表示R右子树，记作RT(Right Tree)。进行如下循环，只要栈不为空并且当前R的优先级大于C，我们就将R从栈中弹出，将RT置为R的右子树，并将R任命为新的RT。在循环结束后，将RT置为C的左节点，并将C推入栈中。\n3. 终止：如果序列遍历结束，ＨＮ的右子树即为我们构造成功的二叉树。\n\n\n\n### 调度场算法\n\n说完了带优先级中缀序列转二叉树，让我们来看看中缀序列转后缀序列。其实既然我们能够还原成二叉树，那么后缀序列也可以很容易得到，因此接下来我们要介绍的调度场算法，原理上其实和之前介绍的算法是有点相似的。\n\n> **规则：**从左到右遍历中缀表达式的每个数字和符号，若是数字就输出，即成为后缀表达式的一部分；若是符号，则判断其与栈顶符号的优先级，是右括号或优先级低于栈顶符号，则栈顶元素依次出栈并输出，并将当前符号进栈，一直到最终输出后缀表达式为止。\n\n可以看到，这个过程与先前讲到的算法过程是很像的。碰到数字就输出，因为数字的优先级最高，意味着它不可能有右子树，所有碰到它我们就输出。碰到符号我们判断与栈顶符号优先级的比较，若是优先级更高，意味着该符号是栈顶符号右子树的一部分，因此入栈；而如果优先级更低，意味着该栈中许多符号的右子树已经确定了。因此我们让所有已经确定的符号出栈输出。\n\n对于括号的处理有点特殊，因为它无法很好的适配我们的二叉树。但是我们可以这样理解，括号意味着括号里面的内容整体就像一个数字一样，因此看到括号就意味着我们需要在一个新的环境里把这个括号里的后缀序列先产生出来，至于这个新的环境也不见得一定要用一个新的栈，只要这个新的环境不影响之前栈的内容即可。因此我们可以让括号的优先级无穷小，并且在看到括号即入栈，只有反括号能够将此括号弹出。这样可以保证这个新环境不会影响之前的环境，因为有这个无限小的括号做隔离。\n\n接下来我们来看看示例\n\n20*[(2.44-1.8)/0.4+0.15] -> a*((b-c)/d+e)\n\n```c++\n//1. 在结尾加一结束符： a*((b-c)/d+e)#\n//2. 处理过程：\n输入    输出            更新后的栈内容(自底到顶)\na       a\n*       a               *\n(       a               *(\n(       a               *((\nb       ab              *((\nlvl(-)=1, lvl(()=0\n-       ab              *((-\nc       abc             *((-\n)       abc-            *(\nlvl(/)=2, lvl(()=0\n/       abc-            *(/\nd       abc-d           *(/\nlvl(+)=1, lvl(/)=2\n+       abc-d/          *(+\ne       abc-d/e         *(+\n)       abc-d/e+        *\n#       abc-d/e+*\n```\n\n\n\n\n\n","source":"_posts/算法/2019-04-19-中缀转后缀算法.md","raw":"---\ntitle: 中缀转后缀算法\ncategories: 算法\ntags: [算法,编译原理]\ndate: 2019-04-15 \n---\n\n### 带优先级的中缀转二叉树\n\n在我们聊具体的算法前，我们先来看一个问题。给定中缀表达式以及各种操作数的优先级，我们如何将这个中缀表达式转换成对应的二叉树。比方说2 + 3 * 6 ，如何在这个中缀表达式的基础上构建二叉树。对于这个问题，我琢磨了很久，总结了三个简单的性质。\n\n1. 对于中缀表达式的相邻节点L和R，如果L的优先级高于R，那么L一定是R的左孩子节点。\n2. 对于中缀表达式的相邻节点L和R，如果L的优先级低于R，那么R一定是L的右子树节点。并且一旦L后续有个节点L‘的优先级小于L，那么L’后续节点不可能再是L的右子树节点了。\n3. 对于一系列节点，<i>N1，N2 …… Nx</i>如果<i>Nx</i>是第一个优先级小于<i>N1</i>的的节点，那么<i>N2--Nx-1</i>都是<i>N1</i>的右子树节点。\n\n在说完这几条定理以后，让我们来看看构建二叉树的具体算法。另外，我们给出一个定义，对于一个节点，在我们未能决议出它的右子树前，我们称这棵树是<b>不稳定的</b>。根据定理3，一旦我们为<i>N1</i>在找到了一个优先级小于它的节点<i>Nx</i>，那么<i>N1</i>右子树存在哪些节点便能确定了，需要的只是在遍历中缀序列时，对这些节点进行结构化的管理。接下来我们来看具体的算法。\n\n1. 初始化：维护一个我们称作右子树库的栈，初始为一节点HＮ，优先级MIN＋１，为序列添加一节点TＮ\n2. 遍历中缀序列：栈的顶部子树的根节点我们记作R(root)，当前遍历到的节点记作C(current)。\n   - 如果R的优先级小于C，根据定理2，我们知道C是R的的右子树节点，因此将C推入右子树库中。\n   - 如果R的优先级大于C，我们维护一个子树，初始为空，用以表示R右子树，记作RT(Right Tree)。进行如下循环，只要栈不为空并且当前R的优先级大于C，我们就将R从栈中弹出，将RT置为R的右子树，并将R任命为新的RT。在循环结束后，将RT置为C的左节点，并将C推入栈中。\n3. 终止：如果序列遍历结束，ＨＮ的右子树即为我们构造成功的二叉树。\n\n\n\n### 调度场算法\n\n说完了带优先级中缀序列转二叉树，让我们来看看中缀序列转后缀序列。其实既然我们能够还原成二叉树，那么后缀序列也可以很容易得到，因此接下来我们要介绍的调度场算法，原理上其实和之前介绍的算法是有点相似的。\n\n> **规则：**从左到右遍历中缀表达式的每个数字和符号，若是数字就输出，即成为后缀表达式的一部分；若是符号，则判断其与栈顶符号的优先级，是右括号或优先级低于栈顶符号，则栈顶元素依次出栈并输出，并将当前符号进栈，一直到最终输出后缀表达式为止。\n\n可以看到，这个过程与先前讲到的算法过程是很像的。碰到数字就输出，因为数字的优先级最高，意味着它不可能有右子树，所有碰到它我们就输出。碰到符号我们判断与栈顶符号优先级的比较，若是优先级更高，意味着该符号是栈顶符号右子树的一部分，因此入栈；而如果优先级更低，意味着该栈中许多符号的右子树已经确定了。因此我们让所有已经确定的符号出栈输出。\n\n对于括号的处理有点特殊，因为它无法很好的适配我们的二叉树。但是我们可以这样理解，括号意味着括号里面的内容整体就像一个数字一样，因此看到括号就意味着我们需要在一个新的环境里把这个括号里的后缀序列先产生出来，至于这个新的环境也不见得一定要用一个新的栈，只要这个新的环境不影响之前栈的内容即可。因此我们可以让括号的优先级无穷小，并且在看到括号即入栈，只有反括号能够将此括号弹出。这样可以保证这个新环境不会影响之前的环境，因为有这个无限小的括号做隔离。\n\n接下来我们来看看示例\n\n20*[(2.44-1.8)/0.4+0.15] -> a*((b-c)/d+e)\n\n```c++\n//1. 在结尾加一结束符： a*((b-c)/d+e)#\n//2. 处理过程：\n输入    输出            更新后的栈内容(自底到顶)\na       a\n*       a               *\n(       a               *(\n(       a               *((\nb       ab              *((\nlvl(-)=1, lvl(()=0\n-       ab              *((-\nc       abc             *((-\n)       abc-            *(\nlvl(/)=2, lvl(()=0\n/       abc-            *(/\nd       abc-d           *(/\nlvl(+)=1, lvl(/)=2\n+       abc-d/          *(+\ne       abc-d/e         *(+\n)       abc-d/e+        *\n#       abc-d/e+*\n```\n\n\n\n\n\n","slug":"算法/2019-04-19-中缀转后缀算法","published":1,"updated":"2019-04-19T02:09:32.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdlcrxg0003eguh67w6u6tl","content":"<h3 id=\"带优先级的中缀转二叉树\"><a href=\"#带优先级的中缀转二叉树\" class=\"headerlink\" title=\"带优先级的中缀转二叉树\"></a>带优先级的中缀转二叉树</h3><p>在我们聊具体的算法前，我们先来看一个问题。给定中缀表达式以及各种操作数的优先级，我们如何将这个中缀表达式转换成对应的二叉树。比方说2 + 3 * 6 ，如何在这个中缀表达式的基础上构建二叉树。对于这个问题，我琢磨了很久，总结了三个简单的性质。</p>\n<ol>\n<li>对于中缀表达式的相邻节点L和R，如果L的优先级高于R，那么L一定是R的左孩子节点。</li>\n<li>对于中缀表达式的相邻节点L和R，如果L的优先级低于R，那么R一定是L的右子树节点。并且一旦L后续有个节点L‘的优先级小于L，那么L’后续节点不可能再是L的右子树节点了。</li>\n<li>对于一系列节点，<i>N1，N2 …… Nx</i>如果<i>Nx</i>是第一个优先级小于<i>N1</i>的的节点，那么<i>N2–Nx-1</i>都是<i>N1</i>的右子树节点。</li>\n</ol>\n<p>在说完这几条定理以后，让我们来看看构建二叉树的具体算法。另外，我们给出一个定义，对于一个节点，在我们未能决议出它的右子树前，我们称这棵树是<b>不稳定的</b>。根据定理3，一旦我们为<i>N1</i>在找到了一个优先级小于它的节点<i>Nx</i>，那么<i>N1</i>右子树存在哪些节点便能确定了，需要的只是在遍历中缀序列时，对这些节点进行结构化的管理。接下来我们来看具体的算法。</p>\n<ol>\n<li>初始化：维护一个我们称作右子树库的栈，初始为一节点HＮ，优先级MIN＋１，为序列添加一节点TＮ</li>\n<li>遍历中缀序列：栈的顶部子树的根节点我们记作R(root)，当前遍历到的节点记作C(current)。<ul>\n<li>如果R的优先级小于C，根据定理2，我们知道C是R的的右子树节点，因此将C推入右子树库中。</li>\n<li>如果R的优先级大于C，我们维护一个子树，初始为空，用以表示R右子树，记作RT(Right Tree)。进行如下循环，只要栈不为空并且当前R的优先级大于C，我们就将R从栈中弹出，将RT置为R的右子树，并将R任命为新的RT。在循环结束后，将RT置为C的左节点，并将C推入栈中。</li>\n</ul>\n</li>\n<li>终止：如果序列遍历结束，ＨＮ的右子树即为我们构造成功的二叉树。</li>\n</ol>\n<h3 id=\"调度场算法\"><a href=\"#调度场算法\" class=\"headerlink\" title=\"调度场算法\"></a>调度场算法</h3><p>说完了带优先级中缀序列转二叉树，让我们来看看中缀序列转后缀序列。其实既然我们能够还原成二叉树，那么后缀序列也可以很容易得到，因此接下来我们要介绍的调度场算法，原理上其实和之前介绍的算法是有点相似的。</p>\n<blockquote>\n<p><strong>规则：</strong>从左到右遍历中缀表达式的每个数字和符号，若是数字就输出，即成为后缀表达式的一部分；若是符号，则判断其与栈顶符号的优先级，是右括号或优先级低于栈顶符号，则栈顶元素依次出栈并输出，并将当前符号进栈，一直到最终输出后缀表达式为止。</p>\n</blockquote>\n<p>可以看到，这个过程与先前讲到的算法过程是很像的。碰到数字就输出，因为数字的优先级最高，意味着它不可能有右子树，所有碰到它我们就输出。碰到符号我们判断与栈顶符号优先级的比较，若是优先级更高，意味着该符号是栈顶符号右子树的一部分，因此入栈；而如果优先级更低，意味着该栈中许多符号的右子树已经确定了。因此我们让所有已经确定的符号出栈输出。</p>\n<p>对于括号的处理有点特殊，因为它无法很好的适配我们的二叉树。但是我们可以这样理解，括号意味着括号里面的内容整体就像一个数字一样，因此看到括号就意味着我们需要在一个新的环境里把这个括号里的后缀序列先产生出来，至于这个新的环境也不见得一定要用一个新的栈，只要这个新的环境不影响之前栈的内容即可。因此我们可以让括号的优先级无穷小，并且在看到括号即入栈，只有反括号能够将此括号弹出。这样可以保证这个新环境不会影响之前的环境，因为有这个无限小的括号做隔离。</p>\n<p>接下来我们来看看示例</p>\n<p>20<em>[(2.44-1.8)/0.4+0.15] -&gt; a</em>((b-c)/d+e)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 在结尾加一结束符： a*((b-c)/d+e)#</span></span><br><span class=\"line\"><span class=\"comment\">//2. 处理过程：</span></span><br><span class=\"line\">输入    输出            更新后的栈内容(自底到顶)</span><br><span class=\"line\">a       a</span><br><span class=\"line\">*       a               *</span><br><span class=\"line\">(       a               *(</span><br><span class=\"line\">(       a               *((</span><br><span class=\"line\">b       ab              *((</span><br><span class=\"line\">lvl(-)=<span class=\"number\">1</span>, lvl(()=<span class=\"number\">0</span></span><br><span class=\"line\">-       ab              *((-</span><br><span class=\"line\">c       abc             *((-</span><br><span class=\"line\">)       abc-            *(</span><br><span class=\"line\">lvl(/)=<span class=\"number\">2</span>, lvl(()=<span class=\"number\">0</span></span><br><span class=\"line\">/       abc-            *(/</span><br><span class=\"line\">d       abc-d           *(/</span><br><span class=\"line\">lvl(+)=<span class=\"number\">1</span>, lvl(/)=<span class=\"number\">2</span></span><br><span class=\"line\">+       abc-d/          *(+</span><br><span class=\"line\">e       abc-d/e         *(+</span><br><span class=\"line\">)       abc-d/e+        *</span><br><span class=\"line\">#       abc-d/e+*</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"带优先级的中缀转二叉树\"><a href=\"#带优先级的中缀转二叉树\" class=\"headerlink\" title=\"带优先级的中缀转二叉树\"></a>带优先级的中缀转二叉树</h3><p>在我们聊具体的算法前，我们先来看一个问题。给定中缀表达式以及各种操作数的优先级，我们如何将这个中缀表达式转换成对应的二叉树。比方说2 + 3 * 6 ，如何在这个中缀表达式的基础上构建二叉树。对于这个问题，我琢磨了很久，总结了三个简单的性质。</p>\n<ol>\n<li>对于中缀表达式的相邻节点L和R，如果L的优先级高于R，那么L一定是R的左孩子节点。</li>\n<li>对于中缀表达式的相邻节点L和R，如果L的优先级低于R，那么R一定是L的右子树节点。并且一旦L后续有个节点L‘的优先级小于L，那么L’后续节点不可能再是L的右子树节点了。</li>\n<li>对于一系列节点，<i>N1，N2 …… Nx</i>如果<i>Nx</i>是第一个优先级小于<i>N1</i>的的节点，那么<i>N2–Nx-1</i>都是<i>N1</i>的右子树节点。</li>\n</ol>\n<p>在说完这几条定理以后，让我们来看看构建二叉树的具体算法。另外，我们给出一个定义，对于一个节点，在我们未能决议出它的右子树前，我们称这棵树是<b>不稳定的</b>。根据定理3，一旦我们为<i>N1</i>在找到了一个优先级小于它的节点<i>Nx</i>，那么<i>N1</i>右子树存在哪些节点便能确定了，需要的只是在遍历中缀序列时，对这些节点进行结构化的管理。接下来我们来看具体的算法。</p>\n<ol>\n<li>初始化：维护一个我们称作右子树库的栈，初始为一节点HＮ，优先级MIN＋１，为序列添加一节点TＮ</li>\n<li>遍历中缀序列：栈的顶部子树的根节点我们记作R(root)，当前遍历到的节点记作C(current)。<ul>\n<li>如果R的优先级小于C，根据定理2，我们知道C是R的的右子树节点，因此将C推入右子树库中。</li>\n<li>如果R的优先级大于C，我们维护一个子树，初始为空，用以表示R右子树，记作RT(Right Tree)。进行如下循环，只要栈不为空并且当前R的优先级大于C，我们就将R从栈中弹出，将RT置为R的右子树，并将R任命为新的RT。在循环结束后，将RT置为C的左节点，并将C推入栈中。</li>\n</ul>\n</li>\n<li>终止：如果序列遍历结束，ＨＮ的右子树即为我们构造成功的二叉树。</li>\n</ol>\n<h3 id=\"调度场算法\"><a href=\"#调度场算法\" class=\"headerlink\" title=\"调度场算法\"></a>调度场算法</h3><p>说完了带优先级中缀序列转二叉树，让我们来看看中缀序列转后缀序列。其实既然我们能够还原成二叉树，那么后缀序列也可以很容易得到，因此接下来我们要介绍的调度场算法，原理上其实和之前介绍的算法是有点相似的。</p>\n<blockquote>\n<p><strong>规则：</strong>从左到右遍历中缀表达式的每个数字和符号，若是数字就输出，即成为后缀表达式的一部分；若是符号，则判断其与栈顶符号的优先级，是右括号或优先级低于栈顶符号，则栈顶元素依次出栈并输出，并将当前符号进栈，一直到最终输出后缀表达式为止。</p>\n</blockquote>\n<p>可以看到，这个过程与先前讲到的算法过程是很像的。碰到数字就输出，因为数字的优先级最高，意味着它不可能有右子树，所有碰到它我们就输出。碰到符号我们判断与栈顶符号优先级的比较，若是优先级更高，意味着该符号是栈顶符号右子树的一部分，因此入栈；而如果优先级更低，意味着该栈中许多符号的右子树已经确定了。因此我们让所有已经确定的符号出栈输出。</p>\n<p>对于括号的处理有点特殊，因为它无法很好的适配我们的二叉树。但是我们可以这样理解，括号意味着括号里面的内容整体就像一个数字一样，因此看到括号就意味着我们需要在一个新的环境里把这个括号里的后缀序列先产生出来，至于这个新的环境也不见得一定要用一个新的栈，只要这个新的环境不影响之前栈的内容即可。因此我们可以让括号的优先级无穷小，并且在看到括号即入栈，只有反括号能够将此括号弹出。这样可以保证这个新环境不会影响之前的环境，因为有这个无限小的括号做隔离。</p>\n<p>接下来我们来看看示例</p>\n<p>20<em>[(2.44-1.8)/0.4+0.15] -&gt; a</em>((b-c)/d+e)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 在结尾加一结束符： a*((b-c)/d+e)#</span></span><br><span class=\"line\"><span class=\"comment\">//2. 处理过程：</span></span><br><span class=\"line\">输入    输出            更新后的栈内容(自底到顶)</span><br><span class=\"line\">a       a</span><br><span class=\"line\">*       a               *</span><br><span class=\"line\">(       a               *(</span><br><span class=\"line\">(       a               *((</span><br><span class=\"line\">b       ab              *((</span><br><span class=\"line\">lvl(-)=<span class=\"number\">1</span>, lvl(()=<span class=\"number\">0</span></span><br><span class=\"line\">-       ab              *((-</span><br><span class=\"line\">c       abc             *((-</span><br><span class=\"line\">)       abc-            *(</span><br><span class=\"line\">lvl(/)=<span class=\"number\">2</span>, lvl(()=<span class=\"number\">0</span></span><br><span class=\"line\">/       abc-            *(/</span><br><span class=\"line\">d       abc-d           *(/</span><br><span class=\"line\">lvl(+)=<span class=\"number\">1</span>, lvl(/)=<span class=\"number\">2</span></span><br><span class=\"line\">+       abc-d/          *(+</span><br><span class=\"line\">e       abc-d/e         *(+</span><br><span class=\"line\">)       abc-d/e+        *</span><br><span class=\"line\">#       abc-d/e+*</span><br></pre></td></tr></table></figure>\n"},{"title":"C++对象模型总结","date":"2019-04-09T16:00:00.000Z","_content":"\n# C++对象模型总结\n\n#### 单一继承（含虚函数）\n\n这种情况下的虚表结构很简单，在子类中保存一张虚表，虚表里有着父类的RTTI信息，并且排列着自己独有的虚函数地址以及被override的虚函数地址。\n\n值得注意的是，子类生成的这张表与父类的表有着某种程度上的对应。比如说在父类里的某个虚函数，在它表里对应的slot为1，那么在子类里，即使覆盖了这个虚函数，对应的slot同样得是1。因为在编译期不能决议的仅仅是指针（或引用）具体指向的内容，但对于调用的虚函数在表里的偏移，这在编译期是已知的。（总不能连这都不知道，等到运行时去遍历虚表吧）\n\n\n\n#### 多重继承\n\n多重继承相比于单一继承来说会复杂一点，复杂的点主要在于指针的调整上。我们可以想象，在单一继承里，指向父类的指针与指向子类的指针是具有相同值的；但在多重继承里，这种性质不再这么自然。\n\n我们先来看看多重继承下的对象内存布局。这种情况下的内存布局不算复杂，按照父类的声明顺序，将父类成员堆叠起来，除此之外，为每个父类的区域，插入一个对应的虚表指针。至于为什么要为每个父类准备一个虚表指针，我们可以想象不这样做，让它们共享一个表，我们在前面提到过，在编译期是已知调用函数的slot号的，现在继承于多个父类，在共享一张表的情况下，肯定会有两个父类的不同函数对应相同slot，这就给我们造成了麻烦。\n\n说完了对象的内存布局，我们再来看看虚函数表。可以知道的是，每个父类区域的虚表，一定是通过这个父类指针可以访问的虚函数。除此之外，对于位于最左的父类的虚表做了补充，补充的内容是最左父类访问不到，但是子类可以访问的虚函数。\n\n聊完了虚函数表的内容，我们再来思考其他的问题。假设A，B是C的父类。\n\n```c++\nclass A{\npublic:\n    virtual void f(){}\n};\nclass B{\npublic:\n    virtual void g(){}\n};\nclass C:public A,public B{\npublic:\n    void f() override{}\n    void g() override{}\n};\n\nint main(){\n    C* c = new C;\n    B* b = c;\n}\n```\n\n在我们的主函数的语句里，我们可以想象，C中的B部分的起始地址与C的起始地址是不同的。实际上，在编译这条语句时，编译器是做了处理的。 \n\n```c++\nB* b = c + sizeof(A);\n```\n\n当我们实际输出b和c的地址时就能看到这种区别（用==判断不行，编译器做了处理）\n\n当然，这是在编译期做的处理，也很好理解。让我们来看看其他几种类似的但是不能在编译期解决的问题。我们叫做调整this指针的负担。\n\n1. 基类指针调用子类函数\n\n当第二个或后继的基类调用子类的虚函数时，需要对this指针进行调整。这应该很好理解，假设不进行调整，在该函数里对子类成员的任意访问都会出现问题。但是这种调整在编译期无法做到（在编译期对你会调用哪个函数都不确定，又谈什么调用前调整指针呢），因此我们需要一种执行期调整的技术。在我了解的范围里，有两种技术。\n\n- 扩展虚函数表。为每一个虚函数表的表项增加调整的偏移量内容。也就是说，现在每一项都包含一个函数指针和一个偏移量。在调用时便进行调整。这种办法虽然简洁，但是并不是所有的函数都需要调整呀。这样显式的为项都增加内容显得有点浪费。\n- <i>thunk</i>技术。对于<i>thunk</i>我并不是太了解，但并不影响我们思考这么模型。我将<i>thunk</i>简单的理解成一个扩充了调整this指针的函数。只不过这个函数是一段assembly代码。现在调用时需要调整this指针的虚函数指针现在指向的便是<i>thunk</i>。\n\n2. 子类指针调用第二个或后继父类函数\n\n这个与第一种情况类似。\n\n3. 语言扩充的性质。\n\n允许一个virtual function的返回值类型有所变化，可能是base type，也可能是publicly derived type。\n\n```c++\nBase2 *pb1 = new Derived;\nBase2 *pb2 = pb1->clone();\n```\n\n这有点类似于我们先前提到的子类指针赋值给父类指针。不同的是，之前可以直接在编译器加以修改，而这里因为<i>pb1</i>调用的函数是运行期决定的，返回值类型也是运行期决定的，所以需要进行执行期的修改。具体技术我们这里不进行讨论。\n\n\n\n#### 虚拟继承\n\n就虚拟继承而言，它的内存布局是很复杂的。复杂的点在于，父类不再是子类连续内存的一部分，而是为多个子类所共享的。也就是说，<b>对于虚基类的子类而言，虚基类的内存相对于自己的偏移是不固定的</b>。可能现在你离我还特别近，可能在继承层次更深一点后，你离我又更远了。之前我有一个疑问就是，既然一个有虚基类的子类的布局在编译期是已知的，那直接在编译期为所有对虚基类成员的访问加上偏移不就行了吗？问题的点在于对虚基类成员的访问的访问者是谁在编译期无法确认。比方说在虚函数里访问虚基类成员，虚函数的决议本身就是运行期，况且知道是哪个虚函数也无法确定当前的偏移，所以想在编译期将一切确定下来几乎是不可能的。\n\n这个时候我们考虑到为虚拟继承加点动态的信息。比如说B和C虚拟继承自A，D多重继承自B和C。我们可以在D的B区域加上个指针，用以指明虚基类相对于B的偏移。\n\n这种做法固然能解决问题，但这极大增加了对象的存储负担。除此之外，我们可以直接将信息放在虚函数表里，用以指明虚基类的地址。这样就可以在运行期指明虚基类地址，并且用少量的时间换了大量的空间。\n\n关于虚拟继承的虚表，主要是对于this的调整，关于这点建议阅读 ABI。以及下面的博客。\n\n<https://zhuanlan.zhihu.com/p/41309205>","source":"_posts/C++/2019-04-10-C++虚函数.md","raw":"---\ntitle: C++对象模型总结\ncategories: C++\ntags: [C++,对象模型]\ndate: 2019-04-10\n---\n\n# C++对象模型总结\n\n#### 单一继承（含虚函数）\n\n这种情况下的虚表结构很简单，在子类中保存一张虚表，虚表里有着父类的RTTI信息，并且排列着自己独有的虚函数地址以及被override的虚函数地址。\n\n值得注意的是，子类生成的这张表与父类的表有着某种程度上的对应。比如说在父类里的某个虚函数，在它表里对应的slot为1，那么在子类里，即使覆盖了这个虚函数，对应的slot同样得是1。因为在编译期不能决议的仅仅是指针（或引用）具体指向的内容，但对于调用的虚函数在表里的偏移，这在编译期是已知的。（总不能连这都不知道，等到运行时去遍历虚表吧）\n\n\n\n#### 多重继承\n\n多重继承相比于单一继承来说会复杂一点，复杂的点主要在于指针的调整上。我们可以想象，在单一继承里，指向父类的指针与指向子类的指针是具有相同值的；但在多重继承里，这种性质不再这么自然。\n\n我们先来看看多重继承下的对象内存布局。这种情况下的内存布局不算复杂，按照父类的声明顺序，将父类成员堆叠起来，除此之外，为每个父类的区域，插入一个对应的虚表指针。至于为什么要为每个父类准备一个虚表指针，我们可以想象不这样做，让它们共享一个表，我们在前面提到过，在编译期是已知调用函数的slot号的，现在继承于多个父类，在共享一张表的情况下，肯定会有两个父类的不同函数对应相同slot，这就给我们造成了麻烦。\n\n说完了对象的内存布局，我们再来看看虚函数表。可以知道的是，每个父类区域的虚表，一定是通过这个父类指针可以访问的虚函数。除此之外，对于位于最左的父类的虚表做了补充，补充的内容是最左父类访问不到，但是子类可以访问的虚函数。\n\n聊完了虚函数表的内容，我们再来思考其他的问题。假设A，B是C的父类。\n\n```c++\nclass A{\npublic:\n    virtual void f(){}\n};\nclass B{\npublic:\n    virtual void g(){}\n};\nclass C:public A,public B{\npublic:\n    void f() override{}\n    void g() override{}\n};\n\nint main(){\n    C* c = new C;\n    B* b = c;\n}\n```\n\n在我们的主函数的语句里，我们可以想象，C中的B部分的起始地址与C的起始地址是不同的。实际上，在编译这条语句时，编译器是做了处理的。 \n\n```c++\nB* b = c + sizeof(A);\n```\n\n当我们实际输出b和c的地址时就能看到这种区别（用==判断不行，编译器做了处理）\n\n当然，这是在编译期做的处理，也很好理解。让我们来看看其他几种类似的但是不能在编译期解决的问题。我们叫做调整this指针的负担。\n\n1. 基类指针调用子类函数\n\n当第二个或后继的基类调用子类的虚函数时，需要对this指针进行调整。这应该很好理解，假设不进行调整，在该函数里对子类成员的任意访问都会出现问题。但是这种调整在编译期无法做到（在编译期对你会调用哪个函数都不确定，又谈什么调用前调整指针呢），因此我们需要一种执行期调整的技术。在我了解的范围里，有两种技术。\n\n- 扩展虚函数表。为每一个虚函数表的表项增加调整的偏移量内容。也就是说，现在每一项都包含一个函数指针和一个偏移量。在调用时便进行调整。这种办法虽然简洁，但是并不是所有的函数都需要调整呀。这样显式的为项都增加内容显得有点浪费。\n- <i>thunk</i>技术。对于<i>thunk</i>我并不是太了解，但并不影响我们思考这么模型。我将<i>thunk</i>简单的理解成一个扩充了调整this指针的函数。只不过这个函数是一段assembly代码。现在调用时需要调整this指针的虚函数指针现在指向的便是<i>thunk</i>。\n\n2. 子类指针调用第二个或后继父类函数\n\n这个与第一种情况类似。\n\n3. 语言扩充的性质。\n\n允许一个virtual function的返回值类型有所变化，可能是base type，也可能是publicly derived type。\n\n```c++\nBase2 *pb1 = new Derived;\nBase2 *pb2 = pb1->clone();\n```\n\n这有点类似于我们先前提到的子类指针赋值给父类指针。不同的是，之前可以直接在编译器加以修改，而这里因为<i>pb1</i>调用的函数是运行期决定的，返回值类型也是运行期决定的，所以需要进行执行期的修改。具体技术我们这里不进行讨论。\n\n\n\n#### 虚拟继承\n\n就虚拟继承而言，它的内存布局是很复杂的。复杂的点在于，父类不再是子类连续内存的一部分，而是为多个子类所共享的。也就是说，<b>对于虚基类的子类而言，虚基类的内存相对于自己的偏移是不固定的</b>。可能现在你离我还特别近，可能在继承层次更深一点后，你离我又更远了。之前我有一个疑问就是，既然一个有虚基类的子类的布局在编译期是已知的，那直接在编译期为所有对虚基类成员的访问加上偏移不就行了吗？问题的点在于对虚基类成员的访问的访问者是谁在编译期无法确认。比方说在虚函数里访问虚基类成员，虚函数的决议本身就是运行期，况且知道是哪个虚函数也无法确定当前的偏移，所以想在编译期将一切确定下来几乎是不可能的。\n\n这个时候我们考虑到为虚拟继承加点动态的信息。比如说B和C虚拟继承自A，D多重继承自B和C。我们可以在D的B区域加上个指针，用以指明虚基类相对于B的偏移。\n\n这种做法固然能解决问题，但这极大增加了对象的存储负担。除此之外，我们可以直接将信息放在虚函数表里，用以指明虚基类的地址。这样就可以在运行期指明虚基类地址，并且用少量的时间换了大量的空间。\n\n关于虚拟继承的虚表，主要是对于this的调整，关于这点建议阅读 ABI。以及下面的博客。\n\n<https://zhuanlan.zhihu.com/p/41309205>","slug":"C++/2019-04-10-C++虚函数","published":1,"updated":"2019-04-11T10:49:48.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdlcrxi0005eguh6b6t6x6f","content":"<h1 id=\"C-对象模型总结\"><a href=\"#C-对象模型总结\" class=\"headerlink\" title=\"C++对象模型总结\"></a>C++对象模型总结</h1><h4 id=\"单一继承（含虚函数）\"><a href=\"#单一继承（含虚函数）\" class=\"headerlink\" title=\"单一继承（含虚函数）\"></a>单一继承（含虚函数）</h4><p>这种情况下的虚表结构很简单，在子类中保存一张虚表，虚表里有着父类的RTTI信息，并且排列着自己独有的虚函数地址以及被override的虚函数地址。</p>\n<p>值得注意的是，子类生成的这张表与父类的表有着某种程度上的对应。比如说在父类里的某个虚函数，在它表里对应的slot为1，那么在子类里，即使覆盖了这个虚函数，对应的slot同样得是1。因为在编译期不能决议的仅仅是指针（或引用）具体指向的内容，但对于调用的虚函数在表里的偏移，这在编译期是已知的。（总不能连这都不知道，等到运行时去遍历虚表吧）</p>\n<h4 id=\"多重继承\"><a href=\"#多重继承\" class=\"headerlink\" title=\"多重继承\"></a>多重继承</h4><p>多重继承相比于单一继承来说会复杂一点，复杂的点主要在于指针的调整上。我们可以想象，在单一继承里，指向父类的指针与指向子类的指针是具有相同值的；但在多重继承里，这种性质不再这么自然。</p>\n<p>我们先来看看多重继承下的对象内存布局。这种情况下的内存布局不算复杂，按照父类的声明顺序，将父类成员堆叠起来，除此之外，为每个父类的区域，插入一个对应的虚表指针。至于为什么要为每个父类准备一个虚表指针，我们可以想象不这样做，让它们共享一个表，我们在前面提到过，在编译期是已知调用函数的slot号的，现在继承于多个父类，在共享一张表的情况下，肯定会有两个父类的不同函数对应相同slot，这就给我们造成了麻烦。</p>\n<p>说完了对象的内存布局，我们再来看看虚函数表。可以知道的是，每个父类区域的虚表，一定是通过这个父类指针可以访问的虚函数。除此之外，对于位于最左的父类的虚表做了补充，补充的内容是最左父类访问不到，但是子类可以访问的虚函数。</p>\n<p>聊完了虚函数表的内容，我们再来思考其他的问题。假设A，B是C的父类。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">g</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span>:</span><span class=\"keyword\">public</span> A,<span class=\"keyword\">public</span> B&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> override</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">g</span><span class=\"params\">()</span> override</span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    C* c = <span class=\"keyword\">new</span> C;</span><br><span class=\"line\">    B* b = c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在我们的主函数的语句里，我们可以想象，C中的B部分的起始地址与C的起始地址是不同的。实际上，在编译这条语句时，编译器是做了处理的。 </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B* b = c + <span class=\"keyword\">sizeof</span>(A);</span><br></pre></td></tr></table></figure>\n<p>当我们实际输出b和c的地址时就能看到这种区别（用==判断不行，编译器做了处理）</p>\n<p>当然，这是在编译期做的处理，也很好理解。让我们来看看其他几种类似的但是不能在编译期解决的问题。我们叫做调整this指针的负担。</p>\n<ol>\n<li>基类指针调用子类函数</li>\n</ol>\n<p>当第二个或后继的基类调用子类的虚函数时，需要对this指针进行调整。这应该很好理解，假设不进行调整，在该函数里对子类成员的任意访问都会出现问题。但是这种调整在编译期无法做到（在编译期对你会调用哪个函数都不确定，又谈什么调用前调整指针呢），因此我们需要一种执行期调整的技术。在我了解的范围里，有两种技术。</p>\n<ul>\n<li>扩展虚函数表。为每一个虚函数表的表项增加调整的偏移量内容。也就是说，现在每一项都包含一个函数指针和一个偏移量。在调用时便进行调整。这种办法虽然简洁，但是并不是所有的函数都需要调整呀。这样显式的为项都增加内容显得有点浪费。</li>\n<li><i>thunk</i>技术。对于<i>thunk</i>我并不是太了解，但并不影响我们思考这么模型。我将<i>thunk</i>简单的理解成一个扩充了调整this指针的函数。只不过这个函数是一段assembly代码。现在调用时需要调整this指针的虚函数指针现在指向的便是<i>thunk</i>。</li>\n</ul>\n<ol start=\"2\">\n<li>子类指针调用第二个或后继父类函数</li>\n</ol>\n<p>这个与第一种情况类似。</p>\n<ol start=\"3\">\n<li>语言扩充的性质。</li>\n</ol>\n<p>允许一个virtual function的返回值类型有所变化，可能是base type，也可能是publicly derived type。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base2 *pb1 = <span class=\"keyword\">new</span> Derived;</span><br><span class=\"line\">Base2 *pb2 = pb1-&gt;clone();</span><br></pre></td></tr></table></figure>\n<p>这有点类似于我们先前提到的子类指针赋值给父类指针。不同的是，之前可以直接在编译器加以修改，而这里因为<i>pb1</i>调用的函数是运行期决定的，返回值类型也是运行期决定的，所以需要进行执行期的修改。具体技术我们这里不进行讨论。</p>\n<h4 id=\"虚拟继承\"><a href=\"#虚拟继承\" class=\"headerlink\" title=\"虚拟继承\"></a>虚拟继承</h4><p>就虚拟继承而言，它的内存布局是很复杂的。复杂的点在于，父类不再是子类连续内存的一部分，而是为多个子类所共享的。也就是说，<b>对于虚基类的子类而言，虚基类的内存相对于自己的偏移是不固定的</b>。可能现在你离我还特别近，可能在继承层次更深一点后，你离我又更远了。之前我有一个疑问就是，既然一个有虚基类的子类的布局在编译期是已知的，那直接在编译期为所有对虚基类成员的访问加上偏移不就行了吗？问题的点在于对虚基类成员的访问的访问者是谁在编译期无法确认。比方说在虚函数里访问虚基类成员，虚函数的决议本身就是运行期，况且知道是哪个虚函数也无法确定当前的偏移，所以想在编译期将一切确定下来几乎是不可能的。</p>\n<p>这个时候我们考虑到为虚拟继承加点动态的信息。比如说B和C虚拟继承自A，D多重继承自B和C。我们可以在D的B区域加上个指针，用以指明虚基类相对于B的偏移。</p>\n<p>这种做法固然能解决问题，但这极大增加了对象的存储负担。除此之外，我们可以直接将信息放在虚函数表里，用以指明虚基类的地址。这样就可以在运行期指明虚基类地址，并且用少量的时间换了大量的空间。</p>\n<p>关于虚拟继承的虚表，主要是对于this的调整，关于这点建议阅读 ABI。以及下面的博客。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/41309205\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/41309205</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"C-对象模型总结\"><a href=\"#C-对象模型总结\" class=\"headerlink\" title=\"C++对象模型总结\"></a>C++对象模型总结</h1><h4 id=\"单一继承（含虚函数）\"><a href=\"#单一继承（含虚函数）\" class=\"headerlink\" title=\"单一继承（含虚函数）\"></a>单一继承（含虚函数）</h4><p>这种情况下的虚表结构很简单，在子类中保存一张虚表，虚表里有着父类的RTTI信息，并且排列着自己独有的虚函数地址以及被override的虚函数地址。</p>\n<p>值得注意的是，子类生成的这张表与父类的表有着某种程度上的对应。比如说在父类里的某个虚函数，在它表里对应的slot为1，那么在子类里，即使覆盖了这个虚函数，对应的slot同样得是1。因为在编译期不能决议的仅仅是指针（或引用）具体指向的内容，但对于调用的虚函数在表里的偏移，这在编译期是已知的。（总不能连这都不知道，等到运行时去遍历虚表吧）</p>\n<h4 id=\"多重继承\"><a href=\"#多重继承\" class=\"headerlink\" title=\"多重继承\"></a>多重继承</h4><p>多重继承相比于单一继承来说会复杂一点，复杂的点主要在于指针的调整上。我们可以想象，在单一继承里，指向父类的指针与指向子类的指针是具有相同值的；但在多重继承里，这种性质不再这么自然。</p>\n<p>我们先来看看多重继承下的对象内存布局。这种情况下的内存布局不算复杂，按照父类的声明顺序，将父类成员堆叠起来，除此之外，为每个父类的区域，插入一个对应的虚表指针。至于为什么要为每个父类准备一个虚表指针，我们可以想象不这样做，让它们共享一个表，我们在前面提到过，在编译期是已知调用函数的slot号的，现在继承于多个父类，在共享一张表的情况下，肯定会有两个父类的不同函数对应相同slot，这就给我们造成了麻烦。</p>\n<p>说完了对象的内存布局，我们再来看看虚函数表。可以知道的是，每个父类区域的虚表，一定是通过这个父类指针可以访问的虚函数。除此之外，对于位于最左的父类的虚表做了补充，补充的内容是最左父类访问不到，但是子类可以访问的虚函数。</p>\n<p>聊完了虚函数表的内容，我们再来思考其他的问题。假设A，B是C的父类。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">g</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span>:</span><span class=\"keyword\">public</span> A,<span class=\"keyword\">public</span> B&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> override</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">g</span><span class=\"params\">()</span> override</span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    C* c = <span class=\"keyword\">new</span> C;</span><br><span class=\"line\">    B* b = c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在我们的主函数的语句里，我们可以想象，C中的B部分的起始地址与C的起始地址是不同的。实际上，在编译这条语句时，编译器是做了处理的。 </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B* b = c + <span class=\"keyword\">sizeof</span>(A);</span><br></pre></td></tr></table></figure>\n<p>当我们实际输出b和c的地址时就能看到这种区别（用==判断不行，编译器做了处理）</p>\n<p>当然，这是在编译期做的处理，也很好理解。让我们来看看其他几种类似的但是不能在编译期解决的问题。我们叫做调整this指针的负担。</p>\n<ol>\n<li>基类指针调用子类函数</li>\n</ol>\n<p>当第二个或后继的基类调用子类的虚函数时，需要对this指针进行调整。这应该很好理解，假设不进行调整，在该函数里对子类成员的任意访问都会出现问题。但是这种调整在编译期无法做到（在编译期对你会调用哪个函数都不确定，又谈什么调用前调整指针呢），因此我们需要一种执行期调整的技术。在我了解的范围里，有两种技术。</p>\n<ul>\n<li>扩展虚函数表。为每一个虚函数表的表项增加调整的偏移量内容。也就是说，现在每一项都包含一个函数指针和一个偏移量。在调用时便进行调整。这种办法虽然简洁，但是并不是所有的函数都需要调整呀。这样显式的为项都增加内容显得有点浪费。</li>\n<li><i>thunk</i>技术。对于<i>thunk</i>我并不是太了解，但并不影响我们思考这么模型。我将<i>thunk</i>简单的理解成一个扩充了调整this指针的函数。只不过这个函数是一段assembly代码。现在调用时需要调整this指针的虚函数指针现在指向的便是<i>thunk</i>。</li>\n</ul>\n<ol start=\"2\">\n<li>子类指针调用第二个或后继父类函数</li>\n</ol>\n<p>这个与第一种情况类似。</p>\n<ol start=\"3\">\n<li>语言扩充的性质。</li>\n</ol>\n<p>允许一个virtual function的返回值类型有所变化，可能是base type，也可能是publicly derived type。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base2 *pb1 = <span class=\"keyword\">new</span> Derived;</span><br><span class=\"line\">Base2 *pb2 = pb1-&gt;clone();</span><br></pre></td></tr></table></figure>\n<p>这有点类似于我们先前提到的子类指针赋值给父类指针。不同的是，之前可以直接在编译器加以修改，而这里因为<i>pb1</i>调用的函数是运行期决定的，返回值类型也是运行期决定的，所以需要进行执行期的修改。具体技术我们这里不进行讨论。</p>\n<h4 id=\"虚拟继承\"><a href=\"#虚拟继承\" class=\"headerlink\" title=\"虚拟继承\"></a>虚拟继承</h4><p>就虚拟继承而言，它的内存布局是很复杂的。复杂的点在于，父类不再是子类连续内存的一部分，而是为多个子类所共享的。也就是说，<b>对于虚基类的子类而言，虚基类的内存相对于自己的偏移是不固定的</b>。可能现在你离我还特别近，可能在继承层次更深一点后，你离我又更远了。之前我有一个疑问就是，既然一个有虚基类的子类的布局在编译期是已知的，那直接在编译期为所有对虚基类成员的访问加上偏移不就行了吗？问题的点在于对虚基类成员的访问的访问者是谁在编译期无法确认。比方说在虚函数里访问虚基类成员，虚函数的决议本身就是运行期，况且知道是哪个虚函数也无法确定当前的偏移，所以想在编译期将一切确定下来几乎是不可能的。</p>\n<p>这个时候我们考虑到为虚拟继承加点动态的信息。比如说B和C虚拟继承自A，D多重继承自B和C。我们可以在D的B区域加上个指针，用以指明虚基类相对于B的偏移。</p>\n<p>这种做法固然能解决问题，但这极大增加了对象的存储负担。除此之外，我们可以直接将信息放在虚函数表里，用以指明虚基类的地址。这样就可以在运行期指明虚基类地址，并且用少量的时间换了大量的空间。</p>\n<p>关于虚拟继承的虚表，主要是对于this的调整，关于这点建议阅读 ABI。以及下面的博客。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/41309205\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/41309205</a></p>\n"},{"title":"进程终止","date":"2019-04-08T16:00:00.000Z","_content":"\n# 进程退出\n\n### 1. 正常方式\n\n- 从main返回\n- 调用exit\n- 调用\\_exit或\\_Exit\n- 最后一个线程从其启动例程返回\n- 最后一个线程调用<i>pthread_exit</i>\n\n### 2. 异常终止\n\n- 调用abort\n- 接到一个信号\n- 最后一个线程对取消请求作出相应(待补充)\n\n### 3. 正常结束的善后内容\n\n​\t我们先来看看exit和\\_exit与\\_Exit区别，首先exit和_Exit是ISO定义的函数，定义在<stdlib.h>头文件中，而\\_exit则是基于POSIX标准，属于系统调用，定义在<unistd.h>头文件中。这三个函数的参数都带一个整型参数，表示进程的退出状态。如果a) 调用这些函数时不带参数，或b) main执行了一个无返回值的return语句，或c)main没有声明返回类型为整型，则返回状态是未定义的。但是若main的返回类型是整形，并且main执行到最后一条语句时返回，那么进程的终止状态是0。<b>exit(0)表示正常退出，其他情况都表示异常退出。\n\n​\t_exit其实是exit调用过程的一个子集，首先exit退出进程前，会进行一系列的善后工作，包括1) 调用通过<i>atexit</i>或on_exit注册的退出处理函数。\n\n```c\n\t#include<stdlib.h>\n\tint atexit(void (*func)(void));\n\t\t\t//返回值：若成功，返回0；若出错，返回非0\n```\n\n​\t2) 冲刷并关闭所有处于打开状态的标准I/O流。\n\n​\t3) 删除所有通过<i>tempfile</i>创建的临时文件。\n\n​\t在这些事情完成后，调用_exit来做更深层次的清理，包括1) 关闭所有仍处于打开状态的文件描述符。2)将调用进程的子进程托付给<i>init</i>进程。3)向调用进程的父进程发送<i>SIGCHLD</i>信号。\n\n### 4. 异常终止的讨论\n\n​\t说完了正常终止的方式，我们来看看进程的异常终止。\n\n​\t在很多时候，异常终止的原因都是因为信号的默认处理方式。默认的信号处理程序会根据具体信号涵义采取不同处理方式：\n\n- 终止进程运行，并且产生core dump文件。\n- 终止进程运行。\n- 忽略信号，进程继续执行。\n- 暂停进程执行。\n- 如果进程已经暂停，重新调度进程继续运行。\n\n前两种便是我们所说的因为信号而产生的异常终止，但这很多时候并不是程序本身的问题。实际上是存在因为程序本身的问题导致异常终止的情况。\n\n假设在访问内存时发生了非法访问的情况， 就会出发内存保护异常，并跳转到异常处理程序，终止进程运行。异常处理函数在实现上，是通过向挂起的进程发送信号，进而通过信号的默认处理程序来终止进程运行，在这信号发生前内核可能会试着修复，在发现无法挽回后，进程的死活便取决于信号的默认处理函数了。所以这种情况下的实际终止原因还是信号的处理。\n\n关于调用<i>abort</i>异常终止也是通过给进程发送信号的原理，具体的<i>abort</i>源码可以了解下。","source":"_posts/Unix/2019-04-09-进程终止.md","raw":"---\ntitle: 进程终止\ncategories: Unix\ntags: [Unix,进程,信号]\ndate: 2019-04-09\n---\n\n# 进程退出\n\n### 1. 正常方式\n\n- 从main返回\n- 调用exit\n- 调用\\_exit或\\_Exit\n- 最后一个线程从其启动例程返回\n- 最后一个线程调用<i>pthread_exit</i>\n\n### 2. 异常终止\n\n- 调用abort\n- 接到一个信号\n- 最后一个线程对取消请求作出相应(待补充)\n\n### 3. 正常结束的善后内容\n\n​\t我们先来看看exit和\\_exit与\\_Exit区别，首先exit和_Exit是ISO定义的函数，定义在<stdlib.h>头文件中，而\\_exit则是基于POSIX标准，属于系统调用，定义在<unistd.h>头文件中。这三个函数的参数都带一个整型参数，表示进程的退出状态。如果a) 调用这些函数时不带参数，或b) main执行了一个无返回值的return语句，或c)main没有声明返回类型为整型，则返回状态是未定义的。但是若main的返回类型是整形，并且main执行到最后一条语句时返回，那么进程的终止状态是0。<b>exit(0)表示正常退出，其他情况都表示异常退出。\n\n​\t_exit其实是exit调用过程的一个子集，首先exit退出进程前，会进行一系列的善后工作，包括1) 调用通过<i>atexit</i>或on_exit注册的退出处理函数。\n\n```c\n\t#include<stdlib.h>\n\tint atexit(void (*func)(void));\n\t\t\t//返回值：若成功，返回0；若出错，返回非0\n```\n\n​\t2) 冲刷并关闭所有处于打开状态的标准I/O流。\n\n​\t3) 删除所有通过<i>tempfile</i>创建的临时文件。\n\n​\t在这些事情完成后，调用_exit来做更深层次的清理，包括1) 关闭所有仍处于打开状态的文件描述符。2)将调用进程的子进程托付给<i>init</i>进程。3)向调用进程的父进程发送<i>SIGCHLD</i>信号。\n\n### 4. 异常终止的讨论\n\n​\t说完了正常终止的方式，我们来看看进程的异常终止。\n\n​\t在很多时候，异常终止的原因都是因为信号的默认处理方式。默认的信号处理程序会根据具体信号涵义采取不同处理方式：\n\n- 终止进程运行，并且产生core dump文件。\n- 终止进程运行。\n- 忽略信号，进程继续执行。\n- 暂停进程执行。\n- 如果进程已经暂停，重新调度进程继续运行。\n\n前两种便是我们所说的因为信号而产生的异常终止，但这很多时候并不是程序本身的问题。实际上是存在因为程序本身的问题导致异常终止的情况。\n\n假设在访问内存时发生了非法访问的情况， 就会出发内存保护异常，并跳转到异常处理程序，终止进程运行。异常处理函数在实现上，是通过向挂起的进程发送信号，进而通过信号的默认处理程序来终止进程运行，在这信号发生前内核可能会试着修复，在发现无法挽回后，进程的死活便取决于信号的默认处理函数了。所以这种情况下的实际终止原因还是信号的处理。\n\n关于调用<i>abort</i>异常终止也是通过给进程发送信号的原理，具体的<i>abort</i>源码可以了解下。","slug":"Unix/2019-04-09-进程终止","published":1,"updated":"2019-04-09T05:47:22.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdlcrxk0008eguhc2pmcy07","content":"<h1 id=\"进程退出\"><a href=\"#进程退出\" class=\"headerlink\" title=\"进程退出\"></a>进程退出</h1><h3 id=\"1-正常方式\"><a href=\"#1-正常方式\" class=\"headerlink\" title=\"1. 正常方式\"></a>1. 正常方式</h3><ul>\n<li>从main返回</li>\n<li>调用exit</li>\n<li>调用_exit或_Exit</li>\n<li>最后一个线程从其启动例程返回</li>\n<li>最后一个线程调用<i>pthread_exit</i></li>\n</ul>\n<h3 id=\"2-异常终止\"><a href=\"#2-异常终止\" class=\"headerlink\" title=\"2. 异常终止\"></a>2. 异常终止</h3><ul>\n<li>调用abort</li>\n<li>接到一个信号</li>\n<li>最后一个线程对取消请求作出相应(待补充)</li>\n</ul>\n<h3 id=\"3-正常结束的善后内容\"><a href=\"#3-正常结束的善后内容\" class=\"headerlink\" title=\"3. 正常结束的善后内容\"></a>3. 正常结束的善后内容</h3><p>​    我们先来看看exit和_exit与_Exit区别，首先exit和_Exit是ISO定义的函数，定义在&lt;stdlib.h&gt;头文件中，而_exit则是基于POSIX标准，属于系统调用，定义在&lt;unistd.h&gt;头文件中。这三个函数的参数都带一个整型参数，表示进程的退出状态。如果a) 调用这些函数时不带参数，或b) main执行了一个无返回值的return语句，或c)main没有声明返回类型为整型，则返回状态是未定义的。但是若main的返回类型是整形，并且main执行到最后一条语句时返回，那么进程的终止状态是0。<b>exit(0)表示正常退出，其他情况都表示异常退出。</b></p>\n<p>​    _exit其实是exit调用过程的一个子集，首先exit退出进程前，会进行一系列的善后工作，包括1) 调用通过<i>atexit</i>或on_exit注册的退出处理函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">atexit</span><span class=\"params\">(<span class=\"keyword\">void</span> (*func)(<span class=\"keyword\">void</span>))</span></span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回值：若成功，返回0；若出错，返回非0</span></span><br></pre></td></tr></table></figure>\n<p>​    2) 冲刷并关闭所有处于打开状态的标准I/O流。</p>\n<p>​    3) 删除所有通过<i>tempfile</i>创建的临时文件。</p>\n<p>​    在这些事情完成后，调用_exit来做更深层次的清理，包括1) 关闭所有仍处于打开状态的文件描述符。2)将调用进程的子进程托付给<i>init</i>进程。3)向调用进程的父进程发送<i>SIGCHLD</i>信号。</p>\n<h3 id=\"4-异常终止的讨论\"><a href=\"#4-异常终止的讨论\" class=\"headerlink\" title=\"4. 异常终止的讨论\"></a>4. 异常终止的讨论</h3><p>​    说完了正常终止的方式，我们来看看进程的异常终止。</p>\n<p>​    在很多时候，异常终止的原因都是因为信号的默认处理方式。默认的信号处理程序会根据具体信号涵义采取不同处理方式：</p>\n<ul>\n<li>终止进程运行，并且产生core dump文件。</li>\n<li>终止进程运行。</li>\n<li>忽略信号，进程继续执行。</li>\n<li>暂停进程执行。</li>\n<li>如果进程已经暂停，重新调度进程继续运行。</li>\n</ul>\n<p>前两种便是我们所说的因为信号而产生的异常终止，但这很多时候并不是程序本身的问题。实际上是存在因为程序本身的问题导致异常终止的情况。</p>\n<p>假设在访问内存时发生了非法访问的情况， 就会出发内存保护异常，并跳转到异常处理程序，终止进程运行。异常处理函数在实现上，是通过向挂起的进程发送信号，进而通过信号的默认处理程序来终止进程运行，在这信号发生前内核可能会试着修复，在发现无法挽回后，进程的死活便取决于信号的默认处理函数了。所以这种情况下的实际终止原因还是信号的处理。</p>\n<p>关于调用<i>abort</i>异常终止也是通过给进程发送信号的原理，具体的<i>abort</i>源码可以了解下。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"进程退出\"><a href=\"#进程退出\" class=\"headerlink\" title=\"进程退出\"></a>进程退出</h1><h3 id=\"1-正常方式\"><a href=\"#1-正常方式\" class=\"headerlink\" title=\"1. 正常方式\"></a>1. 正常方式</h3><ul>\n<li>从main返回</li>\n<li>调用exit</li>\n<li>调用_exit或_Exit</li>\n<li>最后一个线程从其启动例程返回</li>\n<li>最后一个线程调用<i>pthread_exit</i></li>\n</ul>\n<h3 id=\"2-异常终止\"><a href=\"#2-异常终止\" class=\"headerlink\" title=\"2. 异常终止\"></a>2. 异常终止</h3><ul>\n<li>调用abort</li>\n<li>接到一个信号</li>\n<li>最后一个线程对取消请求作出相应(待补充)</li>\n</ul>\n<h3 id=\"3-正常结束的善后内容\"><a href=\"#3-正常结束的善后内容\" class=\"headerlink\" title=\"3. 正常结束的善后内容\"></a>3. 正常结束的善后内容</h3><p>​    我们先来看看exit和_exit与_Exit区别，首先exit和_Exit是ISO定义的函数，定义在&lt;stdlib.h&gt;头文件中，而_exit则是基于POSIX标准，属于系统调用，定义在&lt;unistd.h&gt;头文件中。这三个函数的参数都带一个整型参数，表示进程的退出状态。如果a) 调用这些函数时不带参数，或b) main执行了一个无返回值的return语句，或c)main没有声明返回类型为整型，则返回状态是未定义的。但是若main的返回类型是整形，并且main执行到最后一条语句时返回，那么进程的终止状态是0。<b>exit(0)表示正常退出，其他情况都表示异常退出。</b></p>\n<p>​    _exit其实是exit调用过程的一个子集，首先exit退出进程前，会进行一系列的善后工作，包括1) 调用通过<i>atexit</i>或on_exit注册的退出处理函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">atexit</span><span class=\"params\">(<span class=\"keyword\">void</span> (*func)(<span class=\"keyword\">void</span>))</span></span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回值：若成功，返回0；若出错，返回非0</span></span><br></pre></td></tr></table></figure>\n<p>​    2) 冲刷并关闭所有处于打开状态的标准I/O流。</p>\n<p>​    3) 删除所有通过<i>tempfile</i>创建的临时文件。</p>\n<p>​    在这些事情完成后，调用_exit来做更深层次的清理，包括1) 关闭所有仍处于打开状态的文件描述符。2)将调用进程的子进程托付给<i>init</i>进程。3)向调用进程的父进程发送<i>SIGCHLD</i>信号。</p>\n<h3 id=\"4-异常终止的讨论\"><a href=\"#4-异常终止的讨论\" class=\"headerlink\" title=\"4. 异常终止的讨论\"></a>4. 异常终止的讨论</h3><p>​    说完了正常终止的方式，我们来看看进程的异常终止。</p>\n<p>​    在很多时候，异常终止的原因都是因为信号的默认处理方式。默认的信号处理程序会根据具体信号涵义采取不同处理方式：</p>\n<ul>\n<li>终止进程运行，并且产生core dump文件。</li>\n<li>终止进程运行。</li>\n<li>忽略信号，进程继续执行。</li>\n<li>暂停进程执行。</li>\n<li>如果进程已经暂停，重新调度进程继续运行。</li>\n</ul>\n<p>前两种便是我们所说的因为信号而产生的异常终止，但这很多时候并不是程序本身的问题。实际上是存在因为程序本身的问题导致异常终止的情况。</p>\n<p>假设在访问内存时发生了非法访问的情况， 就会出发内存保护异常，并跳转到异常处理程序，终止进程运行。异常处理函数在实现上，是通过向挂起的进程发送信号，进而通过信号的默认处理程序来终止进程运行，在这信号发生前内核可能会试着修复，在发现无法挽回后，进程的死活便取决于信号的默认处理函数了。所以这种情况下的实际终止原因还是信号的处理。</p>\n<p>关于调用<i>abort</i>异常终止也是通过给进程发送信号的原理，具体的<i>abort</i>源码可以了解下。</p>\n"},{"title":"操作系统基本算法","date":"2019-04-09T16:00:00.000Z","_content":"\n# 操作系统基本算法\n\n### 调度\n\n对于操作系统来讲，何时调度是一个问题。一般来说，分为以下几种情况。1）在创建一个新进程后需要决定运行父进程还是子进程。2）在一个进程退出时做出调度决策。3）当一个进程阻塞在I/O和信号量上或由于其他原因阻塞时，必须选择另一个进程运行。4）在一个I/O中断发生时，必须做出调度决策。如果中断来自I/O设备，而现在设备完成了工作，某些被阻塞的等待该I/O的进程就成为了可运行的就绪进程了，具体运行哪个进程取决于操作系统对调度的实现。\n\n#### 调度算法的分类\n\n##### 批处理\n\n运行批处理作业的大型计算中心的管理者通常检查三个指标：\n\n吞吐量、周转时间以及CPU利用率。1）吞吐量是单位时间完成的作业数量。2）周转时间是一个作业完成的平均时间。3）CPU利用率。吞吐量的优秀不代表周转时间优秀。\n\n常用的批处理调度算法：\n\n- 先来先服务(FCFS): 很好理解，最先到的作业，先完成它。后来的排在后面。好处是实现起来比较容易，缺点是可能让其他进程的周转时间过长。\n- 最短作业优先(SJF): 由于在当前作业完成前，其它的作业都在等待你，因此让完成时间最短的作业先执行可以减少其他作业的等待时间。\n- 最短剩余时间优先(shortest remaining time next): 相比于SJF，这种算法表现出了抢占性，并且有着更好的周转时间。\n\n##### 交互式\n\n- 轮转调度(round robin): 轮转调度为每个进程分配了时间片，允许进程在时间片内运行。如果时间片结束，由计时器发出时钟中断，调度程序便停止进程的执行，并把它送往队尾。\n\n  时间片轮转算法的效率和时间片关系很大：时间片大小，导致进程切换频繁，在进程切换上花费时间巨大。如果时间片过长，实时性就不能得到保证。\n\n- 优先级调度：为每个进程分配一个优先级，按优先级进行调度。为了放置低优先级的进程永远得不到调度，可以随着时间的推移增加等待进程的优先级。\n\n- 多级反馈队列：一个进程需要执行 100 个时间片，如果采用时间片轮转调度算法，那么需要交换 100 次。\n\n  多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如 1,2,4,8,..。进程在第一个队列没执行完，就会被移到下一个队列。这种方式下，之前的进程只需要交换 7 次。\n\n  每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。\n\n  可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。\n\n##### 实时\n\n实时系统要求一个请求在一个确定时间内得到相应，非为硬实时和软实时，前者必须满足绝对的截至时间，后者可以容忍一定的超时。\n\n\n\n### 页面置换算法\n\n#### 最佳置换算法(OPT)\n\n所选择的被换出页面是最长时间内不再被访问，通常可以保证获得最低的缺页率。是一种理论上的算法。因为无法知道一个页面多长时间不再被访问。举例：一个系统为某进程分配了三个物理块，并有如下页面引用序列：70120304230321201701.\n\n开始运行时，先将 7, 0, 1 三个页面装入内存。当进程要访问页面 2 时，产生缺页中断，会将页面 7 换出，因为页面 7 再次被访问的时间最长。\n\n#### 最近最久未使用(LRU)\n\n虽然无法知道将来要使用的页面情况，但是可以知道过去使用页面的情况。LRU 将最近最久未使用的页面换出。\n\n为了实现 LRU，需要在内存中维护一个所有页面的链表。当一个页面被访问时，将这个页面移到链表表头。这样就能保证链表表尾的页面是最近最久未访问的。\n\n因为每次访问都需要更新链表，因此这种方式实现的 LRU 代价很高。\n\n#### 最近未使用(NRU)\n\n每个页面都有两个状态位：R 与 M，当页面被访问时设置页面的 R=1，当页面被修改时设置 M=1。其中 R 位会定时被清零。可以将页面分成以下四类：1)R=0，M=0,2)R=0，M=1,3)R=1，M=0，4)R=1，M=1\n\n当发生缺页中断时，NRU 算法随机地从类编号最小的非空类中挑选一个页面将它换出。\n\nNRU 优先换出已经被修改的脏页面（R=0，M=1），而不是被频繁使用的干净页面（R=1，M=0）。\n\n#### 第二次机会算法\n\nFIFO 算法可能会把经常使用的页面置换出去，为了避免这一问题，对该算法做一个简单的修改：\n\n当页面被访问 (读或写) 时设置该页面的 R 位为 1。需要替换的时候，检查最老页面的 R 位。如果 R 位是 0，那么这个页面既老又没有被使用，可以立刻置换掉；如果是 1，就将 R 位清 0，并把该页面放到链表的尾端，修改它的装入时间使它就像刚装入的一样，然后继续从链表的头部开始搜索。\n\n![img](https://camo.githubusercontent.com/bb4936cb708b590b9787dc63b1dc997e7dcf3216/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f65636638616435642d353430332d343862392d623665372d6632653230666665386663612e706e67)\n\n#### 时钟置换算法\n\n第二次机会算法需要在链表中移动页面，降低效率。时钟算法使用环形链表将页面链接起来，再使用指针指向最老页面。\n\n![img](https://camo.githubusercontent.com/9b5ea5ad5dafc2fea7df2071d1752e10c0bc9d29/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f35663565663062362d393865612d343937632d613030372d6636633535323838656162312e706e67)\n\n#### 工作集页面置换算法\n\n一个进程当前正在使用的页面的集合叫做<b>工作集</b>。如果工作集都被装入了内存，那么进程在运行到下一阶段前，不会产生很多缺页中断。如果内存太小无法容纳整个工作集，运行过程会发生大量的换入换出，这叫做颠簸。（有点类似于虚拟内存的抖动现象）不少分页系统会跟踪进程的工作集，在进程运行前预先装入工作集页面也成为<b>预先调页</b>。\n\n\n\n### 磁盘臂调度算法\n\n读写一个磁盘块的时间影响因素有：\n\n- 旋转时间（主轴转动盘面，使得磁头移动到适当的扇区上）\n- 寻道时间（制动手臂移动，使得磁头移动到适当的磁道上）\n- 实际的数据传输时间\n\n其中寻道时间最长，磁盘调度的主要目标是使磁盘的平均寻道时间最短。\n\n\n\n#### 先来先服务（FCFS）\n\n按照磁盘请求的顺序调度。\n\n优点是公平和简单。缺点是未对寻道做任何优化，使平均寻道时间较长。\n\n\n\n#### 最短寻道时间优先（SSTF）\n\n优先调度与当前磁头所在磁道距离最近的磁道。\n\n虽然平均寻道时间比较低，但是不够公平。如果新到达的磁道请求总是比一个在等待的磁道请求近，那么在等待的磁道请求会一直等待下去，也就是出现饥饿现象。具体来说，两端的磁道请求更容易出现饥饿现象。\n\n#### 电梯算法（SCAN）\n\n电梯总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向。\n\n电梯算法（扫描算法）和电梯的运行过程类似，总是按一个方向来进行磁盘调度，直到该方向上没有未完成的磁盘请求，然后改变方向。\n\n因为考虑了移动方向，因此所有的磁盘请求都会被满足，解决了 SSTF 的饥饿问题。","source":"_posts/操作系统/2019-04-10-操作系统基本算法.md","raw":"---\ntitle: 操作系统基本算法\ncategories: 操作系统\ntags: [操作系统]\ndate: 2019-04-10\n---\n\n# 操作系统基本算法\n\n### 调度\n\n对于操作系统来讲，何时调度是一个问题。一般来说，分为以下几种情况。1）在创建一个新进程后需要决定运行父进程还是子进程。2）在一个进程退出时做出调度决策。3）当一个进程阻塞在I/O和信号量上或由于其他原因阻塞时，必须选择另一个进程运行。4）在一个I/O中断发生时，必须做出调度决策。如果中断来自I/O设备，而现在设备完成了工作，某些被阻塞的等待该I/O的进程就成为了可运行的就绪进程了，具体运行哪个进程取决于操作系统对调度的实现。\n\n#### 调度算法的分类\n\n##### 批处理\n\n运行批处理作业的大型计算中心的管理者通常检查三个指标：\n\n吞吐量、周转时间以及CPU利用率。1）吞吐量是单位时间完成的作业数量。2）周转时间是一个作业完成的平均时间。3）CPU利用率。吞吐量的优秀不代表周转时间优秀。\n\n常用的批处理调度算法：\n\n- 先来先服务(FCFS): 很好理解，最先到的作业，先完成它。后来的排在后面。好处是实现起来比较容易，缺点是可能让其他进程的周转时间过长。\n- 最短作业优先(SJF): 由于在当前作业完成前，其它的作业都在等待你，因此让完成时间最短的作业先执行可以减少其他作业的等待时间。\n- 最短剩余时间优先(shortest remaining time next): 相比于SJF，这种算法表现出了抢占性，并且有着更好的周转时间。\n\n##### 交互式\n\n- 轮转调度(round robin): 轮转调度为每个进程分配了时间片，允许进程在时间片内运行。如果时间片结束，由计时器发出时钟中断，调度程序便停止进程的执行，并把它送往队尾。\n\n  时间片轮转算法的效率和时间片关系很大：时间片大小，导致进程切换频繁，在进程切换上花费时间巨大。如果时间片过长，实时性就不能得到保证。\n\n- 优先级调度：为每个进程分配一个优先级，按优先级进行调度。为了放置低优先级的进程永远得不到调度，可以随着时间的推移增加等待进程的优先级。\n\n- 多级反馈队列：一个进程需要执行 100 个时间片，如果采用时间片轮转调度算法，那么需要交换 100 次。\n\n  多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如 1,2,4,8,..。进程在第一个队列没执行完，就会被移到下一个队列。这种方式下，之前的进程只需要交换 7 次。\n\n  每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。\n\n  可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。\n\n##### 实时\n\n实时系统要求一个请求在一个确定时间内得到相应，非为硬实时和软实时，前者必须满足绝对的截至时间，后者可以容忍一定的超时。\n\n\n\n### 页面置换算法\n\n#### 最佳置换算法(OPT)\n\n所选择的被换出页面是最长时间内不再被访问，通常可以保证获得最低的缺页率。是一种理论上的算法。因为无法知道一个页面多长时间不再被访问。举例：一个系统为某进程分配了三个物理块，并有如下页面引用序列：70120304230321201701.\n\n开始运行时，先将 7, 0, 1 三个页面装入内存。当进程要访问页面 2 时，产生缺页中断，会将页面 7 换出，因为页面 7 再次被访问的时间最长。\n\n#### 最近最久未使用(LRU)\n\n虽然无法知道将来要使用的页面情况，但是可以知道过去使用页面的情况。LRU 将最近最久未使用的页面换出。\n\n为了实现 LRU，需要在内存中维护一个所有页面的链表。当一个页面被访问时，将这个页面移到链表表头。这样就能保证链表表尾的页面是最近最久未访问的。\n\n因为每次访问都需要更新链表，因此这种方式实现的 LRU 代价很高。\n\n#### 最近未使用(NRU)\n\n每个页面都有两个状态位：R 与 M，当页面被访问时设置页面的 R=1，当页面被修改时设置 M=1。其中 R 位会定时被清零。可以将页面分成以下四类：1)R=0，M=0,2)R=0，M=1,3)R=1，M=0，4)R=1，M=1\n\n当发生缺页中断时，NRU 算法随机地从类编号最小的非空类中挑选一个页面将它换出。\n\nNRU 优先换出已经被修改的脏页面（R=0，M=1），而不是被频繁使用的干净页面（R=1，M=0）。\n\n#### 第二次机会算法\n\nFIFO 算法可能会把经常使用的页面置换出去，为了避免这一问题，对该算法做一个简单的修改：\n\n当页面被访问 (读或写) 时设置该页面的 R 位为 1。需要替换的时候，检查最老页面的 R 位。如果 R 位是 0，那么这个页面既老又没有被使用，可以立刻置换掉；如果是 1，就将 R 位清 0，并把该页面放到链表的尾端，修改它的装入时间使它就像刚装入的一样，然后继续从链表的头部开始搜索。\n\n![img](https://camo.githubusercontent.com/bb4936cb708b590b9787dc63b1dc997e7dcf3216/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f65636638616435642d353430332d343862392d623665372d6632653230666665386663612e706e67)\n\n#### 时钟置换算法\n\n第二次机会算法需要在链表中移动页面，降低效率。时钟算法使用环形链表将页面链接起来，再使用指针指向最老页面。\n\n![img](https://camo.githubusercontent.com/9b5ea5ad5dafc2fea7df2071d1752e10c0bc9d29/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f35663565663062362d393865612d343937632d613030372d6636633535323838656162312e706e67)\n\n#### 工作集页面置换算法\n\n一个进程当前正在使用的页面的集合叫做<b>工作集</b>。如果工作集都被装入了内存，那么进程在运行到下一阶段前，不会产生很多缺页中断。如果内存太小无法容纳整个工作集，运行过程会发生大量的换入换出，这叫做颠簸。（有点类似于虚拟内存的抖动现象）不少分页系统会跟踪进程的工作集，在进程运行前预先装入工作集页面也成为<b>预先调页</b>。\n\n\n\n### 磁盘臂调度算法\n\n读写一个磁盘块的时间影响因素有：\n\n- 旋转时间（主轴转动盘面，使得磁头移动到适当的扇区上）\n- 寻道时间（制动手臂移动，使得磁头移动到适当的磁道上）\n- 实际的数据传输时间\n\n其中寻道时间最长，磁盘调度的主要目标是使磁盘的平均寻道时间最短。\n\n\n\n#### 先来先服务（FCFS）\n\n按照磁盘请求的顺序调度。\n\n优点是公平和简单。缺点是未对寻道做任何优化，使平均寻道时间较长。\n\n\n\n#### 最短寻道时间优先（SSTF）\n\n优先调度与当前磁头所在磁道距离最近的磁道。\n\n虽然平均寻道时间比较低，但是不够公平。如果新到达的磁道请求总是比一个在等待的磁道请求近，那么在等待的磁道请求会一直等待下去，也就是出现饥饿现象。具体来说，两端的磁道请求更容易出现饥饿现象。\n\n#### 电梯算法（SCAN）\n\n电梯总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向。\n\n电梯算法（扫描算法）和电梯的运行过程类似，总是按一个方向来进行磁盘调度，直到该方向上没有未完成的磁盘请求，然后改变方向。\n\n因为考虑了移动方向，因此所有的磁盘请求都会被满足，解决了 SSTF 的饥饿问题。","slug":"操作系统/2019-04-10-操作系统基本算法","published":1,"updated":"2019-04-10T13:40:47.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdlcrxm000beguhf4rh6c4y","content":"<h1 id=\"操作系统基本算法\"><a href=\"#操作系统基本算法\" class=\"headerlink\" title=\"操作系统基本算法\"></a>操作系统基本算法</h1><h3 id=\"调度\"><a href=\"#调度\" class=\"headerlink\" title=\"调度\"></a>调度</h3><p>对于操作系统来讲，何时调度是一个问题。一般来说，分为以下几种情况。1）在创建一个新进程后需要决定运行父进程还是子进程。2）在一个进程退出时做出调度决策。3）当一个进程阻塞在I/O和信号量上或由于其他原因阻塞时，必须选择另一个进程运行。4）在一个I/O中断发生时，必须做出调度决策。如果中断来自I/O设备，而现在设备完成了工作，某些被阻塞的等待该I/O的进程就成为了可运行的就绪进程了，具体运行哪个进程取决于操作系统对调度的实现。</p>\n<h4 id=\"调度算法的分类\"><a href=\"#调度算法的分类\" class=\"headerlink\" title=\"调度算法的分类\"></a>调度算法的分类</h4><h5 id=\"批处理\"><a href=\"#批处理\" class=\"headerlink\" title=\"批处理\"></a>批处理</h5><p>运行批处理作业的大型计算中心的管理者通常检查三个指标：</p>\n<p>吞吐量、周转时间以及CPU利用率。1）吞吐量是单位时间完成的作业数量。2）周转时间是一个作业完成的平均时间。3）CPU利用率。吞吐量的优秀不代表周转时间优秀。</p>\n<p>常用的批处理调度算法：</p>\n<ul>\n<li>先来先服务(FCFS): 很好理解，最先到的作业，先完成它。后来的排在后面。好处是实现起来比较容易，缺点是可能让其他进程的周转时间过长。</li>\n<li>最短作业优先(SJF): 由于在当前作业完成前，其它的作业都在等待你，因此让完成时间最短的作业先执行可以减少其他作业的等待时间。</li>\n<li>最短剩余时间优先(shortest remaining time next): 相比于SJF，这种算法表现出了抢占性，并且有着更好的周转时间。</li>\n</ul>\n<h5 id=\"交互式\"><a href=\"#交互式\" class=\"headerlink\" title=\"交互式\"></a>交互式</h5><ul>\n<li><p>轮转调度(round robin): 轮转调度为每个进程分配了时间片，允许进程在时间片内运行。如果时间片结束，由计时器发出时钟中断，调度程序便停止进程的执行，并把它送往队尾。</p>\n<p>时间片轮转算法的效率和时间片关系很大：时间片大小，导致进程切换频繁，在进程切换上花费时间巨大。如果时间片过长，实时性就不能得到保证。</p>\n</li>\n<li><p>优先级调度：为每个进程分配一个优先级，按优先级进行调度。为了放置低优先级的进程永远得不到调度，可以随着时间的推移增加等待进程的优先级。</p>\n</li>\n<li><p>多级反馈队列：一个进程需要执行 100 个时间片，如果采用时间片轮转调度算法，那么需要交换 100 次。</p>\n<p>多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如 1,2,4,8,..。进程在第一个队列没执行完，就会被移到下一个队列。这种方式下，之前的进程只需要交换 7 次。</p>\n<p>每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。</p>\n<p>可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。</p>\n</li>\n</ul>\n<h5 id=\"实时\"><a href=\"#实时\" class=\"headerlink\" title=\"实时\"></a>实时</h5><p>实时系统要求一个请求在一个确定时间内得到相应，非为硬实时和软实时，前者必须满足绝对的截至时间，后者可以容忍一定的超时。</p>\n<h3 id=\"页面置换算法\"><a href=\"#页面置换算法\" class=\"headerlink\" title=\"页面置换算法\"></a>页面置换算法</h3><h4 id=\"最佳置换算法-OPT\"><a href=\"#最佳置换算法-OPT\" class=\"headerlink\" title=\"最佳置换算法(OPT)\"></a>最佳置换算法(OPT)</h4><p>所选择的被换出页面是最长时间内不再被访问，通常可以保证获得最低的缺页率。是一种理论上的算法。因为无法知道一个页面多长时间不再被访问。举例：一个系统为某进程分配了三个物理块，并有如下页面引用序列：70120304230321201701.</p>\n<p>开始运行时，先将 7, 0, 1 三个页面装入内存。当进程要访问页面 2 时，产生缺页中断，会将页面 7 换出，因为页面 7 再次被访问的时间最长。</p>\n<h4 id=\"最近最久未使用-LRU\"><a href=\"#最近最久未使用-LRU\" class=\"headerlink\" title=\"最近最久未使用(LRU)\"></a>最近最久未使用(LRU)</h4><p>虽然无法知道将来要使用的页面情况，但是可以知道过去使用页面的情况。LRU 将最近最久未使用的页面换出。</p>\n<p>为了实现 LRU，需要在内存中维护一个所有页面的链表。当一个页面被访问时，将这个页面移到链表表头。这样就能保证链表表尾的页面是最近最久未访问的。</p>\n<p>因为每次访问都需要更新链表，因此这种方式实现的 LRU 代价很高。</p>\n<h4 id=\"最近未使用-NRU\"><a href=\"#最近未使用-NRU\" class=\"headerlink\" title=\"最近未使用(NRU)\"></a>最近未使用(NRU)</h4><p>每个页面都有两个状态位：R 与 M，当页面被访问时设置页面的 R=1，当页面被修改时设置 M=1。其中 R 位会定时被清零。可以将页面分成以下四类：1)R=0，M=0,2)R=0，M=1,3)R=1，M=0，4)R=1，M=1</p>\n<p>当发生缺页中断时，NRU 算法随机地从类编号最小的非空类中挑选一个页面将它换出。</p>\n<p>NRU 优先换出已经被修改的脏页面（R=0，M=1），而不是被频繁使用的干净页面（R=1，M=0）。</p>\n<h4 id=\"第二次机会算法\"><a href=\"#第二次机会算法\" class=\"headerlink\" title=\"第二次机会算法\"></a>第二次机会算法</h4><p>FIFO 算法可能会把经常使用的页面置换出去，为了避免这一问题，对该算法做一个简单的修改：</p>\n<p>当页面被访问 (读或写) 时设置该页面的 R 位为 1。需要替换的时候，检查最老页面的 R 位。如果 R 位是 0，那么这个页面既老又没有被使用，可以立刻置换掉；如果是 1，就将 R 位清 0，并把该页面放到链表的尾端，修改它的装入时间使它就像刚装入的一样，然后继续从链表的头部开始搜索。</p>\n<p><img src=\"https://camo.githubusercontent.com/bb4936cb708b590b9787dc63b1dc997e7dcf3216/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f65636638616435642d353430332d343862392d623665372d6632653230666665386663612e706e67\" alt=\"img\"></p>\n<h4 id=\"时钟置换算法\"><a href=\"#时钟置换算法\" class=\"headerlink\" title=\"时钟置换算法\"></a>时钟置换算法</h4><p>第二次机会算法需要在链表中移动页面，降低效率。时钟算法使用环形链表将页面链接起来，再使用指针指向最老页面。</p>\n<p><img src=\"https://camo.githubusercontent.com/9b5ea5ad5dafc2fea7df2071d1752e10c0bc9d29/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f35663565663062362d393865612d343937632d613030372d6636633535323838656162312e706e67\" alt=\"img\"></p>\n<h4 id=\"工作集页面置换算法\"><a href=\"#工作集页面置换算法\" class=\"headerlink\" title=\"工作集页面置换算法\"></a>工作集页面置换算法</h4><p>一个进程当前正在使用的页面的集合叫做<b>工作集</b>。如果工作集都被装入了内存，那么进程在运行到下一阶段前，不会产生很多缺页中断。如果内存太小无法容纳整个工作集，运行过程会发生大量的换入换出，这叫做颠簸。（有点类似于虚拟内存的抖动现象）不少分页系统会跟踪进程的工作集，在进程运行前预先装入工作集页面也成为<b>预先调页</b>。</p>\n<h3 id=\"磁盘臂调度算法\"><a href=\"#磁盘臂调度算法\" class=\"headerlink\" title=\"磁盘臂调度算法\"></a>磁盘臂调度算法</h3><p>读写一个磁盘块的时间影响因素有：</p>\n<ul>\n<li>旋转时间（主轴转动盘面，使得磁头移动到适当的扇区上）</li>\n<li>寻道时间（制动手臂移动，使得磁头移动到适当的磁道上）</li>\n<li>实际的数据传输时间</li>\n</ul>\n<p>其中寻道时间最长，磁盘调度的主要目标是使磁盘的平均寻道时间最短。</p>\n<h4 id=\"先来先服务（FCFS）\"><a href=\"#先来先服务（FCFS）\" class=\"headerlink\" title=\"先来先服务（FCFS）\"></a>先来先服务（FCFS）</h4><p>按照磁盘请求的顺序调度。</p>\n<p>优点是公平和简单。缺点是未对寻道做任何优化，使平均寻道时间较长。</p>\n<h4 id=\"最短寻道时间优先（SSTF）\"><a href=\"#最短寻道时间优先（SSTF）\" class=\"headerlink\" title=\"最短寻道时间优先（SSTF）\"></a>最短寻道时间优先（SSTF）</h4><p>优先调度与当前磁头所在磁道距离最近的磁道。</p>\n<p>虽然平均寻道时间比较低，但是不够公平。如果新到达的磁道请求总是比一个在等待的磁道请求近，那么在等待的磁道请求会一直等待下去，也就是出现饥饿现象。具体来说，两端的磁道请求更容易出现饥饿现象。</p>\n<h4 id=\"电梯算法（SCAN）\"><a href=\"#电梯算法（SCAN）\" class=\"headerlink\" title=\"电梯算法（SCAN）\"></a>电梯算法（SCAN）</h4><p>电梯总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向。</p>\n<p>电梯算法（扫描算法）和电梯的运行过程类似，总是按一个方向来进行磁盘调度，直到该方向上没有未完成的磁盘请求，然后改变方向。</p>\n<p>因为考虑了移动方向，因此所有的磁盘请求都会被满足，解决了 SSTF 的饥饿问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"操作系统基本算法\"><a href=\"#操作系统基本算法\" class=\"headerlink\" title=\"操作系统基本算法\"></a>操作系统基本算法</h1><h3 id=\"调度\"><a href=\"#调度\" class=\"headerlink\" title=\"调度\"></a>调度</h3><p>对于操作系统来讲，何时调度是一个问题。一般来说，分为以下几种情况。1）在创建一个新进程后需要决定运行父进程还是子进程。2）在一个进程退出时做出调度决策。3）当一个进程阻塞在I/O和信号量上或由于其他原因阻塞时，必须选择另一个进程运行。4）在一个I/O中断发生时，必须做出调度决策。如果中断来自I/O设备，而现在设备完成了工作，某些被阻塞的等待该I/O的进程就成为了可运行的就绪进程了，具体运行哪个进程取决于操作系统对调度的实现。</p>\n<h4 id=\"调度算法的分类\"><a href=\"#调度算法的分类\" class=\"headerlink\" title=\"调度算法的分类\"></a>调度算法的分类</h4><h5 id=\"批处理\"><a href=\"#批处理\" class=\"headerlink\" title=\"批处理\"></a>批处理</h5><p>运行批处理作业的大型计算中心的管理者通常检查三个指标：</p>\n<p>吞吐量、周转时间以及CPU利用率。1）吞吐量是单位时间完成的作业数量。2）周转时间是一个作业完成的平均时间。3）CPU利用率。吞吐量的优秀不代表周转时间优秀。</p>\n<p>常用的批处理调度算法：</p>\n<ul>\n<li>先来先服务(FCFS): 很好理解，最先到的作业，先完成它。后来的排在后面。好处是实现起来比较容易，缺点是可能让其他进程的周转时间过长。</li>\n<li>最短作业优先(SJF): 由于在当前作业完成前，其它的作业都在等待你，因此让完成时间最短的作业先执行可以减少其他作业的等待时间。</li>\n<li>最短剩余时间优先(shortest remaining time next): 相比于SJF，这种算法表现出了抢占性，并且有着更好的周转时间。</li>\n</ul>\n<h5 id=\"交互式\"><a href=\"#交互式\" class=\"headerlink\" title=\"交互式\"></a>交互式</h5><ul>\n<li><p>轮转调度(round robin): 轮转调度为每个进程分配了时间片，允许进程在时间片内运行。如果时间片结束，由计时器发出时钟中断，调度程序便停止进程的执行，并把它送往队尾。</p>\n<p>时间片轮转算法的效率和时间片关系很大：时间片大小，导致进程切换频繁，在进程切换上花费时间巨大。如果时间片过长，实时性就不能得到保证。</p>\n</li>\n<li><p>优先级调度：为每个进程分配一个优先级，按优先级进行调度。为了放置低优先级的进程永远得不到调度，可以随着时间的推移增加等待进程的优先级。</p>\n</li>\n<li><p>多级反馈队列：一个进程需要执行 100 个时间片，如果采用时间片轮转调度算法，那么需要交换 100 次。</p>\n<p>多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如 1,2,4,8,..。进程在第一个队列没执行完，就会被移到下一个队列。这种方式下，之前的进程只需要交换 7 次。</p>\n<p>每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。</p>\n<p>可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。</p>\n</li>\n</ul>\n<h5 id=\"实时\"><a href=\"#实时\" class=\"headerlink\" title=\"实时\"></a>实时</h5><p>实时系统要求一个请求在一个确定时间内得到相应，非为硬实时和软实时，前者必须满足绝对的截至时间，后者可以容忍一定的超时。</p>\n<h3 id=\"页面置换算法\"><a href=\"#页面置换算法\" class=\"headerlink\" title=\"页面置换算法\"></a>页面置换算法</h3><h4 id=\"最佳置换算法-OPT\"><a href=\"#最佳置换算法-OPT\" class=\"headerlink\" title=\"最佳置换算法(OPT)\"></a>最佳置换算法(OPT)</h4><p>所选择的被换出页面是最长时间内不再被访问，通常可以保证获得最低的缺页率。是一种理论上的算法。因为无法知道一个页面多长时间不再被访问。举例：一个系统为某进程分配了三个物理块，并有如下页面引用序列：70120304230321201701.</p>\n<p>开始运行时，先将 7, 0, 1 三个页面装入内存。当进程要访问页面 2 时，产生缺页中断，会将页面 7 换出，因为页面 7 再次被访问的时间最长。</p>\n<h4 id=\"最近最久未使用-LRU\"><a href=\"#最近最久未使用-LRU\" class=\"headerlink\" title=\"最近最久未使用(LRU)\"></a>最近最久未使用(LRU)</h4><p>虽然无法知道将来要使用的页面情况，但是可以知道过去使用页面的情况。LRU 将最近最久未使用的页面换出。</p>\n<p>为了实现 LRU，需要在内存中维护一个所有页面的链表。当一个页面被访问时，将这个页面移到链表表头。这样就能保证链表表尾的页面是最近最久未访问的。</p>\n<p>因为每次访问都需要更新链表，因此这种方式实现的 LRU 代价很高。</p>\n<h4 id=\"最近未使用-NRU\"><a href=\"#最近未使用-NRU\" class=\"headerlink\" title=\"最近未使用(NRU)\"></a>最近未使用(NRU)</h4><p>每个页面都有两个状态位：R 与 M，当页面被访问时设置页面的 R=1，当页面被修改时设置 M=1。其中 R 位会定时被清零。可以将页面分成以下四类：1)R=0，M=0,2)R=0，M=1,3)R=1，M=0，4)R=1，M=1</p>\n<p>当发生缺页中断时，NRU 算法随机地从类编号最小的非空类中挑选一个页面将它换出。</p>\n<p>NRU 优先换出已经被修改的脏页面（R=0，M=1），而不是被频繁使用的干净页面（R=1，M=0）。</p>\n<h4 id=\"第二次机会算法\"><a href=\"#第二次机会算法\" class=\"headerlink\" title=\"第二次机会算法\"></a>第二次机会算法</h4><p>FIFO 算法可能会把经常使用的页面置换出去，为了避免这一问题，对该算法做一个简单的修改：</p>\n<p>当页面被访问 (读或写) 时设置该页面的 R 位为 1。需要替换的时候，检查最老页面的 R 位。如果 R 位是 0，那么这个页面既老又没有被使用，可以立刻置换掉；如果是 1，就将 R 位清 0，并把该页面放到链表的尾端，修改它的装入时间使它就像刚装入的一样，然后继续从链表的头部开始搜索。</p>\n<p><img src=\"https://camo.githubusercontent.com/bb4936cb708b590b9787dc63b1dc997e7dcf3216/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f65636638616435642d353430332d343862392d623665372d6632653230666665386663612e706e67\" alt=\"img\"></p>\n<h4 id=\"时钟置换算法\"><a href=\"#时钟置换算法\" class=\"headerlink\" title=\"时钟置换算法\"></a>时钟置换算法</h4><p>第二次机会算法需要在链表中移动页面，降低效率。时钟算法使用环形链表将页面链接起来，再使用指针指向最老页面。</p>\n<p><img src=\"https://camo.githubusercontent.com/9b5ea5ad5dafc2fea7df2071d1752e10c0bc9d29/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f35663565663062362d393865612d343937632d613030372d6636633535323838656162312e706e67\" alt=\"img\"></p>\n<h4 id=\"工作集页面置换算法\"><a href=\"#工作集页面置换算法\" class=\"headerlink\" title=\"工作集页面置换算法\"></a>工作集页面置换算法</h4><p>一个进程当前正在使用的页面的集合叫做<b>工作集</b>。如果工作集都被装入了内存，那么进程在运行到下一阶段前，不会产生很多缺页中断。如果内存太小无法容纳整个工作集，运行过程会发生大量的换入换出，这叫做颠簸。（有点类似于虚拟内存的抖动现象）不少分页系统会跟踪进程的工作集，在进程运行前预先装入工作集页面也成为<b>预先调页</b>。</p>\n<h3 id=\"磁盘臂调度算法\"><a href=\"#磁盘臂调度算法\" class=\"headerlink\" title=\"磁盘臂调度算法\"></a>磁盘臂调度算法</h3><p>读写一个磁盘块的时间影响因素有：</p>\n<ul>\n<li>旋转时间（主轴转动盘面，使得磁头移动到适当的扇区上）</li>\n<li>寻道时间（制动手臂移动，使得磁头移动到适当的磁道上）</li>\n<li>实际的数据传输时间</li>\n</ul>\n<p>其中寻道时间最长，磁盘调度的主要目标是使磁盘的平均寻道时间最短。</p>\n<h4 id=\"先来先服务（FCFS）\"><a href=\"#先来先服务（FCFS）\" class=\"headerlink\" title=\"先来先服务（FCFS）\"></a>先来先服务（FCFS）</h4><p>按照磁盘请求的顺序调度。</p>\n<p>优点是公平和简单。缺点是未对寻道做任何优化，使平均寻道时间较长。</p>\n<h4 id=\"最短寻道时间优先（SSTF）\"><a href=\"#最短寻道时间优先（SSTF）\" class=\"headerlink\" title=\"最短寻道时间优先（SSTF）\"></a>最短寻道时间优先（SSTF）</h4><p>优先调度与当前磁头所在磁道距离最近的磁道。</p>\n<p>虽然平均寻道时间比较低，但是不够公平。如果新到达的磁道请求总是比一个在等待的磁道请求近，那么在等待的磁道请求会一直等待下去，也就是出现饥饿现象。具体来说，两端的磁道请求更容易出现饥饿现象。</p>\n<h4 id=\"电梯算法（SCAN）\"><a href=\"#电梯算法（SCAN）\" class=\"headerlink\" title=\"电梯算法（SCAN）\"></a>电梯算法（SCAN）</h4><p>电梯总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向。</p>\n<p>电梯算法（扫描算法）和电梯的运行过程类似，总是按一个方向来进行磁盘调度，直到该方向上没有未完成的磁盘请求，然后改变方向。</p>\n<p>因为考虑了移动方向，因此所有的磁盘请求都会被满足，解决了 SSTF 的饥饿问题。</p>\n"},{"title":"IPC","data":"2019-04-07T16:00:00.000Z","_content":"\n# IPC\n\n### 1. 匿名管道\n\n```c\n#include<unistd.h>\nint pipe(int fd[2]);\n\t\t//返回：若成功则为0，若失败返回-1\n```\n\n匿名管道仅能用于存在关系的进程间，并且匿名管道是半双工的，也就是说数据在管道的流动是单向的。当需要两个双向数据流时，必须创建两个管道。并且匿名管道是随进程持续的，也就是说当进程结束时，这种形式的IPC结构便不再存在，这有别于我们后面介绍的其他的IPC结构。\n\n标准I/O函数库提供了<i>popen</i>函数，它创建一个管道并启动另一个进程，该进程要么从该管道读出标准输入，要么往该管道写入标准输入。\n\n```c\n#include<stdio.h>\nFILE *popen(const char *command,const char *type);\n\t\t\t//返回：若成功则为文件指针，若出错则为NULL\nint pclose(FILE *stream);\n\t\t\t//返回：若成功则为shell的终止状态，若出错则为-1\n```\n\n其中<i>command</i>时一个<i>shell</i>命令行。由<i>sh</i>程序处理，因此PATH环境变量可用于定位该<i>command</i>。<i>popen</i>在调用进程和所指定的命令之间创建一个管道。由<i>popen</i>返回的值是一个标准I/O FILE的指针，该指针可理解为对调用进程关心的管道一端。比方说当命令是<i>cat /etc/shadow</i>，type是<i>\"r\"</i>，意味着子进程将执行该命令，并将结果写进管道。对于父进程也就是调用进程来说，它能通过读管道的另一端得到这些结果，而这个所谓的管道另一端就是返回的<i>FILE*</i>.\n\n而<i>pclose</i>则关闭由<i>popen</i>创建的标准I/O流，等待其中命令终止，然后返回shell的最终状态。\n\n后面将会在<i>github</i>上具体实现这两个函数。\n\n### 2. 命名管道(FIFO)\n\n我们可以看到，匿名管道没有名字，因此它们只能用于有一个公共祖先进程的各个进程之间。无法在无亲缘关系的两个进程间创建一个管道。\n\nFIFO指代<b>先进先出</b>，类似于管道，它也是一个单向的数据流。不同于管道的是，每个FIFO有一个路径名相关联，类似于一个文件，从而允许不相关进程访问同一个FIFO。\n\n```c\n#include<sys/types.h>\n#include<sys/stat.h>\n\nint mkfifo(const char *pathname, mode_t mode);\n\t\t\t//返回：若成功则为0，若出错则为-1\n```\n\npathname是普通的Unix路径名，是该FIFO的名字。mode参数指定文件权限位，类似于open的参数。\n\n<i>mkfifo</i>函数已隐含指定<i>O_CREATE|O_EXCL</i>。也就是说要么创建一个新的FIFO，要么返回一个EEXIST错误。\n\n对于FIFO的打开或者读或者写，不能既读又写，因为它是半双工的。对FIFO的写总是往末尾添加数据，对它们的读总是从开头返回数据。对FIFO调用<i>lseek</i>将返回ESPIPE错误。\n\n管道在所有进程最终都关闭它之后自动消失。FIFO的名字则只有通过调用unlink才从文件系统删除。内核为管道和FIFO维护了引用计数器，它是访问同一个描述符的个数。这种引用计数器的存在有一个性质，假设在还存在进程引用该文件时，调用unlink删除该文件，不会对现在还在使用该文件的进程造成影响，对文件的删除将推迟到引用计数器为0的时刻。这有别于System V对于部分IPC方式的处理。\n\n值得注意的是，默认情况下，对于FIFO的读(写)打开会阻塞到有写(读)的打开。倘若对于一个没有读者的FIFO写，会长生SIGPIPE信号。对于没有写着的FIFO读会检查可用数据量，只返回可用数据。另外，对于管道的写(包括匿名管道和FIFO)在一次写入内容小于PIPE_BUF时会保证原子性。因此，在以非阻塞的方式向管道中写小于PIPE_BUF的数据时，倘若空间不够，为了保证原子性则会以错误的形式告诉进程以后再试，不会存在部分写情况。有别于我们习惯理解的非阻塞写。倘若大于PIPE_BUF，这时原子性本就得不到保证，所以进程会写入能容纳的数据。\n\n\n\n### 3. POSIX 消息队列\n\n消息队列可以认为是一个消息链表。有足够写权限的线程可以往队列中放置消息，有足够读权限的线程可以从队列中取走消息。每个消息就是一个<b>记录</b>(有点类似于UDP数据报，有边界)。由发送者赋予优先级。在某个进程往队列中写入消息前，不需要另外某个进程在该队列上等待消息。\n\n消息队列具有<b>内核的持续性</b>，也就是说在不显示删除的情况下，即使当前唯一进程退出后，在后续仍然可以由其他进程读入该队列的消息。\n\n<i>mq_open</i>函数创建一个新的消息队列或打开一个已存在的消息队列。\n\n```c\n#include<mqueue.h>\nmqd_t mq_open(const char *name, int oflag, /*mode_t mode, struct mq_attr *attr */);\n\t\t\t//返回：若成功则为消息队列描述符，若出错则为-1.\n```\n\n已打开的消息队列由<i>mq_close</i>关闭。<b>关闭不等于删除</b>。\n\n```c\n#include<mqueue.h>\nint mq_close(mqd_t mqdes);\n\t\t\t//返回：若成功则为0，若出错则为-1\n```\n\n要从系统中删除用作<i>mq_open</i>第一个参数的某个name，必须调用<i>mq_unlink</i>。\n\n```c\n#include<mqueue.h>\nint mq_unlink(const char *name);\n\t\t\t//返回，若成功则为0，若出错则为-1\n```\n\n正如前面谈到过的引用计数，每个消息队列有一个保存其当前打开着描述符数的引用计数器(有点像文件)，因而本函数能够实现类似于unlink函数删除一个文件的机制：当一个消息队列的引用计数仍大于0时，其name就能删除，但该队列的析构要到最后一个<i>mq_close</i>发生时才进行。\n\n```c\nstruct mq_attr{\n    long mq_flags; /* message queue flag: 0, O_NONBLOCK */\n    long mq_maxmsg; /* max number of messages allowed on queue */\n    long mq_msgsize; /* max size of a message (in bytes) */\n    long mq_curmsgs; /* number of messages currently on queue */\n};\n\n#include<mqueue.h>\nint mq_getattr(mqd_t mqdes, struct mq_attr *attr);\nint mq_setattr(mqd_t mqdes, const struct mq_attr *attr, struct mq_attr *oattr);\n\t\t\t//返回：若成功则为0，若出错则为-1\n```\n\n<i>mq_setattr</i>只能设置<i>mq_flags</i>，其他参数需在创建时指定。\n\n下面两个函数用于放置消息和取走消息。每个消息有个优先级，小于<i>MQ_PRIO_MAX</i>的无符号整数。\n\n```c\n#include<mqueue.h>\nint mq_send(mqd_t mqdts, const char *ptr, size_t len, unsigned int prio);\n\t\t\t//返回：若成功则为0，若出错则为-1\nssize_t mq_receive(mqd_t mqdes, char *ptr, size_t len, unsigned int *priop);\n\t\t\t//返回：若成功则为消息字节数，若出错则为-1\n```\n\n\n\n### 4. POSIX 信号量\n\n<b>信号量</b>是一种用于提供不同进程间或一个给定进程的不同线程间同步手段的原语。POSIX信号量有两种。\n\n- POSIX有名信号量：使用POSIX IPC名字进行标识，可用于进程或线程间的同步。\n- POSIX基于内存的信号量：存放在共享内存区中，可用于进程或线程间的同步。\n\nPOSIX的有名信号量是由可能与文件系统中的路径对应的名字来标识的，但是并不要求它们真正存放在文件系统内的某个文件中。\n\n\n\n函数<i>sem_open</i>创建一个新的有名信号量或打开一个已存在的有名信号量。有名信号量总是既可用于线程间同步，又可用于进程间的同步。\n\n```c\n#include<semaphore.h>\nsem_t *sem_open(const char *name, int oflag, /* mode_t mode, unsigned int value */);\n\t\t\t//返回：若成功则为指向信号量的指针，若出错则为SEM_FAILED\n```\n\n\n\n使用<i>sem_open</i>打开的有名信号量，使用<i>sem_close</i>将其关闭。\n\n```c\n#include<semaphore.h>\nint sem_close(sem_t *sem);\n```\n\n<i>Posix</i>有名信号量是<b>内核持续</b>的，即使当前没有进程打开着某个信号量，它的值仍然保持。\n\n\n\n有名信号量使用<i>sem_unlink</i>从系统中删除。\n\n```c\n#include<semaphore.h>\nint sem_unlink(const char *name);\n\t\t\t//返回：若成功则为0，若出错则为-1\n```\n\n类似于消息队列中的操作，不再赘述。\n\n\n\n<i>sem_wait</i>函数测试所指定信号量的值，如果该值大于0，那就将它减1并立即返回。如果该值等于0，调用线程就被投入睡眠，直到该值变为大于0.\n\n```c\n#include<semaphore.h>\nint sem_wait(sem_t *sem);\nint sem_trywait(sem_t *sem);\n\t\t\t//返回：若成功则为0，若出错则为-1\n```\n\n<i>sem_trywait</i>于<i>sem_wait</i>可以类比为非阻塞read于阻塞read。如果被某个信号中断，<i>sem_wait</i>可能过早返回，返回错误为EINTR。\n\n\n\n当线程使用完某个信号量时，调用<i>sem_post</i>。把指定信号量值加1，然后唤醒正在等待该信号量变为正数的任意线程。\n\n```c\n#include<semaphore.h>\nint sem_post(sem_t *sem);\nint sem_getvalue(sem_t *sem, int *valp);\n\t\t\t//返回：若成功则为0，若出错则为-1\n```\n\n<i>sem_getvalue</i>在由<i>valp</i>指向的整数中返回所指定信号量的当前值。如果该信号量当前已上锁，那么返回值或为0，或为某个负数，其绝对值为等待该信号量解锁的线程数。\n\n\n\n前面提到的是<i>Posix</i>有名信号量。这些信号量由一个name参数标识，它通常指代文件系统中的某个文件。<i>Posix</i>也提供**基于内存**的信号量，它们由应用程序分配信号量的内存空间，然后由系统初始化它们的值。可以这样理解，信号量作为一种控制进程间同步的机制，它需要的是一种全局的环境。这种于所有进程的全局环境可以是文件系统，也可以是进程共享的内存。前者是有名信号量，后者是基于内存信号量。\n\n```c\n#include<semaphore.h>\nint sem_init(sem_t *sem, int shared, unsigned int value);\n\t\t\t//返回：若出错则为-1\nint sem_destroy(sem_t *sem);\n\t\t\t//返回：若成功则为0，若出错则为-1\n```\n\n如果<i>shared</i>为0，那么待初始化的信号量是在同一进程的各个线程间共享的，否则该信号量在进程间共享。基于内存的信号量至少具有随进程的持续性，真正的持续性取决于存放信号量的内存区类型。只要含有某个基于内存信号量的内存区有效，信号量就一直存在。\n\n```\nDestroying a semaphore that other processes or threads are currently blocked on produces undefined behavior.\nUsing a semaphore that has been destroyed produces undefined results, until the semaphore has been reinitialized using sem_init(3).\n```\n\n\n\n<b>补充：</b>生产者与消费者(多个)，其他方式的同步方式，多个缓冲区。\n\n\n\n### 5. 共享内存区\n\n共享内存区是可用IPC形式中最快的。一旦这样的内存区映射到共享它的进程的地址空间。这些进程间数据的传递就不再涉及内核。然而不同于管道、消息队列利用阻塞自带的同步机制，在共享内存区间实现同步就得用到我们前面提到的同步方式。\n\n<i>mmap</i>函数把一个文件或一个<i>Posix</i>共享内存区对象映射到调用进程的地址空间。使用该函数有三个目的：\n\n1. 使用普通文件以提供内存映射I/O；\n2. 使用特殊文件以提供匿名内存映射；\n3. 使用<i>shm_open</i>提供无亲缘关系进程间的<i>Posix</i>共享内存区。\n\n```c\n#include<sys/mman.h>\nvoid *mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset);\n\t\t//返回：若成功则为被映射区的起始地址，若出错则为MAP_FAILED.\n```\n\n<i>len</i>为映射到调用进程地址空间中的字节数。内存映射区的保护由<i>prot</i>指定。\n\n|    prot    |     说明     |\n| :--------: | :----------: |\n| PROT_READ  |   数据可读   |\n| PROT_WRITE |   数据可写   |\n| PROT_EXEC  |  数据可执行  |\n| PROT_NONE  | 数据不可访问 |\n\nflags必须指定MAP_SHARED或MAP_PRIVATE中的一个，可有选择或上MAP_FIXED。如果指定了MAP_PRIVATE，那么调用进程对被映射数据所作修改支队该进程可见，不修改底层支撑对象。(或是一个文件对象，或是一个<b>共享内存区对象</b>)。如果指定了MAP_SHARED，那么调用进程对被映射数据所作的修改对于共享该对象的所有进程都可见，而且确实改变了底层对象。MAP_FIXED说明<i>addr</i>不为空，由自己指定。\n\n\n\n从进程地址空间删除映射关系，调用<i>munmap</i>。\n\n```c\n#include<sys/mman.h>\nint munmap(void *addr, size_t len);\n\t\t\t//返回：若成功则为0，若出错则为-1.\n```\n\n如果映射区使用MAP_PRIVATE标志映射，进程做出的变动都会被丢弃。\n\n\n\n有时候我们希望确信硬盘上的文件内容与内存映射区的内容一致，调用<i>msync</i>来执行这种同步。\n\n```c\n#include<sys/mman.h>\nint msync(void *addr, size_t len, int flags);\n\t\t\t//返回：若成功则为0，若出错则为-1.\n```\n\n<i>addr</i>和<i>len</i>可以为映射内存一个子集。对于flags，MS_ASYNC和MS_SYNC必须指定一个。一旦写操作已由内核排入队列，MS_ASYNC即返回，而MS_SYNC则要等到写操作完成后才返回。\n\nBSD提供<b>匿名内存映射</b>，把flags参数指定成MAP_SHARED | MAP_ANON，把<i>fd</i>指定为-1。offset参数被忽略。\n\n\n\n为了在无亲缘关系进程间共享内存区，有如下方法。\n\n- 内存映射文件。\n\n- 共享内存区对象。\n\n<i>Posix</i>共享内存区涉及以下两个步骤：\n\n1. 指定一个名字参数调用<i>shm_open</i>，创建一个新的共享内存区对象或打开一个已存在的共享内存区对象。\n2. 调用<i>mmap</i>把这个共享内存区映射到调用进程的地址空间。\n\n```c\n#include<sys/mman.h>\nint shm_open(const char *name, int oflag, mode_t mode);\n\t\t\t//返回：若成功则为非负描述符，若出错则为-1.\nint shm_unlink(const char *name);\n\t\t\t//返回：若成功则为0，若出错则为-1.\n```\n\n与<i>mq_open</i>和<i>sem_open</i>函数不同，mode参数必须指定。如果没有指定O_CREATE标志则可以为0。可能是因为对于虚拟内存来讲，段的访问权限是必须的吧。\n\n<i>ftruncate</i>可用于设定共享内存区大小。\n\n```c\n#include<unistd.h>\nint ftruncate(int fd, off_t length);\n\t\t\t//返回：若成功则为0，若出错则为-1.\n\n#include<sys/types.h>\n#include<sys/stat.h>\nint fstat(int fd, struct stat *buf);\n\t\t\t//返回：若成功则为0，若出错则为-1.\n```\n\n","source":"_posts/Unix/2019-04-08-IPC.md","raw":"---\ntitle: IPC\n\ncategories: Unix\n\ntags: [Unix,APUE,IPC]\n\ndata: 2019-04-08\n\n---\n\n# IPC\n\n### 1. 匿名管道\n\n```c\n#include<unistd.h>\nint pipe(int fd[2]);\n\t\t//返回：若成功则为0，若失败返回-1\n```\n\n匿名管道仅能用于存在关系的进程间，并且匿名管道是半双工的，也就是说数据在管道的流动是单向的。当需要两个双向数据流时，必须创建两个管道。并且匿名管道是随进程持续的，也就是说当进程结束时，这种形式的IPC结构便不再存在，这有别于我们后面介绍的其他的IPC结构。\n\n标准I/O函数库提供了<i>popen</i>函数，它创建一个管道并启动另一个进程，该进程要么从该管道读出标准输入，要么往该管道写入标准输入。\n\n```c\n#include<stdio.h>\nFILE *popen(const char *command,const char *type);\n\t\t\t//返回：若成功则为文件指针，若出错则为NULL\nint pclose(FILE *stream);\n\t\t\t//返回：若成功则为shell的终止状态，若出错则为-1\n```\n\n其中<i>command</i>时一个<i>shell</i>命令行。由<i>sh</i>程序处理，因此PATH环境变量可用于定位该<i>command</i>。<i>popen</i>在调用进程和所指定的命令之间创建一个管道。由<i>popen</i>返回的值是一个标准I/O FILE的指针，该指针可理解为对调用进程关心的管道一端。比方说当命令是<i>cat /etc/shadow</i>，type是<i>\"r\"</i>，意味着子进程将执行该命令，并将结果写进管道。对于父进程也就是调用进程来说，它能通过读管道的另一端得到这些结果，而这个所谓的管道另一端就是返回的<i>FILE*</i>.\n\n而<i>pclose</i>则关闭由<i>popen</i>创建的标准I/O流，等待其中命令终止，然后返回shell的最终状态。\n\n后面将会在<i>github</i>上具体实现这两个函数。\n\n### 2. 命名管道(FIFO)\n\n我们可以看到，匿名管道没有名字，因此它们只能用于有一个公共祖先进程的各个进程之间。无法在无亲缘关系的两个进程间创建一个管道。\n\nFIFO指代<b>先进先出</b>，类似于管道，它也是一个单向的数据流。不同于管道的是，每个FIFO有一个路径名相关联，类似于一个文件，从而允许不相关进程访问同一个FIFO。\n\n```c\n#include<sys/types.h>\n#include<sys/stat.h>\n\nint mkfifo(const char *pathname, mode_t mode);\n\t\t\t//返回：若成功则为0，若出错则为-1\n```\n\npathname是普通的Unix路径名，是该FIFO的名字。mode参数指定文件权限位，类似于open的参数。\n\n<i>mkfifo</i>函数已隐含指定<i>O_CREATE|O_EXCL</i>。也就是说要么创建一个新的FIFO，要么返回一个EEXIST错误。\n\n对于FIFO的打开或者读或者写，不能既读又写，因为它是半双工的。对FIFO的写总是往末尾添加数据，对它们的读总是从开头返回数据。对FIFO调用<i>lseek</i>将返回ESPIPE错误。\n\n管道在所有进程最终都关闭它之后自动消失。FIFO的名字则只有通过调用unlink才从文件系统删除。内核为管道和FIFO维护了引用计数器，它是访问同一个描述符的个数。这种引用计数器的存在有一个性质，假设在还存在进程引用该文件时，调用unlink删除该文件，不会对现在还在使用该文件的进程造成影响，对文件的删除将推迟到引用计数器为0的时刻。这有别于System V对于部分IPC方式的处理。\n\n值得注意的是，默认情况下，对于FIFO的读(写)打开会阻塞到有写(读)的打开。倘若对于一个没有读者的FIFO写，会长生SIGPIPE信号。对于没有写着的FIFO读会检查可用数据量，只返回可用数据。另外，对于管道的写(包括匿名管道和FIFO)在一次写入内容小于PIPE_BUF时会保证原子性。因此，在以非阻塞的方式向管道中写小于PIPE_BUF的数据时，倘若空间不够，为了保证原子性则会以错误的形式告诉进程以后再试，不会存在部分写情况。有别于我们习惯理解的非阻塞写。倘若大于PIPE_BUF，这时原子性本就得不到保证，所以进程会写入能容纳的数据。\n\n\n\n### 3. POSIX 消息队列\n\n消息队列可以认为是一个消息链表。有足够写权限的线程可以往队列中放置消息，有足够读权限的线程可以从队列中取走消息。每个消息就是一个<b>记录</b>(有点类似于UDP数据报，有边界)。由发送者赋予优先级。在某个进程往队列中写入消息前，不需要另外某个进程在该队列上等待消息。\n\n消息队列具有<b>内核的持续性</b>，也就是说在不显示删除的情况下，即使当前唯一进程退出后，在后续仍然可以由其他进程读入该队列的消息。\n\n<i>mq_open</i>函数创建一个新的消息队列或打开一个已存在的消息队列。\n\n```c\n#include<mqueue.h>\nmqd_t mq_open(const char *name, int oflag, /*mode_t mode, struct mq_attr *attr */);\n\t\t\t//返回：若成功则为消息队列描述符，若出错则为-1.\n```\n\n已打开的消息队列由<i>mq_close</i>关闭。<b>关闭不等于删除</b>。\n\n```c\n#include<mqueue.h>\nint mq_close(mqd_t mqdes);\n\t\t\t//返回：若成功则为0，若出错则为-1\n```\n\n要从系统中删除用作<i>mq_open</i>第一个参数的某个name，必须调用<i>mq_unlink</i>。\n\n```c\n#include<mqueue.h>\nint mq_unlink(const char *name);\n\t\t\t//返回，若成功则为0，若出错则为-1\n```\n\n正如前面谈到过的引用计数，每个消息队列有一个保存其当前打开着描述符数的引用计数器(有点像文件)，因而本函数能够实现类似于unlink函数删除一个文件的机制：当一个消息队列的引用计数仍大于0时，其name就能删除，但该队列的析构要到最后一个<i>mq_close</i>发生时才进行。\n\n```c\nstruct mq_attr{\n    long mq_flags; /* message queue flag: 0, O_NONBLOCK */\n    long mq_maxmsg; /* max number of messages allowed on queue */\n    long mq_msgsize; /* max size of a message (in bytes) */\n    long mq_curmsgs; /* number of messages currently on queue */\n};\n\n#include<mqueue.h>\nint mq_getattr(mqd_t mqdes, struct mq_attr *attr);\nint mq_setattr(mqd_t mqdes, const struct mq_attr *attr, struct mq_attr *oattr);\n\t\t\t//返回：若成功则为0，若出错则为-1\n```\n\n<i>mq_setattr</i>只能设置<i>mq_flags</i>，其他参数需在创建时指定。\n\n下面两个函数用于放置消息和取走消息。每个消息有个优先级，小于<i>MQ_PRIO_MAX</i>的无符号整数。\n\n```c\n#include<mqueue.h>\nint mq_send(mqd_t mqdts, const char *ptr, size_t len, unsigned int prio);\n\t\t\t//返回：若成功则为0，若出错则为-1\nssize_t mq_receive(mqd_t mqdes, char *ptr, size_t len, unsigned int *priop);\n\t\t\t//返回：若成功则为消息字节数，若出错则为-1\n```\n\n\n\n### 4. POSIX 信号量\n\n<b>信号量</b>是一种用于提供不同进程间或一个给定进程的不同线程间同步手段的原语。POSIX信号量有两种。\n\n- POSIX有名信号量：使用POSIX IPC名字进行标识，可用于进程或线程间的同步。\n- POSIX基于内存的信号量：存放在共享内存区中，可用于进程或线程间的同步。\n\nPOSIX的有名信号量是由可能与文件系统中的路径对应的名字来标识的，但是并不要求它们真正存放在文件系统内的某个文件中。\n\n\n\n函数<i>sem_open</i>创建一个新的有名信号量或打开一个已存在的有名信号量。有名信号量总是既可用于线程间同步，又可用于进程间的同步。\n\n```c\n#include<semaphore.h>\nsem_t *sem_open(const char *name, int oflag, /* mode_t mode, unsigned int value */);\n\t\t\t//返回：若成功则为指向信号量的指针，若出错则为SEM_FAILED\n```\n\n\n\n使用<i>sem_open</i>打开的有名信号量，使用<i>sem_close</i>将其关闭。\n\n```c\n#include<semaphore.h>\nint sem_close(sem_t *sem);\n```\n\n<i>Posix</i>有名信号量是<b>内核持续</b>的，即使当前没有进程打开着某个信号量，它的值仍然保持。\n\n\n\n有名信号量使用<i>sem_unlink</i>从系统中删除。\n\n```c\n#include<semaphore.h>\nint sem_unlink(const char *name);\n\t\t\t//返回：若成功则为0，若出错则为-1\n```\n\n类似于消息队列中的操作，不再赘述。\n\n\n\n<i>sem_wait</i>函数测试所指定信号量的值，如果该值大于0，那就将它减1并立即返回。如果该值等于0，调用线程就被投入睡眠，直到该值变为大于0.\n\n```c\n#include<semaphore.h>\nint sem_wait(sem_t *sem);\nint sem_trywait(sem_t *sem);\n\t\t\t//返回：若成功则为0，若出错则为-1\n```\n\n<i>sem_trywait</i>于<i>sem_wait</i>可以类比为非阻塞read于阻塞read。如果被某个信号中断，<i>sem_wait</i>可能过早返回，返回错误为EINTR。\n\n\n\n当线程使用完某个信号量时，调用<i>sem_post</i>。把指定信号量值加1，然后唤醒正在等待该信号量变为正数的任意线程。\n\n```c\n#include<semaphore.h>\nint sem_post(sem_t *sem);\nint sem_getvalue(sem_t *sem, int *valp);\n\t\t\t//返回：若成功则为0，若出错则为-1\n```\n\n<i>sem_getvalue</i>在由<i>valp</i>指向的整数中返回所指定信号量的当前值。如果该信号量当前已上锁，那么返回值或为0，或为某个负数，其绝对值为等待该信号量解锁的线程数。\n\n\n\n前面提到的是<i>Posix</i>有名信号量。这些信号量由一个name参数标识，它通常指代文件系统中的某个文件。<i>Posix</i>也提供**基于内存**的信号量，它们由应用程序分配信号量的内存空间，然后由系统初始化它们的值。可以这样理解，信号量作为一种控制进程间同步的机制，它需要的是一种全局的环境。这种于所有进程的全局环境可以是文件系统，也可以是进程共享的内存。前者是有名信号量，后者是基于内存信号量。\n\n```c\n#include<semaphore.h>\nint sem_init(sem_t *sem, int shared, unsigned int value);\n\t\t\t//返回：若出错则为-1\nint sem_destroy(sem_t *sem);\n\t\t\t//返回：若成功则为0，若出错则为-1\n```\n\n如果<i>shared</i>为0，那么待初始化的信号量是在同一进程的各个线程间共享的，否则该信号量在进程间共享。基于内存的信号量至少具有随进程的持续性，真正的持续性取决于存放信号量的内存区类型。只要含有某个基于内存信号量的内存区有效，信号量就一直存在。\n\n```\nDestroying a semaphore that other processes or threads are currently blocked on produces undefined behavior.\nUsing a semaphore that has been destroyed produces undefined results, until the semaphore has been reinitialized using sem_init(3).\n```\n\n\n\n<b>补充：</b>生产者与消费者(多个)，其他方式的同步方式，多个缓冲区。\n\n\n\n### 5. 共享内存区\n\n共享内存区是可用IPC形式中最快的。一旦这样的内存区映射到共享它的进程的地址空间。这些进程间数据的传递就不再涉及内核。然而不同于管道、消息队列利用阻塞自带的同步机制，在共享内存区间实现同步就得用到我们前面提到的同步方式。\n\n<i>mmap</i>函数把一个文件或一个<i>Posix</i>共享内存区对象映射到调用进程的地址空间。使用该函数有三个目的：\n\n1. 使用普通文件以提供内存映射I/O；\n2. 使用特殊文件以提供匿名内存映射；\n3. 使用<i>shm_open</i>提供无亲缘关系进程间的<i>Posix</i>共享内存区。\n\n```c\n#include<sys/mman.h>\nvoid *mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset);\n\t\t//返回：若成功则为被映射区的起始地址，若出错则为MAP_FAILED.\n```\n\n<i>len</i>为映射到调用进程地址空间中的字节数。内存映射区的保护由<i>prot</i>指定。\n\n|    prot    |     说明     |\n| :--------: | :----------: |\n| PROT_READ  |   数据可读   |\n| PROT_WRITE |   数据可写   |\n| PROT_EXEC  |  数据可执行  |\n| PROT_NONE  | 数据不可访问 |\n\nflags必须指定MAP_SHARED或MAP_PRIVATE中的一个，可有选择或上MAP_FIXED。如果指定了MAP_PRIVATE，那么调用进程对被映射数据所作修改支队该进程可见，不修改底层支撑对象。(或是一个文件对象，或是一个<b>共享内存区对象</b>)。如果指定了MAP_SHARED，那么调用进程对被映射数据所作的修改对于共享该对象的所有进程都可见，而且确实改变了底层对象。MAP_FIXED说明<i>addr</i>不为空，由自己指定。\n\n\n\n从进程地址空间删除映射关系，调用<i>munmap</i>。\n\n```c\n#include<sys/mman.h>\nint munmap(void *addr, size_t len);\n\t\t\t//返回：若成功则为0，若出错则为-1.\n```\n\n如果映射区使用MAP_PRIVATE标志映射，进程做出的变动都会被丢弃。\n\n\n\n有时候我们希望确信硬盘上的文件内容与内存映射区的内容一致，调用<i>msync</i>来执行这种同步。\n\n```c\n#include<sys/mman.h>\nint msync(void *addr, size_t len, int flags);\n\t\t\t//返回：若成功则为0，若出错则为-1.\n```\n\n<i>addr</i>和<i>len</i>可以为映射内存一个子集。对于flags，MS_ASYNC和MS_SYNC必须指定一个。一旦写操作已由内核排入队列，MS_ASYNC即返回，而MS_SYNC则要等到写操作完成后才返回。\n\nBSD提供<b>匿名内存映射</b>，把flags参数指定成MAP_SHARED | MAP_ANON，把<i>fd</i>指定为-1。offset参数被忽略。\n\n\n\n为了在无亲缘关系进程间共享内存区，有如下方法。\n\n- 内存映射文件。\n\n- 共享内存区对象。\n\n<i>Posix</i>共享内存区涉及以下两个步骤：\n\n1. 指定一个名字参数调用<i>shm_open</i>，创建一个新的共享内存区对象或打开一个已存在的共享内存区对象。\n2. 调用<i>mmap</i>把这个共享内存区映射到调用进程的地址空间。\n\n```c\n#include<sys/mman.h>\nint shm_open(const char *name, int oflag, mode_t mode);\n\t\t\t//返回：若成功则为非负描述符，若出错则为-1.\nint shm_unlink(const char *name);\n\t\t\t//返回：若成功则为0，若出错则为-1.\n```\n\n与<i>mq_open</i>和<i>sem_open</i>函数不同，mode参数必须指定。如果没有指定O_CREATE标志则可以为0。可能是因为对于虚拟内存来讲，段的访问权限是必须的吧。\n\n<i>ftruncate</i>可用于设定共享内存区大小。\n\n```c\n#include<unistd.h>\nint ftruncate(int fd, off_t length);\n\t\t\t//返回：若成功则为0，若出错则为-1.\n\n#include<sys/types.h>\n#include<sys/stat.h>\nint fstat(int fd, struct stat *buf);\n\t\t\t//返回：若成功则为0，若出错则为-1.\n```\n\n","slug":"Unix/2019-04-08-IPC","published":1,"date":"2019-04-08T01:57:32.024Z","updated":"2019-04-08T02:49:33.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdlcry8000oeguhnsau4ujz","content":"<h1 id=\"IPC\"><a href=\"#IPC\" class=\"headerlink\" title=\"IPC\"></a>IPC</h1><h3 id=\"1-匿名管道\"><a href=\"#1-匿名管道\" class=\"headerlink\" title=\"1. 匿名管道\"></a>1. 匿名管道</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pipe</span><span class=\"params\">(<span class=\"keyword\">int</span> fd[<span class=\"number\">2</span>])</span></span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回：若成功则为0，若失败返回-1</span></span><br></pre></td></tr></table></figure>\n<p>匿名管道仅能用于存在关系的进程间，并且匿名管道是半双工的，也就是说数据在管道的流动是单向的。当需要两个双向数据流时，必须创建两个管道。并且匿名管道是随进程持续的，也就是说当进程结束时，这种形式的IPC结构便不再存在，这有别于我们后面介绍的其他的IPC结构。</p>\n<p>标准I/O函数库提供了<i>popen</i>函数，它创建一个管道并启动另一个进程，该进程要么从该管道读出标准输入，要么往该管道写入标准输入。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\">FILE *<span class=\"title\">popen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *command,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *type)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为文件指针，若出错则为NULL</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pclose</span><span class=\"params\">(FILE *stream)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为shell的终止状态，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p>其中<i>command</i>时一个<i>shell</i>命令行。由<i>sh</i>程序处理，因此PATH环境变量可用于定位该<i>command</i>。<i>popen</i>在调用进程和所指定的命令之间创建一个管道。由<i>popen</i>返回的值是一个标准I/O FILE的指针，该指针可理解为对调用进程关心的管道一端。比方说当命令是<i>cat /etc/shadow</i>，type是<i>“r”</i>，意味着子进程将执行该命令，并将结果写进管道。对于父进程也就是调用进程来说，它能通过读管道的另一端得到这些结果，而这个所谓的管道另一端就是返回的<i>FILE*</i>.</p>\n<p>而<i>pclose</i>则关闭由<i>popen</i>创建的标准I/O流，等待其中命令终止，然后返回shell的最终状态。</p>\n<p>后面将会在<i>github</i>上具体实现这两个函数。</p>\n<h3 id=\"2-命名管道-FIFO\"><a href=\"#2-命名管道-FIFO\" class=\"headerlink\" title=\"2. 命名管道(FIFO)\"></a>2. 命名管道(FIFO)</h3><p>我们可以看到，匿名管道没有名字，因此它们只能用于有一个公共祖先进程的各个进程之间。无法在无亲缘关系的两个进程间创建一个管道。</p>\n<p>FIFO指代<b>先进先出</b>，类似于管道，它也是一个单向的数据流。不同于管道的是，每个FIFO有一个路径名相关联，类似于一个文件，从而允许不相关进程访问同一个FIFO。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mkfifo</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *pathname, <span class=\"keyword\">mode_t</span> mode)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p>pathname是普通的Unix路径名，是该FIFO的名字。mode参数指定文件权限位，类似于open的参数。</p>\n<p><i>mkfifo</i>函数已隐含指定<i>O_CREATE|O_EXCL</i>。也就是说要么创建一个新的FIFO，要么返回一个EEXIST错误。</p>\n<p>对于FIFO的打开或者读或者写，不能既读又写，因为它是半双工的。对FIFO的写总是往末尾添加数据，对它们的读总是从开头返回数据。对FIFO调用<i>lseek</i>将返回ESPIPE错误。</p>\n<p>管道在所有进程最终都关闭它之后自动消失。FIFO的名字则只有通过调用unlink才从文件系统删除。内核为管道和FIFO维护了引用计数器，它是访问同一个描述符的个数。这种引用计数器的存在有一个性质，假设在还存在进程引用该文件时，调用unlink删除该文件，不会对现在还在使用该文件的进程造成影响，对文件的删除将推迟到引用计数器为0的时刻。这有别于System V对于部分IPC方式的处理。</p>\n<p>值得注意的是，默认情况下，对于FIFO的读(写)打开会阻塞到有写(读)的打开。倘若对于一个没有读者的FIFO写，会长生SIGPIPE信号。对于没有写着的FIFO读会检查可用数据量，只返回可用数据。另外，对于管道的写(包括匿名管道和FIFO)在一次写入内容小于PIPE_BUF时会保证原子性。因此，在以非阻塞的方式向管道中写小于PIPE_BUF的数据时，倘若空间不够，为了保证原子性则会以错误的形式告诉进程以后再试，不会存在部分写情况。有别于我们习惯理解的非阻塞写。倘若大于PIPE_BUF，这时原子性本就得不到保证，所以进程会写入能容纳的数据。</p>\n<h3 id=\"3-POSIX-消息队列\"><a href=\"#3-POSIX-消息队列\" class=\"headerlink\" title=\"3. POSIX 消息队列\"></a>3. POSIX 消息队列</h3><p>消息队列可以认为是一个消息链表。有足够写权限的线程可以往队列中放置消息，有足够读权限的线程可以从队列中取走消息。每个消息就是一个<b>记录</b>(有点类似于UDP数据报，有边界)。由发送者赋予优先级。在某个进程往队列中写入消息前，不需要另外某个进程在该队列上等待消息。</p>\n<p>消息队列具有<b>内核的持续性</b>，也就是说在不显示删除的情况下，即使当前唯一进程退出后，在后续仍然可以由其他进程读入该队列的消息。</p>\n<p><i>mq_open</i>函数创建一个新的消息队列或打开一个已存在的消息队列。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;mqueue.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">mqd_t</span> mq_open(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">int</span> oflag, <span class=\"comment\">/*mode_t mode, struct mq_attr *attr */</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为消息队列描述符，若出错则为-1.</span></span><br></pre></td></tr></table></figure>\n<p>已打开的消息队列由<i>mq_close</i>关闭。<b>关闭不等于删除</b>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;mqueue.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mq_close</span><span class=\"params\">(<span class=\"keyword\">mqd_t</span> mqdes)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p>要从系统中删除用作<i>mq_open</i>第一个参数的某个name，必须调用<i>mq_unlink</i>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;mqueue.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mq_unlink</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回，若成功则为0，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p>正如前面谈到过的引用计数，每个消息队列有一个保存其当前打开着描述符数的引用计数器(有点像文件)，因而本函数能够实现类似于unlink函数删除一个文件的机制：当一个消息队列的引用计数仍大于0时，其name就能删除，但该队列的析构要到最后一个<i>mq_close</i>发生时才进行。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mq_attr</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> mq_flags; <span class=\"comment\">/* message queue flag: 0, O_NONBLOCK */</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> mq_maxmsg; <span class=\"comment\">/* max number of messages allowed on queue */</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> mq_msgsize; <span class=\"comment\">/* max size of a message (in bytes) */</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> mq_curmsgs; <span class=\"comment\">/* number of messages currently on queue */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;mqueue.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mq_getattr</span><span class=\"params\">(<span class=\"keyword\">mqd_t</span> mqdes, struct mq_attr *attr)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mq_setattr</span><span class=\"params\">(<span class=\"keyword\">mqd_t</span> mqdes, <span class=\"keyword\">const</span> struct mq_attr *attr, struct mq_attr *oattr)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p><i>mq_setattr</i>只能设置<i>mq_flags</i>，其他参数需在创建时指定。</p>\n<p>下面两个函数用于放置消息和取走消息。每个消息有个优先级，小于<i>MQ_PRIO_MAX</i>的无符号整数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;mqueue.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mq_send</span><span class=\"params\">(<span class=\"keyword\">mqd_t</span> mqdts, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ptr, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> prio)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1</span></span><br><span class=\"line\"><span class=\"keyword\">ssize_t</span> mq_receive(<span class=\"keyword\">mqd_t</span> mqdes, <span class=\"keyword\">char</span> *ptr, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *priop);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为消息字节数，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-POSIX-信号量\"><a href=\"#4-POSIX-信号量\" class=\"headerlink\" title=\"4. POSIX 信号量\"></a>4. POSIX 信号量</h3><p><b>信号量</b>是一种用于提供不同进程间或一个给定进程的不同线程间同步手段的原语。POSIX信号量有两种。</p>\n<ul>\n<li>POSIX有名信号量：使用POSIX IPC名字进行标识，可用于进程或线程间的同步。</li>\n<li>POSIX基于内存的信号量：存放在共享内存区中，可用于进程或线程间的同步。</li>\n</ul>\n<p>POSIX的有名信号量是由可能与文件系统中的路径对应的名字来标识的，但是并不要求它们真正存放在文件系统内的某个文件中。</p>\n<p>函数<i>sem_open</i>创建一个新的有名信号量或打开一个已存在的有名信号量。有名信号量总是既可用于线程间同步，又可用于进程间的同步。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">sem_t</span> *sem_open(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">int</span> oflag, <span class=\"comment\">/* mode_t mode, unsigned int value */</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为指向信号量的指针，若出错则为SEM_FAILED</span></span><br></pre></td></tr></table></figure>\n<p>使用<i>sem_open</i>打开的有名信号量，使用<i>sem_close</i>将其关闭。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sem_close</span><span class=\"params\">(<span class=\"keyword\">sem_t</span> *sem)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><i>Posix</i>有名信号量是<b>内核持续</b>的，即使当前没有进程打开着某个信号量，它的值仍然保持。</p>\n<p>有名信号量使用<i>sem_unlink</i>从系统中删除。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sem_unlink</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p>类似于消息队列中的操作，不再赘述。</p>\n<p><i>sem_wait</i>函数测试所指定信号量的值，如果该值大于0，那就将它减1并立即返回。如果该值等于0，调用线程就被投入睡眠，直到该值变为大于0.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sem_wait</span><span class=\"params\">(<span class=\"keyword\">sem_t</span> *sem)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sem_trywait</span><span class=\"params\">(<span class=\"keyword\">sem_t</span> *sem)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p><i>sem_trywait</i>于<i>sem_wait</i>可以类比为非阻塞read于阻塞read。如果被某个信号中断，<i>sem_wait</i>可能过早返回，返回错误为EINTR。</p>\n<p>当线程使用完某个信号量时，调用<i>sem_post</i>。把指定信号量值加1，然后唤醒正在等待该信号量变为正数的任意线程。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sem_post</span><span class=\"params\">(<span class=\"keyword\">sem_t</span> *sem)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sem_getvalue</span><span class=\"params\">(<span class=\"keyword\">sem_t</span> *sem, <span class=\"keyword\">int</span> *valp)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p><i>sem_getvalue</i>在由<i>valp</i>指向的整数中返回所指定信号量的当前值。如果该信号量当前已上锁，那么返回值或为0，或为某个负数，其绝对值为等待该信号量解锁的线程数。</p>\n<p>前面提到的是<i>Posix</i>有名信号量。这些信号量由一个name参数标识，它通常指代文件系统中的某个文件。<i>Posix</i>也提供<strong>基于内存</strong>的信号量，它们由应用程序分配信号量的内存空间，然后由系统初始化它们的值。可以这样理解，信号量作为一种控制进程间同步的机制，它需要的是一种全局的环境。这种于所有进程的全局环境可以是文件系统，也可以是进程共享的内存。前者是有名信号量，后者是基于内存信号量。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sem_init</span><span class=\"params\">(<span class=\"keyword\">sem_t</span> *sem, <span class=\"keyword\">int</span> shared, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> value)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若出错则为-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sem_destroy</span><span class=\"params\">(<span class=\"keyword\">sem_t</span> *sem)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p>如果<i>shared</i>为0，那么待初始化的信号量是在同一进程的各个线程间共享的，否则该信号量在进程间共享。基于内存的信号量至少具有随进程的持续性，真正的持续性取决于存放信号量的内存区类型。只要含有某个基于内存信号量的内存区有效，信号量就一直存在。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Destroying a semaphore that other processes or threads are currently blocked on produces undefined behavior.</span><br><span class=\"line\">Using a semaphore that has been destroyed produces undefined results, until the semaphore has been reinitialized using sem_init(3).</span><br></pre></td></tr></table></figure>\n<p><b>补充：</b>生产者与消费者(多个)，其他方式的同步方式，多个缓冲区。</p>\n<h3 id=\"5-共享内存区\"><a href=\"#5-共享内存区\" class=\"headerlink\" title=\"5. 共享内存区\"></a>5. 共享内存区</h3><p>共享内存区是可用IPC形式中最快的。一旦这样的内存区映射到共享它的进程的地址空间。这些进程间数据的传递就不再涉及内核。然而不同于管道、消息队列利用阻塞自带的同步机制，在共享内存区间实现同步就得用到我们前面提到的同步方式。</p>\n<p><i>mmap</i>函数把一个文件或一个<i>Posix</i>共享内存区对象映射到调用进程的地址空间。使用该函数有三个目的：</p>\n<ol>\n<li>使用普通文件以提供内存映射I/O；</li>\n<li>使用特殊文件以提供匿名内存映射；</li>\n<li>使用<i>shm_open</i>提供无亲缘关系进程间的<i>Posix</i>共享内存区。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">mmap</span><span class=\"params\">(<span class=\"keyword\">void</span> *addr, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">int</span> prot, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> fd, <span class=\"keyword\">off_t</span> offset)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回：若成功则为被映射区的起始地址，若出错则为MAP_FAILED.</span></span><br></pre></td></tr></table></figure>\n<p><i>len</i>为映射到调用进程地址空间中的字节数。内存映射区的保护由<i>prot</i>指定。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">prot</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">PROT_READ</td>\n<td style=\"text-align:center\">数据可读</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PROT_WRITE</td>\n<td style=\"text-align:center\">数据可写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PROT_EXEC</td>\n<td style=\"text-align:center\">数据可执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PROT_NONE</td>\n<td style=\"text-align:center\">数据不可访问</td>\n</tr>\n</tbody>\n</table>\n<p>flags必须指定MAP_SHARED或MAP_PRIVATE中的一个，可有选择或上MAP_FIXED。如果指定了MAP_PRIVATE，那么调用进程对被映射数据所作修改支队该进程可见，不修改底层支撑对象。(或是一个文件对象，或是一个<b>共享内存区对象</b>)。如果指定了MAP_SHARED，那么调用进程对被映射数据所作的修改对于共享该对象的所有进程都可见，而且确实改变了底层对象。MAP_FIXED说明<i>addr</i>不为空，由自己指定。</p>\n<p>从进程地址空间删除映射关系，调用<i>munmap</i>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">munmap</span><span class=\"params\">(<span class=\"keyword\">void</span> *addr, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1.</span></span><br></pre></td></tr></table></figure>\n<p>如果映射区使用MAP_PRIVATE标志映射，进程做出的变动都会被丢弃。</p>\n<p>有时候我们希望确信硬盘上的文件内容与内存映射区的内容一致，调用<i>msync</i>来执行这种同步。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">msync</span><span class=\"params\">(<span class=\"keyword\">void</span> *addr, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">int</span> flags)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1.</span></span><br></pre></td></tr></table></figure>\n<p><i>addr</i>和<i>len</i>可以为映射内存一个子集。对于flags，MS_ASYNC和MS_SYNC必须指定一个。一旦写操作已由内核排入队列，MS_ASYNC即返回，而MS_SYNC则要等到写操作完成后才返回。</p>\n<p>BSD提供<b>匿名内存映射</b>，把flags参数指定成MAP_SHARED | MAP_ANON，把<i>fd</i>指定为-1。offset参数被忽略。</p>\n<p>为了在无亲缘关系进程间共享内存区，有如下方法。</p>\n<ul>\n<li><p>内存映射文件。</p>\n</li>\n<li><p>共享内存区对象。</p>\n</li>\n</ul>\n<p><i>Posix</i>共享内存区涉及以下两个步骤：</p>\n<ol>\n<li>指定一个名字参数调用<i>shm_open</i>，创建一个新的共享内存区对象或打开一个已存在的共享内存区对象。</li>\n<li>调用<i>mmap</i>把这个共享内存区映射到调用进程的地址空间。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shm_open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">int</span> oflag, <span class=\"keyword\">mode_t</span> mode)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为非负描述符，若出错则为-1.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shm_unlink</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1.</span></span><br></pre></td></tr></table></figure>\n<p>与<i>mq_open</i>和<i>sem_open</i>函数不同，mode参数必须指定。如果没有指定O_CREATE标志则可以为0。可能是因为对于虚拟内存来讲，段的访问权限是必须的吧。</p>\n<p><i>ftruncate</i>可用于设定共享内存区大小。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ftruncate</span><span class=\"params\">(<span class=\"keyword\">int</span> fd, <span class=\"keyword\">off_t</span> length)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fstat</span><span class=\"params\">(<span class=\"keyword\">int</span> fd, struct stat *buf)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1.</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"IPC\"><a href=\"#IPC\" class=\"headerlink\" title=\"IPC\"></a>IPC</h1><h3 id=\"1-匿名管道\"><a href=\"#1-匿名管道\" class=\"headerlink\" title=\"1. 匿名管道\"></a>1. 匿名管道</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pipe</span><span class=\"params\">(<span class=\"keyword\">int</span> fd[<span class=\"number\">2</span>])</span></span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回：若成功则为0，若失败返回-1</span></span><br></pre></td></tr></table></figure>\n<p>匿名管道仅能用于存在关系的进程间，并且匿名管道是半双工的，也就是说数据在管道的流动是单向的。当需要两个双向数据流时，必须创建两个管道。并且匿名管道是随进程持续的，也就是说当进程结束时，这种形式的IPC结构便不再存在，这有别于我们后面介绍的其他的IPC结构。</p>\n<p>标准I/O函数库提供了<i>popen</i>函数，它创建一个管道并启动另一个进程，该进程要么从该管道读出标准输入，要么往该管道写入标准输入。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\">FILE *<span class=\"title\">popen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *command,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *type)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为文件指针，若出错则为NULL</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pclose</span><span class=\"params\">(FILE *stream)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为shell的终止状态，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p>其中<i>command</i>时一个<i>shell</i>命令行。由<i>sh</i>程序处理，因此PATH环境变量可用于定位该<i>command</i>。<i>popen</i>在调用进程和所指定的命令之间创建一个管道。由<i>popen</i>返回的值是一个标准I/O FILE的指针，该指针可理解为对调用进程关心的管道一端。比方说当命令是<i>cat /etc/shadow</i>，type是<i>“r”</i>，意味着子进程将执行该命令，并将结果写进管道。对于父进程也就是调用进程来说，它能通过读管道的另一端得到这些结果，而这个所谓的管道另一端就是返回的<i>FILE*</i>.</p>\n<p>而<i>pclose</i>则关闭由<i>popen</i>创建的标准I/O流，等待其中命令终止，然后返回shell的最终状态。</p>\n<p>后面将会在<i>github</i>上具体实现这两个函数。</p>\n<h3 id=\"2-命名管道-FIFO\"><a href=\"#2-命名管道-FIFO\" class=\"headerlink\" title=\"2. 命名管道(FIFO)\"></a>2. 命名管道(FIFO)</h3><p>我们可以看到，匿名管道没有名字，因此它们只能用于有一个公共祖先进程的各个进程之间。无法在无亲缘关系的两个进程间创建一个管道。</p>\n<p>FIFO指代<b>先进先出</b>，类似于管道，它也是一个单向的数据流。不同于管道的是，每个FIFO有一个路径名相关联，类似于一个文件，从而允许不相关进程访问同一个FIFO。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mkfifo</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *pathname, <span class=\"keyword\">mode_t</span> mode)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p>pathname是普通的Unix路径名，是该FIFO的名字。mode参数指定文件权限位，类似于open的参数。</p>\n<p><i>mkfifo</i>函数已隐含指定<i>O_CREATE|O_EXCL</i>。也就是说要么创建一个新的FIFO，要么返回一个EEXIST错误。</p>\n<p>对于FIFO的打开或者读或者写，不能既读又写，因为它是半双工的。对FIFO的写总是往末尾添加数据，对它们的读总是从开头返回数据。对FIFO调用<i>lseek</i>将返回ESPIPE错误。</p>\n<p>管道在所有进程最终都关闭它之后自动消失。FIFO的名字则只有通过调用unlink才从文件系统删除。内核为管道和FIFO维护了引用计数器，它是访问同一个描述符的个数。这种引用计数器的存在有一个性质，假设在还存在进程引用该文件时，调用unlink删除该文件，不会对现在还在使用该文件的进程造成影响，对文件的删除将推迟到引用计数器为0的时刻。这有别于System V对于部分IPC方式的处理。</p>\n<p>值得注意的是，默认情况下，对于FIFO的读(写)打开会阻塞到有写(读)的打开。倘若对于一个没有读者的FIFO写，会长生SIGPIPE信号。对于没有写着的FIFO读会检查可用数据量，只返回可用数据。另外，对于管道的写(包括匿名管道和FIFO)在一次写入内容小于PIPE_BUF时会保证原子性。因此，在以非阻塞的方式向管道中写小于PIPE_BUF的数据时，倘若空间不够，为了保证原子性则会以错误的形式告诉进程以后再试，不会存在部分写情况。有别于我们习惯理解的非阻塞写。倘若大于PIPE_BUF，这时原子性本就得不到保证，所以进程会写入能容纳的数据。</p>\n<h3 id=\"3-POSIX-消息队列\"><a href=\"#3-POSIX-消息队列\" class=\"headerlink\" title=\"3. POSIX 消息队列\"></a>3. POSIX 消息队列</h3><p>消息队列可以认为是一个消息链表。有足够写权限的线程可以往队列中放置消息，有足够读权限的线程可以从队列中取走消息。每个消息就是一个<b>记录</b>(有点类似于UDP数据报，有边界)。由发送者赋予优先级。在某个进程往队列中写入消息前，不需要另外某个进程在该队列上等待消息。</p>\n<p>消息队列具有<b>内核的持续性</b>，也就是说在不显示删除的情况下，即使当前唯一进程退出后，在后续仍然可以由其他进程读入该队列的消息。</p>\n<p><i>mq_open</i>函数创建一个新的消息队列或打开一个已存在的消息队列。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;mqueue.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">mqd_t</span> mq_open(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">int</span> oflag, <span class=\"comment\">/*mode_t mode, struct mq_attr *attr */</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为消息队列描述符，若出错则为-1.</span></span><br></pre></td></tr></table></figure>\n<p>已打开的消息队列由<i>mq_close</i>关闭。<b>关闭不等于删除</b>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;mqueue.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mq_close</span><span class=\"params\">(<span class=\"keyword\">mqd_t</span> mqdes)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p>要从系统中删除用作<i>mq_open</i>第一个参数的某个name，必须调用<i>mq_unlink</i>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;mqueue.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mq_unlink</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回，若成功则为0，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p>正如前面谈到过的引用计数，每个消息队列有一个保存其当前打开着描述符数的引用计数器(有点像文件)，因而本函数能够实现类似于unlink函数删除一个文件的机制：当一个消息队列的引用计数仍大于0时，其name就能删除，但该队列的析构要到最后一个<i>mq_close</i>发生时才进行。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mq_attr</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> mq_flags; <span class=\"comment\">/* message queue flag: 0, O_NONBLOCK */</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> mq_maxmsg; <span class=\"comment\">/* max number of messages allowed on queue */</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> mq_msgsize; <span class=\"comment\">/* max size of a message (in bytes) */</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> mq_curmsgs; <span class=\"comment\">/* number of messages currently on queue */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;mqueue.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mq_getattr</span><span class=\"params\">(<span class=\"keyword\">mqd_t</span> mqdes, struct mq_attr *attr)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mq_setattr</span><span class=\"params\">(<span class=\"keyword\">mqd_t</span> mqdes, <span class=\"keyword\">const</span> struct mq_attr *attr, struct mq_attr *oattr)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p><i>mq_setattr</i>只能设置<i>mq_flags</i>，其他参数需在创建时指定。</p>\n<p>下面两个函数用于放置消息和取走消息。每个消息有个优先级，小于<i>MQ_PRIO_MAX</i>的无符号整数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;mqueue.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mq_send</span><span class=\"params\">(<span class=\"keyword\">mqd_t</span> mqdts, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ptr, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> prio)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1</span></span><br><span class=\"line\"><span class=\"keyword\">ssize_t</span> mq_receive(<span class=\"keyword\">mqd_t</span> mqdes, <span class=\"keyword\">char</span> *ptr, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *priop);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为消息字节数，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-POSIX-信号量\"><a href=\"#4-POSIX-信号量\" class=\"headerlink\" title=\"4. POSIX 信号量\"></a>4. POSIX 信号量</h3><p><b>信号量</b>是一种用于提供不同进程间或一个给定进程的不同线程间同步手段的原语。POSIX信号量有两种。</p>\n<ul>\n<li>POSIX有名信号量：使用POSIX IPC名字进行标识，可用于进程或线程间的同步。</li>\n<li>POSIX基于内存的信号量：存放在共享内存区中，可用于进程或线程间的同步。</li>\n</ul>\n<p>POSIX的有名信号量是由可能与文件系统中的路径对应的名字来标识的，但是并不要求它们真正存放在文件系统内的某个文件中。</p>\n<p>函数<i>sem_open</i>创建一个新的有名信号量或打开一个已存在的有名信号量。有名信号量总是既可用于线程间同步，又可用于进程间的同步。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">sem_t</span> *sem_open(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">int</span> oflag, <span class=\"comment\">/* mode_t mode, unsigned int value */</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为指向信号量的指针，若出错则为SEM_FAILED</span></span><br></pre></td></tr></table></figure>\n<p>使用<i>sem_open</i>打开的有名信号量，使用<i>sem_close</i>将其关闭。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sem_close</span><span class=\"params\">(<span class=\"keyword\">sem_t</span> *sem)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><i>Posix</i>有名信号量是<b>内核持续</b>的，即使当前没有进程打开着某个信号量，它的值仍然保持。</p>\n<p>有名信号量使用<i>sem_unlink</i>从系统中删除。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sem_unlink</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p>类似于消息队列中的操作，不再赘述。</p>\n<p><i>sem_wait</i>函数测试所指定信号量的值，如果该值大于0，那就将它减1并立即返回。如果该值等于0，调用线程就被投入睡眠，直到该值变为大于0.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sem_wait</span><span class=\"params\">(<span class=\"keyword\">sem_t</span> *sem)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sem_trywait</span><span class=\"params\">(<span class=\"keyword\">sem_t</span> *sem)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p><i>sem_trywait</i>于<i>sem_wait</i>可以类比为非阻塞read于阻塞read。如果被某个信号中断，<i>sem_wait</i>可能过早返回，返回错误为EINTR。</p>\n<p>当线程使用完某个信号量时，调用<i>sem_post</i>。把指定信号量值加1，然后唤醒正在等待该信号量变为正数的任意线程。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sem_post</span><span class=\"params\">(<span class=\"keyword\">sem_t</span> *sem)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sem_getvalue</span><span class=\"params\">(<span class=\"keyword\">sem_t</span> *sem, <span class=\"keyword\">int</span> *valp)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p><i>sem_getvalue</i>在由<i>valp</i>指向的整数中返回所指定信号量的当前值。如果该信号量当前已上锁，那么返回值或为0，或为某个负数，其绝对值为等待该信号量解锁的线程数。</p>\n<p>前面提到的是<i>Posix</i>有名信号量。这些信号量由一个name参数标识，它通常指代文件系统中的某个文件。<i>Posix</i>也提供<strong>基于内存</strong>的信号量，它们由应用程序分配信号量的内存空间，然后由系统初始化它们的值。可以这样理解，信号量作为一种控制进程间同步的机制，它需要的是一种全局的环境。这种于所有进程的全局环境可以是文件系统，也可以是进程共享的内存。前者是有名信号量，后者是基于内存信号量。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sem_init</span><span class=\"params\">(<span class=\"keyword\">sem_t</span> *sem, <span class=\"keyword\">int</span> shared, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> value)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若出错则为-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sem_destroy</span><span class=\"params\">(<span class=\"keyword\">sem_t</span> *sem)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1</span></span><br></pre></td></tr></table></figure>\n<p>如果<i>shared</i>为0，那么待初始化的信号量是在同一进程的各个线程间共享的，否则该信号量在进程间共享。基于内存的信号量至少具有随进程的持续性，真正的持续性取决于存放信号量的内存区类型。只要含有某个基于内存信号量的内存区有效，信号量就一直存在。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Destroying a semaphore that other processes or threads are currently blocked on produces undefined behavior.</span><br><span class=\"line\">Using a semaphore that has been destroyed produces undefined results, until the semaphore has been reinitialized using sem_init(3).</span><br></pre></td></tr></table></figure>\n<p><b>补充：</b>生产者与消费者(多个)，其他方式的同步方式，多个缓冲区。</p>\n<h3 id=\"5-共享内存区\"><a href=\"#5-共享内存区\" class=\"headerlink\" title=\"5. 共享内存区\"></a>5. 共享内存区</h3><p>共享内存区是可用IPC形式中最快的。一旦这样的内存区映射到共享它的进程的地址空间。这些进程间数据的传递就不再涉及内核。然而不同于管道、消息队列利用阻塞自带的同步机制，在共享内存区间实现同步就得用到我们前面提到的同步方式。</p>\n<p><i>mmap</i>函数把一个文件或一个<i>Posix</i>共享内存区对象映射到调用进程的地址空间。使用该函数有三个目的：</p>\n<ol>\n<li>使用普通文件以提供内存映射I/O；</li>\n<li>使用特殊文件以提供匿名内存映射；</li>\n<li>使用<i>shm_open</i>提供无亲缘关系进程间的<i>Posix</i>共享内存区。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">mmap</span><span class=\"params\">(<span class=\"keyword\">void</span> *addr, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">int</span> prot, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> fd, <span class=\"keyword\">off_t</span> offset)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回：若成功则为被映射区的起始地址，若出错则为MAP_FAILED.</span></span><br></pre></td></tr></table></figure>\n<p><i>len</i>为映射到调用进程地址空间中的字节数。内存映射区的保护由<i>prot</i>指定。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">prot</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">PROT_READ</td>\n<td style=\"text-align:center\">数据可读</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PROT_WRITE</td>\n<td style=\"text-align:center\">数据可写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PROT_EXEC</td>\n<td style=\"text-align:center\">数据可执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PROT_NONE</td>\n<td style=\"text-align:center\">数据不可访问</td>\n</tr>\n</tbody>\n</table>\n<p>flags必须指定MAP_SHARED或MAP_PRIVATE中的一个，可有选择或上MAP_FIXED。如果指定了MAP_PRIVATE，那么调用进程对被映射数据所作修改支队该进程可见，不修改底层支撑对象。(或是一个文件对象，或是一个<b>共享内存区对象</b>)。如果指定了MAP_SHARED，那么调用进程对被映射数据所作的修改对于共享该对象的所有进程都可见，而且确实改变了底层对象。MAP_FIXED说明<i>addr</i>不为空，由自己指定。</p>\n<p>从进程地址空间删除映射关系，调用<i>munmap</i>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">munmap</span><span class=\"params\">(<span class=\"keyword\">void</span> *addr, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1.</span></span><br></pre></td></tr></table></figure>\n<p>如果映射区使用MAP_PRIVATE标志映射，进程做出的变动都会被丢弃。</p>\n<p>有时候我们希望确信硬盘上的文件内容与内存映射区的内容一致，调用<i>msync</i>来执行这种同步。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">msync</span><span class=\"params\">(<span class=\"keyword\">void</span> *addr, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">int</span> flags)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1.</span></span><br></pre></td></tr></table></figure>\n<p><i>addr</i>和<i>len</i>可以为映射内存一个子集。对于flags，MS_ASYNC和MS_SYNC必须指定一个。一旦写操作已由内核排入队列，MS_ASYNC即返回，而MS_SYNC则要等到写操作完成后才返回。</p>\n<p>BSD提供<b>匿名内存映射</b>，把flags参数指定成MAP_SHARED | MAP_ANON，把<i>fd</i>指定为-1。offset参数被忽略。</p>\n<p>为了在无亲缘关系进程间共享内存区，有如下方法。</p>\n<ul>\n<li><p>内存映射文件。</p>\n</li>\n<li><p>共享内存区对象。</p>\n</li>\n</ul>\n<p><i>Posix</i>共享内存区涉及以下两个步骤：</p>\n<ol>\n<li>指定一个名字参数调用<i>shm_open</i>，创建一个新的共享内存区对象或打开一个已存在的共享内存区对象。</li>\n<li>调用<i>mmap</i>把这个共享内存区映射到调用进程的地址空间。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shm_open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">int</span> oflag, <span class=\"keyword\">mode_t</span> mode)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为非负描述符，若出错则为-1.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">shm_unlink</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1.</span></span><br></pre></td></tr></table></figure>\n<p>与<i>mq_open</i>和<i>sem_open</i>函数不同，mode参数必须指定。如果没有指定O_CREATE标志则可以为0。可能是因为对于虚拟内存来讲，段的访问权限是必须的吧。</p>\n<p><i>ftruncate</i>可用于设定共享内存区大小。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ftruncate</span><span class=\"params\">(<span class=\"keyword\">int</span> fd, <span class=\"keyword\">off_t</span> length)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fstat</span><span class=\"params\">(<span class=\"keyword\">int</span> fd, struct stat *buf)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//返回：若成功则为0，若出错则为-1.</span></span><br></pre></td></tr></table></figure>\n"},{"title":"TCP总结","date":"2019-04-10T16:00:00.000Z","_content":"\n# TCP总结\n\n### MSS\n\nThe maximum segment size is the largest \"chunk\" of data that TCP will send to the other end. \n\n当连接建立起来后，每一端都能通知对端自己的MSS，让对面每次发送的Segment不要太大以至于被分片。<b>An MSS option can only appear in a SYN segment.</b>如果没有收到对面给的MSS信息，那么默认为536.（每个主机都必须能接受小于576的数据报）\n\n我们可以知道的是，MSS的大小往往大一点是更好的，因为可以减少IP和TCP包头的开销。MSS往往设置为网卡出口的MTU-40。在发送数据时，我们不仅要考量对端的MSS，我们考虑网卡出口的MTU。我们选择合适的MSS是为了在避免分片的情况下尽量选择更大的一次性数据发送量，但是分片极有可能在路径中间的瓶颈处进行。也就是说双方提示给对面的MSS都很大，但是中间有个路由器不够争气。（解决这种情况的方法是使用path MTU discovery）\n\n\n\n### Half-Close\n\n由于TCP是全双工的，双方都能发送接收数据，所以存在两条数据流，是否中断那条数据流是由发送方决定的。也就是说，A能关闭它作为发送方的数据流，但仍然可以选择在另一条数据流上读取数据。在关闭一条数据流后的状态就是处于Half-Close。注意，在使用Unix Api <i>close</i>关闭套接字，这不是进入半关闭状态，因为这会同时关闭读和写。\n\n\n\n### TCP State Transition Diagram\n\n![](/images/o_state_transition_diagram.jpg)\n\n### 2MSL Wait State\n\n如上图所示，TIME_WAIT也叫做2MSL状态。TCP的每种实现都必须设定一个值叫做<i>maximum segment lifetime</i>。它代表着一个Segment 被丢弃前在网络中能存在的最长时间。\n\nTIME_WAIT存在处于两个目的：\n\n- 我们假设客户端作为主动关闭方，那么客户最后发送的对Fin的Ack是可能会丢失的。但是这个信息对于服务器又是关键的，不收到它会以为你还在那边听，只是我的关闭信息没发过去。倘若客户没有进入TIME_WAIT状态，只会让服务端陷入无限的自责，一直以为是自己的问题。\n- 在处于2MSL阶段时，这个连接的socket pair不能被重用，直到2MSL阶段结束。大多数的实现给了一个更严格的要求，处于TIME_WAIT的一端的Socket port都不能被重用，而不只是那对socket pair。在这个阶段收到的数据包都会被丢弃，等待2MSL可以让之前连接的数据包消失殆尽，不至于影响后续的连接。\n\n疑问：为什么滞后的数据包只影响主动关闭方，不影响被动关闭方？\n\n任何主动关闭方试图在关闭后立刻重启并绑定相同port的都会出问题。这个问题在客户端可能影响不大，但是对于服务器的影响确实巨大的。因为服务器的端口是众所周知的，试想需要等待1-4分钟才能重启服务器的影响（\n\n我们可以给套接字加上SO_REUSEADDR选项，让其可以绑定处于TIME_WAIT阶段端口，但即使这样，如果我们试图连接相同的服务器，还是无法连接，因为那个socket对处于2MSL阶段。但是如果是服务器主动关闭，这却可以实现。：）\n\n\n\n### Half-Open\n\n<b>A TCP connection is said to be half-open if one end has closed or aborted the connection without the knowledge of the other end.</b>\n\n没有办法在半开状态传送数据，也没有办法察觉。常见的原因可能是突然断掉电源。\n\n\n\n### Simultaneous Open\n\n<b>TCP was purposely designed to handle simultaneous opens and the rule is that only one connection results from this, not two connections.</b>\n\n同时打开需要交换4条Segments，两端都扮演着客户端和服务端。\n\n疑问：（这种同时打开的意义在哪？还有，是不是必须得创建监听套接字）\n\n\n\n### Delayed Acknowledgments\n\n当TCP连接用于交互式数据传输时，每次传输的数据可能会很少。为了减少包头的开销以及减少链路上的数据包的数目，通过采取一种叫做延迟确认的技术。这种技术是说，在收到数据包后，不立即确认，而是先等待一阵子，看看有没有要发的数据，把数据和确认号一起发过去。大多数实现采用200ms的延迟。\n\nTCP的计时往往是基于心跳的，它不是说一定得准确计时200ms后再发送。就好比一个闹钟，它每隔一段时间滴答一下，用以大致估计时间。闹钟的时间是在流逝的，但我不关注，我关注的只是心跳。比方说我关心200ms的心跳，那么我收到数据时可能离上次心跳刚过去0-199ms这都不能确定，所以我的延迟不是准确的200ms，而是到下一次的心跳发生的间隔。\n\n\n\n### Nagle Algorithm\n\n这个算法意思是说不会有数据就传，而是等之前的数据的Ack确认号收到后再传，在此之前可以将数据收集起来。这个算法用于交互式的小数据传输，可以节省数据包头并且减少网络中包的数量。\n\n这个算法是自适应的，Nagle算法是为了减少小的数据包的数量，降低网络中的通信压力，当信路通畅时，它发的也快，当信路状况不好时，它也可以通过减少包的数量，降低发送速率来缓解线路压力。\n\n有时候我们需要关闭Nagle算法，比方说我们的信息交互是即时的，对延迟比较敏感。另外，假如我们键入指令让远程执行，如果TCP拿到一个字节数据发给服务端，服务端靠这一个字节的数据无法产生应答，直到Delayed（200ms）时间到了，才将Ack返回。这也就是说，至少要等200ms，才能让后续的字节发过去，造成了明显的延迟。\n\n\n\n### Sliding Windows\n\n滑动窗口是为了控制两端的流量，在两端发送和接受速率存在很大差别时，不至于让大量的数据无意义的传输。\n\n<b>The window advertised by receiver is called the offered window.</b>\n\n![](/images/slide_window.jpg)\n\n窗口移动有如下三种情况：\n\n- 发送方的消息被确认时，发送窗口的左端右移。\n- 当接受方的接收窗口数据被进程读取后，腾出空间，这时发送方的发送窗口右端右移。\n- 发送窗口的右端左移（RFC是禁止的，但是TCP必须能与这样行为的对端成功合作）\n\n窗口的大小往往是由进程确定的。\n\n\n\n### PUSH Flag\n\nPUSH Flag是一个信号，用来告诉接受方，你把数据尽快递给进程，不要让数据在TCP的buffer里逗留等待额外的数据。接受方收到PUSH后，它就会知道，不需要等待额外的数据了。\n\n现在往往没有Api去设置这个信号位，如果在数据发送后缓冲清空了的话，大多数伯克利衍生的实现会自动的加上这个标志。\n\n\n\n### Bulk Data Throughput（不太懂）\n\n\n\n### TCP重传\n\nTCP的重传计时是以连接的RTT为基础的，而RTT又是随着时间会发生变动的，所以我们需要对RTT有一定的测量方案，并尽量反应网络状况。\n\n第一个算法如下：\n\n```\nR<-αR + (1-α)M\nRTO = Rβ\n```\n\n其中α代表着平滑因子，一般选取0.9，而β一般选取2.RTO为计算得到的超时重传时间。\n\n这个方法看上去不错，但是有一个问题，它无法反映RTT的急剧变化。比方说RTT突然增大，但是RTO不能反映这种剧烈变化，造成的影响是RTO比理论偏小，造成了不必要的重传。\n\nJacobson提出了另外的一种算法：\n\n```\nErr = M - A\nA <- A + gErr\nD <- D + h(|Err| - D)\nRTO = A + 4D\n```\n\ng，h一般分别取0.125，0.25.\n\nD便是测定的平均变化程度，这种算法便考虑了剧烈变化的影响。\n\n**关于RTT的测量需要注意一些问题**\n\n- 如果一个报文段准备发送时，而此时timer正在被使用，那么这个报文段不计入RTT的测量。\n- RTT的计时是基于500ms-timer，也就是说550ms的发出到收到ACK时间间隔，可能被计入1tick或2ticks，分别代表500ms和1000ms。\n- 重传的报文段不计入RTT的测量，因为不知道这个回应是针对哪个报文段。依据<i>Karn's Algorithm</i>，我们将重新使用加倍后的RTO。\n\n\n\n具体的例子参考《TCP/IP详解 Vol1》p304\n\n\n\n### 拥塞避免\n\n#### Slow Start\n\n在发送方存在另外一个窗口，叫做<i>拥塞窗口</i>，用来模拟当前的网络状况。拥塞窗口初始值为一个Segment，每次收到一个ACK，拥塞窗口便增加一个Segment。每次发送方能够发送advertise window和拥塞窗口中的更小值量的数据。也就是说，我开始只能发一个Segment，但当我收到ACK后，我就能发两个了。当发送的两个都收到以后，我就能发四个。意思就是每收到一个ACK，就能让我能发送的个数增加1.\n\n\n\n拥塞避免和Slow Start是不同的算法，当拥塞发生时，我们需要减缓发送速率，需要使用拥塞避免算法和Slow Start的结合。需要维护两个变量：\n\n- 拥塞窗口（congestion window，<i>cwnd</i>）\n- 慢启动门槛（slow start threshold size， <i>ssthresh</i>）\n\n算法具体操作如下：\n\n1. 将<i>cwnd</i>初始化为1个Segment，<i>ssthresh</i>初始化为65535个字节。\n\n2. TCP不会发送大于<i>cwnd</i>和advertised window中更小者的数据量。\n\n3. 当拥塞发生后（超时或连续收到3个相同的ACK），**将<i>ssthresh</i>设置为当前窗口的一半（<i>cwnd</i>和advertised window的更小者，但至少是2个Segment）**，如果拥塞发生的原因是超时，那么<i>cwnd</i>设置为1个segment。\n\n4. 当新的数据被ACK后，我们需要增加<i>cwnd</i>，但增加的方式取决于我们在进行慢启动还是拥塞避免。\n\n   如果<i>cwnd</i>小于等于<i>ssthresh</i>，我们做慢启动，不然我们就是处于拥塞避免阶段。Slow Start到我们拥塞发生的地方，然后拥塞避免就开始了。\n\n   Slow Start的<i>cwnd</i>刚开始是1个Segment，每次收到收到一个ACK就会增加1.增长的速率是指数倍的，1，2，4...这也就是为什么拥塞发生时，<i>ssthresh</i>要减少至一半。拥塞避免阶段，每次收到一个ACK，增加1/<i>cwnd</i>。\n\n   我们在这里提到增长以段为单元，实际上是按照字节来的。\n\n\n\n#### Fast Retransmit and Fast Recovery\n\n有时不用等到超时我们就能判断丢包，当我们连续收到3个或以上相同的ACK，我们便可以知道极大可能是发生了丢包。这叫做<b>快重传</b>。另外，正如在上面提到的，不会开始慢启动，而是采取叫做快恢复的方式。之所以采用快恢复是因为我们注意到还是收到了3个ACK，说明当前的网络状况不算太糟糕。没必要启用慢启动。\n\n算法的步骤大致如下：\n\n- 当收到重复的ACK后，设置<i>ssthresh</i>为窗口的一半。（<i>cwnd</i>和advertised window的更小者，至少是2个Segment）\n\n  重传丢失的Segment，设置<i>cwnd</i>为<i>ssthresh</i>+3个Segment大小。\n\n- 每次收到重复的ACK，将<i>cwnd</i>增加一个Segment大小，然后重传一个包。\n\n- 当下一个对新数据的ACK到达后，将<i>cwnd</i>设置为<i>ssthresh</i>。\n\n\n\n具体的计算实例参考《TCP/IP详解 Vol1》p314\n\n\n\n### TCP Persist Timer\n\n假设我们有A，B双方通信，A准备给B发送消息，无奈B的接收窗口一直为0。后来B腾出了空间，将这个信息告诉A，可惜这个信息还丢了。因为这个信息不存在重传，所以导致了一个A想给B发信息发不了，B在等A信息的局面。\n\n这时就需要使用使用Persist Timer，当A收到B的通告说接收窗口为0时，A会设置一个Persist Timer，一旦过了这个时间还没有B窗口能用的信息，它就怀疑是ACK丢了，于是它发送一个window probe，询问信息。如果ACK没丢，只是单纯的没地方，那么B的回复就重置Persist Timer，并且时间翻倍。\n\n\n\n#### 糊涂窗口症状\n\n所谓的糊涂窗口症状是说，总是小的数据在传递，而不是一个满的数据段。\n\n它的发生可能是两端的原因：接受方通告了太小的接收窗口（而不是等窗口大一点后再通告）；或者发送方发送少量数据，而不是等到积累一定数据量后一起发。为避免糊涂窗口症状，两端都在为此付出努力。\n\n- 接受方禁止通告小窗口，一般的算法是，等到可接收窗口的大小到了min（Segment，buffer space / 2）再做通告\n- 发送方只有再满足如下条件才传输数据：\n  - Segment数据能够传送。\n  - 能传送对端advertise过的最大窗口的一半的数据。\n  - 我们能发送任何已有数据，要么我们开启了Nagle算法但不存在未确认数据了，要么禁止了Nagle算法。\n\n这里就有可能发生一种情况，B给A通告的窗口大于一个Segment，A发送的数据为一个Segment，此时B的窗口不足以通告，但是必须通告，并且这个值不能为0，不然A的发送窗口就出现了右端左移的情况。\n\n\n\n具体的例子参考《TCP/IP详解 Vol1》p329\n\n\n\n### TCP Keepalive Timer\n\n通常设置keepalive选项的是服务器，为了判断当前是否是half open状态。\n\n如果当前连接已经两个小时没有互动了，服务器就会发送一个Probe Segment到客户端，客户可能处于以下几种状态：\n\n- 运行并可达，这时客户端会响应服务端，让它知道自己一切都好，然后服务端重新设置keepalive timer为2个小时。\n- 宕机，服务器收不到回复，并且在75秒后超时。服务器一共会发10个，分隔75秒，如果一个回复都收不到，服务器都会猜测客户端已经宕机，随机关闭连接。\n- 宕机又重启，这时客户端收到Probe，因为刚重启，会相应一个Reset，导致服务端终止连接。\n- 运行不可达，这种情况类似第二种，TCP不能辨别。\n\n","source":"_posts/计算机网络/2019-04-11-TCP.md","raw":"---\ntitle: TCP总结\ncategories: 计算机网络\ntags: [计算机网络,TCP]\ndate: 2019-04-11\n---\n\n# TCP总结\n\n### MSS\n\nThe maximum segment size is the largest \"chunk\" of data that TCP will send to the other end. \n\n当连接建立起来后，每一端都能通知对端自己的MSS，让对面每次发送的Segment不要太大以至于被分片。<b>An MSS option can only appear in a SYN segment.</b>如果没有收到对面给的MSS信息，那么默认为536.（每个主机都必须能接受小于576的数据报）\n\n我们可以知道的是，MSS的大小往往大一点是更好的，因为可以减少IP和TCP包头的开销。MSS往往设置为网卡出口的MTU-40。在发送数据时，我们不仅要考量对端的MSS，我们考虑网卡出口的MTU。我们选择合适的MSS是为了在避免分片的情况下尽量选择更大的一次性数据发送量，但是分片极有可能在路径中间的瓶颈处进行。也就是说双方提示给对面的MSS都很大，但是中间有个路由器不够争气。（解决这种情况的方法是使用path MTU discovery）\n\n\n\n### Half-Close\n\n由于TCP是全双工的，双方都能发送接收数据，所以存在两条数据流，是否中断那条数据流是由发送方决定的。也就是说，A能关闭它作为发送方的数据流，但仍然可以选择在另一条数据流上读取数据。在关闭一条数据流后的状态就是处于Half-Close。注意，在使用Unix Api <i>close</i>关闭套接字，这不是进入半关闭状态，因为这会同时关闭读和写。\n\n\n\n### TCP State Transition Diagram\n\n![](/images/o_state_transition_diagram.jpg)\n\n### 2MSL Wait State\n\n如上图所示，TIME_WAIT也叫做2MSL状态。TCP的每种实现都必须设定一个值叫做<i>maximum segment lifetime</i>。它代表着一个Segment 被丢弃前在网络中能存在的最长时间。\n\nTIME_WAIT存在处于两个目的：\n\n- 我们假设客户端作为主动关闭方，那么客户最后发送的对Fin的Ack是可能会丢失的。但是这个信息对于服务器又是关键的，不收到它会以为你还在那边听，只是我的关闭信息没发过去。倘若客户没有进入TIME_WAIT状态，只会让服务端陷入无限的自责，一直以为是自己的问题。\n- 在处于2MSL阶段时，这个连接的socket pair不能被重用，直到2MSL阶段结束。大多数的实现给了一个更严格的要求，处于TIME_WAIT的一端的Socket port都不能被重用，而不只是那对socket pair。在这个阶段收到的数据包都会被丢弃，等待2MSL可以让之前连接的数据包消失殆尽，不至于影响后续的连接。\n\n疑问：为什么滞后的数据包只影响主动关闭方，不影响被动关闭方？\n\n任何主动关闭方试图在关闭后立刻重启并绑定相同port的都会出问题。这个问题在客户端可能影响不大，但是对于服务器的影响确实巨大的。因为服务器的端口是众所周知的，试想需要等待1-4分钟才能重启服务器的影响（\n\n我们可以给套接字加上SO_REUSEADDR选项，让其可以绑定处于TIME_WAIT阶段端口，但即使这样，如果我们试图连接相同的服务器，还是无法连接，因为那个socket对处于2MSL阶段。但是如果是服务器主动关闭，这却可以实现。：）\n\n\n\n### Half-Open\n\n<b>A TCP connection is said to be half-open if one end has closed or aborted the connection without the knowledge of the other end.</b>\n\n没有办法在半开状态传送数据，也没有办法察觉。常见的原因可能是突然断掉电源。\n\n\n\n### Simultaneous Open\n\n<b>TCP was purposely designed to handle simultaneous opens and the rule is that only one connection results from this, not two connections.</b>\n\n同时打开需要交换4条Segments，两端都扮演着客户端和服务端。\n\n疑问：（这种同时打开的意义在哪？还有，是不是必须得创建监听套接字）\n\n\n\n### Delayed Acknowledgments\n\n当TCP连接用于交互式数据传输时，每次传输的数据可能会很少。为了减少包头的开销以及减少链路上的数据包的数目，通过采取一种叫做延迟确认的技术。这种技术是说，在收到数据包后，不立即确认，而是先等待一阵子，看看有没有要发的数据，把数据和确认号一起发过去。大多数实现采用200ms的延迟。\n\nTCP的计时往往是基于心跳的，它不是说一定得准确计时200ms后再发送。就好比一个闹钟，它每隔一段时间滴答一下，用以大致估计时间。闹钟的时间是在流逝的，但我不关注，我关注的只是心跳。比方说我关心200ms的心跳，那么我收到数据时可能离上次心跳刚过去0-199ms这都不能确定，所以我的延迟不是准确的200ms，而是到下一次的心跳发生的间隔。\n\n\n\n### Nagle Algorithm\n\n这个算法意思是说不会有数据就传，而是等之前的数据的Ack确认号收到后再传，在此之前可以将数据收集起来。这个算法用于交互式的小数据传输，可以节省数据包头并且减少网络中包的数量。\n\n这个算法是自适应的，Nagle算法是为了减少小的数据包的数量，降低网络中的通信压力，当信路通畅时，它发的也快，当信路状况不好时，它也可以通过减少包的数量，降低发送速率来缓解线路压力。\n\n有时候我们需要关闭Nagle算法，比方说我们的信息交互是即时的，对延迟比较敏感。另外，假如我们键入指令让远程执行，如果TCP拿到一个字节数据发给服务端，服务端靠这一个字节的数据无法产生应答，直到Delayed（200ms）时间到了，才将Ack返回。这也就是说，至少要等200ms，才能让后续的字节发过去，造成了明显的延迟。\n\n\n\n### Sliding Windows\n\n滑动窗口是为了控制两端的流量，在两端发送和接受速率存在很大差别时，不至于让大量的数据无意义的传输。\n\n<b>The window advertised by receiver is called the offered window.</b>\n\n![](/images/slide_window.jpg)\n\n窗口移动有如下三种情况：\n\n- 发送方的消息被确认时，发送窗口的左端右移。\n- 当接受方的接收窗口数据被进程读取后，腾出空间，这时发送方的发送窗口右端右移。\n- 发送窗口的右端左移（RFC是禁止的，但是TCP必须能与这样行为的对端成功合作）\n\n窗口的大小往往是由进程确定的。\n\n\n\n### PUSH Flag\n\nPUSH Flag是一个信号，用来告诉接受方，你把数据尽快递给进程，不要让数据在TCP的buffer里逗留等待额外的数据。接受方收到PUSH后，它就会知道，不需要等待额外的数据了。\n\n现在往往没有Api去设置这个信号位，如果在数据发送后缓冲清空了的话，大多数伯克利衍生的实现会自动的加上这个标志。\n\n\n\n### Bulk Data Throughput（不太懂）\n\n\n\n### TCP重传\n\nTCP的重传计时是以连接的RTT为基础的，而RTT又是随着时间会发生变动的，所以我们需要对RTT有一定的测量方案，并尽量反应网络状况。\n\n第一个算法如下：\n\n```\nR<-αR + (1-α)M\nRTO = Rβ\n```\n\n其中α代表着平滑因子，一般选取0.9，而β一般选取2.RTO为计算得到的超时重传时间。\n\n这个方法看上去不错，但是有一个问题，它无法反映RTT的急剧变化。比方说RTT突然增大，但是RTO不能反映这种剧烈变化，造成的影响是RTO比理论偏小，造成了不必要的重传。\n\nJacobson提出了另外的一种算法：\n\n```\nErr = M - A\nA <- A + gErr\nD <- D + h(|Err| - D)\nRTO = A + 4D\n```\n\ng，h一般分别取0.125，0.25.\n\nD便是测定的平均变化程度，这种算法便考虑了剧烈变化的影响。\n\n**关于RTT的测量需要注意一些问题**\n\n- 如果一个报文段准备发送时，而此时timer正在被使用，那么这个报文段不计入RTT的测量。\n- RTT的计时是基于500ms-timer，也就是说550ms的发出到收到ACK时间间隔，可能被计入1tick或2ticks，分别代表500ms和1000ms。\n- 重传的报文段不计入RTT的测量，因为不知道这个回应是针对哪个报文段。依据<i>Karn's Algorithm</i>，我们将重新使用加倍后的RTO。\n\n\n\n具体的例子参考《TCP/IP详解 Vol1》p304\n\n\n\n### 拥塞避免\n\n#### Slow Start\n\n在发送方存在另外一个窗口，叫做<i>拥塞窗口</i>，用来模拟当前的网络状况。拥塞窗口初始值为一个Segment，每次收到一个ACK，拥塞窗口便增加一个Segment。每次发送方能够发送advertise window和拥塞窗口中的更小值量的数据。也就是说，我开始只能发一个Segment，但当我收到ACK后，我就能发两个了。当发送的两个都收到以后，我就能发四个。意思就是每收到一个ACK，就能让我能发送的个数增加1.\n\n\n\n拥塞避免和Slow Start是不同的算法，当拥塞发生时，我们需要减缓发送速率，需要使用拥塞避免算法和Slow Start的结合。需要维护两个变量：\n\n- 拥塞窗口（congestion window，<i>cwnd</i>）\n- 慢启动门槛（slow start threshold size， <i>ssthresh</i>）\n\n算法具体操作如下：\n\n1. 将<i>cwnd</i>初始化为1个Segment，<i>ssthresh</i>初始化为65535个字节。\n\n2. TCP不会发送大于<i>cwnd</i>和advertised window中更小者的数据量。\n\n3. 当拥塞发生后（超时或连续收到3个相同的ACK），**将<i>ssthresh</i>设置为当前窗口的一半（<i>cwnd</i>和advertised window的更小者，但至少是2个Segment）**，如果拥塞发生的原因是超时，那么<i>cwnd</i>设置为1个segment。\n\n4. 当新的数据被ACK后，我们需要增加<i>cwnd</i>，但增加的方式取决于我们在进行慢启动还是拥塞避免。\n\n   如果<i>cwnd</i>小于等于<i>ssthresh</i>，我们做慢启动，不然我们就是处于拥塞避免阶段。Slow Start到我们拥塞发生的地方，然后拥塞避免就开始了。\n\n   Slow Start的<i>cwnd</i>刚开始是1个Segment，每次收到收到一个ACK就会增加1.增长的速率是指数倍的，1，2，4...这也就是为什么拥塞发生时，<i>ssthresh</i>要减少至一半。拥塞避免阶段，每次收到一个ACK，增加1/<i>cwnd</i>。\n\n   我们在这里提到增长以段为单元，实际上是按照字节来的。\n\n\n\n#### Fast Retransmit and Fast Recovery\n\n有时不用等到超时我们就能判断丢包，当我们连续收到3个或以上相同的ACK，我们便可以知道极大可能是发生了丢包。这叫做<b>快重传</b>。另外，正如在上面提到的，不会开始慢启动，而是采取叫做快恢复的方式。之所以采用快恢复是因为我们注意到还是收到了3个ACK，说明当前的网络状况不算太糟糕。没必要启用慢启动。\n\n算法的步骤大致如下：\n\n- 当收到重复的ACK后，设置<i>ssthresh</i>为窗口的一半。（<i>cwnd</i>和advertised window的更小者，至少是2个Segment）\n\n  重传丢失的Segment，设置<i>cwnd</i>为<i>ssthresh</i>+3个Segment大小。\n\n- 每次收到重复的ACK，将<i>cwnd</i>增加一个Segment大小，然后重传一个包。\n\n- 当下一个对新数据的ACK到达后，将<i>cwnd</i>设置为<i>ssthresh</i>。\n\n\n\n具体的计算实例参考《TCP/IP详解 Vol1》p314\n\n\n\n### TCP Persist Timer\n\n假设我们有A，B双方通信，A准备给B发送消息，无奈B的接收窗口一直为0。后来B腾出了空间，将这个信息告诉A，可惜这个信息还丢了。因为这个信息不存在重传，所以导致了一个A想给B发信息发不了，B在等A信息的局面。\n\n这时就需要使用使用Persist Timer，当A收到B的通告说接收窗口为0时，A会设置一个Persist Timer，一旦过了这个时间还没有B窗口能用的信息，它就怀疑是ACK丢了，于是它发送一个window probe，询问信息。如果ACK没丢，只是单纯的没地方，那么B的回复就重置Persist Timer，并且时间翻倍。\n\n\n\n#### 糊涂窗口症状\n\n所谓的糊涂窗口症状是说，总是小的数据在传递，而不是一个满的数据段。\n\n它的发生可能是两端的原因：接受方通告了太小的接收窗口（而不是等窗口大一点后再通告）；或者发送方发送少量数据，而不是等到积累一定数据量后一起发。为避免糊涂窗口症状，两端都在为此付出努力。\n\n- 接受方禁止通告小窗口，一般的算法是，等到可接收窗口的大小到了min（Segment，buffer space / 2）再做通告\n- 发送方只有再满足如下条件才传输数据：\n  - Segment数据能够传送。\n  - 能传送对端advertise过的最大窗口的一半的数据。\n  - 我们能发送任何已有数据，要么我们开启了Nagle算法但不存在未确认数据了，要么禁止了Nagle算法。\n\n这里就有可能发生一种情况，B给A通告的窗口大于一个Segment，A发送的数据为一个Segment，此时B的窗口不足以通告，但是必须通告，并且这个值不能为0，不然A的发送窗口就出现了右端左移的情况。\n\n\n\n具体的例子参考《TCP/IP详解 Vol1》p329\n\n\n\n### TCP Keepalive Timer\n\n通常设置keepalive选项的是服务器，为了判断当前是否是half open状态。\n\n如果当前连接已经两个小时没有互动了，服务器就会发送一个Probe Segment到客户端，客户可能处于以下几种状态：\n\n- 运行并可达，这时客户端会响应服务端，让它知道自己一切都好，然后服务端重新设置keepalive timer为2个小时。\n- 宕机，服务器收不到回复，并且在75秒后超时。服务器一共会发10个，分隔75秒，如果一个回复都收不到，服务器都会猜测客户端已经宕机，随机关闭连接。\n- 宕机又重启，这时客户端收到Probe，因为刚重启，会相应一个Reset，导致服务端终止连接。\n- 运行不可达，这种情况类似第二种，TCP不能辨别。\n\n","slug":"计算机网络/2019-04-11-TCP","published":1,"updated":"2019-04-19T02:10:44.644Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdlcryb000peguhqy2vkveu","content":"<h1 id=\"TCP总结\"><a href=\"#TCP总结\" class=\"headerlink\" title=\"TCP总结\"></a>TCP总结</h1><h3 id=\"MSS\"><a href=\"#MSS\" class=\"headerlink\" title=\"MSS\"></a>MSS</h3><p>The maximum segment size is the largest “chunk” of data that TCP will send to the other end. </p>\n<p>当连接建立起来后，每一端都能通知对端自己的MSS，让对面每次发送的Segment不要太大以至于被分片。<b>An MSS option can only appear in a SYN segment.</b>如果没有收到对面给的MSS信息，那么默认为536.（每个主机都必须能接受小于576的数据报）</p>\n<p>我们可以知道的是，MSS的大小往往大一点是更好的，因为可以减少IP和TCP包头的开销。MSS往往设置为网卡出口的MTU-40。在发送数据时，我们不仅要考量对端的MSS，我们考虑网卡出口的MTU。我们选择合适的MSS是为了在避免分片的情况下尽量选择更大的一次性数据发送量，但是分片极有可能在路径中间的瓶颈处进行。也就是说双方提示给对面的MSS都很大，但是中间有个路由器不够争气。（解决这种情况的方法是使用path MTU discovery）</p>\n<h3 id=\"Half-Close\"><a href=\"#Half-Close\" class=\"headerlink\" title=\"Half-Close\"></a>Half-Close</h3><p>由于TCP是全双工的，双方都能发送接收数据，所以存在两条数据流，是否中断那条数据流是由发送方决定的。也就是说，A能关闭它作为发送方的数据流，但仍然可以选择在另一条数据流上读取数据。在关闭一条数据流后的状态就是处于Half-Close。注意，在使用Unix Api <i>close</i>关闭套接字，这不是进入半关闭状态，因为这会同时关闭读和写。</p>\n<h3 id=\"TCP-State-Transition-Diagram\"><a href=\"#TCP-State-Transition-Diagram\" class=\"headerlink\" title=\"TCP State Transition Diagram\"></a>TCP State Transition Diagram</h3><p><img src=\"/images/o_state_transition_diagram.jpg\" alt></p>\n<h3 id=\"2MSL-Wait-State\"><a href=\"#2MSL-Wait-State\" class=\"headerlink\" title=\"2MSL Wait State\"></a>2MSL Wait State</h3><p>如上图所示，TIME_WAIT也叫做2MSL状态。TCP的每种实现都必须设定一个值叫做<i>maximum segment lifetime</i>。它代表着一个Segment 被丢弃前在网络中能存在的最长时间。</p>\n<p>TIME_WAIT存在处于两个目的：</p>\n<ul>\n<li>我们假设客户端作为主动关闭方，那么客户最后发送的对Fin的Ack是可能会丢失的。但是这个信息对于服务器又是关键的，不收到它会以为你还在那边听，只是我的关闭信息没发过去。倘若客户没有进入TIME_WAIT状态，只会让服务端陷入无限的自责，一直以为是自己的问题。</li>\n<li>在处于2MSL阶段时，这个连接的socket pair不能被重用，直到2MSL阶段结束。大多数的实现给了一个更严格的要求，处于TIME_WAIT的一端的Socket port都不能被重用，而不只是那对socket pair。在这个阶段收到的数据包都会被丢弃，等待2MSL可以让之前连接的数据包消失殆尽，不至于影响后续的连接。</li>\n</ul>\n<p>疑问：为什么滞后的数据包只影响主动关闭方，不影响被动关闭方？</p>\n<p>任何主动关闭方试图在关闭后立刻重启并绑定相同port的都会出问题。这个问题在客户端可能影响不大，但是对于服务器的影响确实巨大的。因为服务器的端口是众所周知的，试想需要等待1-4分钟才能重启服务器的影响（</p>\n<p>我们可以给套接字加上SO_REUSEADDR选项，让其可以绑定处于TIME_WAIT阶段端口，但即使这样，如果我们试图连接相同的服务器，还是无法连接，因为那个socket对处于2MSL阶段。但是如果是服务器主动关闭，这却可以实现。：）</p>\n<h3 id=\"Half-Open\"><a href=\"#Half-Open\" class=\"headerlink\" title=\"Half-Open\"></a>Half-Open</h3><p><b>A TCP connection is said to be half-open if one end has closed or aborted the connection without the knowledge of the other end.</b></p>\n<p>没有办法在半开状态传送数据，也没有办法察觉。常见的原因可能是突然断掉电源。</p>\n<h3 id=\"Simultaneous-Open\"><a href=\"#Simultaneous-Open\" class=\"headerlink\" title=\"Simultaneous Open\"></a>Simultaneous Open</h3><p><b>TCP was purposely designed to handle simultaneous opens and the rule is that only one connection results from this, not two connections.</b></p>\n<p>同时打开需要交换4条Segments，两端都扮演着客户端和服务端。</p>\n<p>疑问：（这种同时打开的意义在哪？还有，是不是必须得创建监听套接字）</p>\n<h3 id=\"Delayed-Acknowledgments\"><a href=\"#Delayed-Acknowledgments\" class=\"headerlink\" title=\"Delayed Acknowledgments\"></a>Delayed Acknowledgments</h3><p>当TCP连接用于交互式数据传输时，每次传输的数据可能会很少。为了减少包头的开销以及减少链路上的数据包的数目，通过采取一种叫做延迟确认的技术。这种技术是说，在收到数据包后，不立即确认，而是先等待一阵子，看看有没有要发的数据，把数据和确认号一起发过去。大多数实现采用200ms的延迟。</p>\n<p>TCP的计时往往是基于心跳的，它不是说一定得准确计时200ms后再发送。就好比一个闹钟，它每隔一段时间滴答一下，用以大致估计时间。闹钟的时间是在流逝的，但我不关注，我关注的只是心跳。比方说我关心200ms的心跳，那么我收到数据时可能离上次心跳刚过去0-199ms这都不能确定，所以我的延迟不是准确的200ms，而是到下一次的心跳发生的间隔。</p>\n<h3 id=\"Nagle-Algorithm\"><a href=\"#Nagle-Algorithm\" class=\"headerlink\" title=\"Nagle Algorithm\"></a>Nagle Algorithm</h3><p>这个算法意思是说不会有数据就传，而是等之前的数据的Ack确认号收到后再传，在此之前可以将数据收集起来。这个算法用于交互式的小数据传输，可以节省数据包头并且减少网络中包的数量。</p>\n<p>这个算法是自适应的，Nagle算法是为了减少小的数据包的数量，降低网络中的通信压力，当信路通畅时，它发的也快，当信路状况不好时，它也可以通过减少包的数量，降低发送速率来缓解线路压力。</p>\n<p>有时候我们需要关闭Nagle算法，比方说我们的信息交互是即时的，对延迟比较敏感。另外，假如我们键入指令让远程执行，如果TCP拿到一个字节数据发给服务端，服务端靠这一个字节的数据无法产生应答，直到Delayed（200ms）时间到了，才将Ack返回。这也就是说，至少要等200ms，才能让后续的字节发过去，造成了明显的延迟。</p>\n<h3 id=\"Sliding-Windows\"><a href=\"#Sliding-Windows\" class=\"headerlink\" title=\"Sliding Windows\"></a>Sliding Windows</h3><p>滑动窗口是为了控制两端的流量，在两端发送和接受速率存在很大差别时，不至于让大量的数据无意义的传输。</p>\n<p><b>The window advertised by receiver is called the offered window.</b></p>\n<p><img src=\"/images/slide_window.jpg\" alt></p>\n<p>窗口移动有如下三种情况：</p>\n<ul>\n<li>发送方的消息被确认时，发送窗口的左端右移。</li>\n<li>当接受方的接收窗口数据被进程读取后，腾出空间，这时发送方的发送窗口右端右移。</li>\n<li>发送窗口的右端左移（RFC是禁止的，但是TCP必须能与这样行为的对端成功合作）</li>\n</ul>\n<p>窗口的大小往往是由进程确定的。</p>\n<h3 id=\"PUSH-Flag\"><a href=\"#PUSH-Flag\" class=\"headerlink\" title=\"PUSH Flag\"></a>PUSH Flag</h3><p>PUSH Flag是一个信号，用来告诉接受方，你把数据尽快递给进程，不要让数据在TCP的buffer里逗留等待额外的数据。接受方收到PUSH后，它就会知道，不需要等待额外的数据了。</p>\n<p>现在往往没有Api去设置这个信号位，如果在数据发送后缓冲清空了的话，大多数伯克利衍生的实现会自动的加上这个标志。</p>\n<h3 id=\"Bulk-Data-Throughput（不太懂）\"><a href=\"#Bulk-Data-Throughput（不太懂）\" class=\"headerlink\" title=\"Bulk Data Throughput（不太懂）\"></a>Bulk Data Throughput（不太懂）</h3><h3 id=\"TCP重传\"><a href=\"#TCP重传\" class=\"headerlink\" title=\"TCP重传\"></a>TCP重传</h3><p>TCP的重传计时是以连接的RTT为基础的，而RTT又是随着时间会发生变动的，所以我们需要对RTT有一定的测量方案，并尽量反应网络状况。</p>\n<p>第一个算法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R&lt;-αR + (1-α)M</span><br><span class=\"line\">RTO = Rβ</span><br></pre></td></tr></table></figure>\n<p>其中α代表着平滑因子，一般选取0.9，而β一般选取2.RTO为计算得到的超时重传时间。</p>\n<p>这个方法看上去不错，但是有一个问题，它无法反映RTT的急剧变化。比方说RTT突然增大，但是RTO不能反映这种剧烈变化，造成的影响是RTO比理论偏小，造成了不必要的重传。</p>\n<p>Jacobson提出了另外的一种算法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Err = M - A</span><br><span class=\"line\">A &lt;- A + gErr</span><br><span class=\"line\">D &lt;- D + h(|Err| - D)</span><br><span class=\"line\">RTO = A + 4D</span><br></pre></td></tr></table></figure>\n<p>g，h一般分别取0.125，0.25.</p>\n<p>D便是测定的平均变化程度，这种算法便考虑了剧烈变化的影响。</p>\n<p><strong>关于RTT的测量需要注意一些问题</strong></p>\n<ul>\n<li>如果一个报文段准备发送时，而此时timer正在被使用，那么这个报文段不计入RTT的测量。</li>\n<li>RTT的计时是基于500ms-timer，也就是说550ms的发出到收到ACK时间间隔，可能被计入1tick或2ticks，分别代表500ms和1000ms。</li>\n<li>重传的报文段不计入RTT的测量，因为不知道这个回应是针对哪个报文段。依据<i>Karn’s Algorithm</i>，我们将重新使用加倍后的RTO。</li>\n</ul>\n<p>具体的例子参考《TCP/IP详解 Vol1》p304</p>\n<h3 id=\"拥塞避免\"><a href=\"#拥塞避免\" class=\"headerlink\" title=\"拥塞避免\"></a>拥塞避免</h3><h4 id=\"Slow-Start\"><a href=\"#Slow-Start\" class=\"headerlink\" title=\"Slow Start\"></a>Slow Start</h4><p>在发送方存在另外一个窗口，叫做<i>拥塞窗口</i>，用来模拟当前的网络状况。拥塞窗口初始值为一个Segment，每次收到一个ACK，拥塞窗口便增加一个Segment。每次发送方能够发送advertise window和拥塞窗口中的更小值量的数据。也就是说，我开始只能发一个Segment，但当我收到ACK后，我就能发两个了。当发送的两个都收到以后，我就能发四个。意思就是每收到一个ACK，就能让我能发送的个数增加1.</p>\n<p>拥塞避免和Slow Start是不同的算法，当拥塞发生时，我们需要减缓发送速率，需要使用拥塞避免算法和Slow Start的结合。需要维护两个变量：</p>\n<ul>\n<li>拥塞窗口（congestion window，<i>cwnd</i>）</li>\n<li>慢启动门槛（slow start threshold size， <i>ssthresh</i>）</li>\n</ul>\n<p>算法具体操作如下：</p>\n<ol>\n<li><p>将<i>cwnd</i>初始化为1个Segment，<i>ssthresh</i>初始化为65535个字节。</p>\n</li>\n<li><p>TCP不会发送大于<i>cwnd</i>和advertised window中更小者的数据量。</p>\n</li>\n<li><p>当拥塞发生后（超时或连续收到3个相同的ACK），<strong>将<i>ssthresh</i>设置为当前窗口的一半（<i>cwnd</i>和advertised window的更小者，但至少是2个Segment）</strong>，如果拥塞发生的原因是超时，那么<i>cwnd</i>设置为1个segment。</p>\n</li>\n<li><p>当新的数据被ACK后，我们需要增加<i>cwnd</i>，但增加的方式取决于我们在进行慢启动还是拥塞避免。</p>\n<p>如果<i>cwnd</i>小于等于<i>ssthresh</i>，我们做慢启动，不然我们就是处于拥塞避免阶段。Slow Start到我们拥塞发生的地方，然后拥塞避免就开始了。</p>\n<p>Slow Start的<i>cwnd</i>刚开始是1个Segment，每次收到收到一个ACK就会增加1.增长的速率是指数倍的，1，2，4…这也就是为什么拥塞发生时，<i>ssthresh</i>要减少至一半。拥塞避免阶段，每次收到一个ACK，增加1/<i>cwnd</i>。</p>\n<p>我们在这里提到增长以段为单元，实际上是按照字节来的。</p>\n</li>\n</ol>\n<h4 id=\"Fast-Retransmit-and-Fast-Recovery\"><a href=\"#Fast-Retransmit-and-Fast-Recovery\" class=\"headerlink\" title=\"Fast Retransmit and Fast Recovery\"></a>Fast Retransmit and Fast Recovery</h4><p>有时不用等到超时我们就能判断丢包，当我们连续收到3个或以上相同的ACK，我们便可以知道极大可能是发生了丢包。这叫做<b>快重传</b>。另外，正如在上面提到的，不会开始慢启动，而是采取叫做快恢复的方式。之所以采用快恢复是因为我们注意到还是收到了3个ACK，说明当前的网络状况不算太糟糕。没必要启用慢启动。</p>\n<p>算法的步骤大致如下：</p>\n<ul>\n<li><p>当收到重复的ACK后，设置<i>ssthresh</i>为窗口的一半。（<i>cwnd</i>和advertised window的更小者，至少是2个Segment）</p>\n<p>重传丢失的Segment，设置<i>cwnd</i>为<i>ssthresh</i>+3个Segment大小。</p>\n</li>\n<li><p>每次收到重复的ACK，将<i>cwnd</i>增加一个Segment大小，然后重传一个包。</p>\n</li>\n<li><p>当下一个对新数据的ACK到达后，将<i>cwnd</i>设置为<i>ssthresh</i>。</p>\n</li>\n</ul>\n<p>具体的计算实例参考《TCP/IP详解 Vol1》p314</p>\n<h3 id=\"TCP-Persist-Timer\"><a href=\"#TCP-Persist-Timer\" class=\"headerlink\" title=\"TCP Persist Timer\"></a>TCP Persist Timer</h3><p>假设我们有A，B双方通信，A准备给B发送消息，无奈B的接收窗口一直为0。后来B腾出了空间，将这个信息告诉A，可惜这个信息还丢了。因为这个信息不存在重传，所以导致了一个A想给B发信息发不了，B在等A信息的局面。</p>\n<p>这时就需要使用使用Persist Timer，当A收到B的通告说接收窗口为0时，A会设置一个Persist Timer，一旦过了这个时间还没有B窗口能用的信息，它就怀疑是ACK丢了，于是它发送一个window probe，询问信息。如果ACK没丢，只是单纯的没地方，那么B的回复就重置Persist Timer，并且时间翻倍。</p>\n<h4 id=\"糊涂窗口症状\"><a href=\"#糊涂窗口症状\" class=\"headerlink\" title=\"糊涂窗口症状\"></a>糊涂窗口症状</h4><p>所谓的糊涂窗口症状是说，总是小的数据在传递，而不是一个满的数据段。</p>\n<p>它的发生可能是两端的原因：接受方通告了太小的接收窗口（而不是等窗口大一点后再通告）；或者发送方发送少量数据，而不是等到积累一定数据量后一起发。为避免糊涂窗口症状，两端都在为此付出努力。</p>\n<ul>\n<li>接受方禁止通告小窗口，一般的算法是，等到可接收窗口的大小到了min（Segment，buffer space / 2）再做通告</li>\n<li>发送方只有再满足如下条件才传输数据：<ul>\n<li>Segment数据能够传送。</li>\n<li>能传送对端advertise过的最大窗口的一半的数据。</li>\n<li>我们能发送任何已有数据，要么我们开启了Nagle算法但不存在未确认数据了，要么禁止了Nagle算法。</li>\n</ul>\n</li>\n</ul>\n<p>这里就有可能发生一种情况，B给A通告的窗口大于一个Segment，A发送的数据为一个Segment，此时B的窗口不足以通告，但是必须通告，并且这个值不能为0，不然A的发送窗口就出现了右端左移的情况。</p>\n<p>具体的例子参考《TCP/IP详解 Vol1》p329</p>\n<h3 id=\"TCP-Keepalive-Timer\"><a href=\"#TCP-Keepalive-Timer\" class=\"headerlink\" title=\"TCP Keepalive Timer\"></a>TCP Keepalive Timer</h3><p>通常设置keepalive选项的是服务器，为了判断当前是否是half open状态。</p>\n<p>如果当前连接已经两个小时没有互动了，服务器就会发送一个Probe Segment到客户端，客户可能处于以下几种状态：</p>\n<ul>\n<li>运行并可达，这时客户端会响应服务端，让它知道自己一切都好，然后服务端重新设置keepalive timer为2个小时。</li>\n<li>宕机，服务器收不到回复，并且在75秒后超时。服务器一共会发10个，分隔75秒，如果一个回复都收不到，服务器都会猜测客户端已经宕机，随机关闭连接。</li>\n<li>宕机又重启，这时客户端收到Probe，因为刚重启，会相应一个Reset，导致服务端终止连接。</li>\n<li>运行不可达，这种情况类似第二种，TCP不能辨别。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TCP总结\"><a href=\"#TCP总结\" class=\"headerlink\" title=\"TCP总结\"></a>TCP总结</h1><h3 id=\"MSS\"><a href=\"#MSS\" class=\"headerlink\" title=\"MSS\"></a>MSS</h3><p>The maximum segment size is the largest “chunk” of data that TCP will send to the other end. </p>\n<p>当连接建立起来后，每一端都能通知对端自己的MSS，让对面每次发送的Segment不要太大以至于被分片。<b>An MSS option can only appear in a SYN segment.</b>如果没有收到对面给的MSS信息，那么默认为536.（每个主机都必须能接受小于576的数据报）</p>\n<p>我们可以知道的是，MSS的大小往往大一点是更好的，因为可以减少IP和TCP包头的开销。MSS往往设置为网卡出口的MTU-40。在发送数据时，我们不仅要考量对端的MSS，我们考虑网卡出口的MTU。我们选择合适的MSS是为了在避免分片的情况下尽量选择更大的一次性数据发送量，但是分片极有可能在路径中间的瓶颈处进行。也就是说双方提示给对面的MSS都很大，但是中间有个路由器不够争气。（解决这种情况的方法是使用path MTU discovery）</p>\n<h3 id=\"Half-Close\"><a href=\"#Half-Close\" class=\"headerlink\" title=\"Half-Close\"></a>Half-Close</h3><p>由于TCP是全双工的，双方都能发送接收数据，所以存在两条数据流，是否中断那条数据流是由发送方决定的。也就是说，A能关闭它作为发送方的数据流，但仍然可以选择在另一条数据流上读取数据。在关闭一条数据流后的状态就是处于Half-Close。注意，在使用Unix Api <i>close</i>关闭套接字，这不是进入半关闭状态，因为这会同时关闭读和写。</p>\n<h3 id=\"TCP-State-Transition-Diagram\"><a href=\"#TCP-State-Transition-Diagram\" class=\"headerlink\" title=\"TCP State Transition Diagram\"></a>TCP State Transition Diagram</h3><p><img src=\"/images/o_state_transition_diagram.jpg\" alt></p>\n<h3 id=\"2MSL-Wait-State\"><a href=\"#2MSL-Wait-State\" class=\"headerlink\" title=\"2MSL Wait State\"></a>2MSL Wait State</h3><p>如上图所示，TIME_WAIT也叫做2MSL状态。TCP的每种实现都必须设定一个值叫做<i>maximum segment lifetime</i>。它代表着一个Segment 被丢弃前在网络中能存在的最长时间。</p>\n<p>TIME_WAIT存在处于两个目的：</p>\n<ul>\n<li>我们假设客户端作为主动关闭方，那么客户最后发送的对Fin的Ack是可能会丢失的。但是这个信息对于服务器又是关键的，不收到它会以为你还在那边听，只是我的关闭信息没发过去。倘若客户没有进入TIME_WAIT状态，只会让服务端陷入无限的自责，一直以为是自己的问题。</li>\n<li>在处于2MSL阶段时，这个连接的socket pair不能被重用，直到2MSL阶段结束。大多数的实现给了一个更严格的要求，处于TIME_WAIT的一端的Socket port都不能被重用，而不只是那对socket pair。在这个阶段收到的数据包都会被丢弃，等待2MSL可以让之前连接的数据包消失殆尽，不至于影响后续的连接。</li>\n</ul>\n<p>疑问：为什么滞后的数据包只影响主动关闭方，不影响被动关闭方？</p>\n<p>任何主动关闭方试图在关闭后立刻重启并绑定相同port的都会出问题。这个问题在客户端可能影响不大，但是对于服务器的影响确实巨大的。因为服务器的端口是众所周知的，试想需要等待1-4分钟才能重启服务器的影响（</p>\n<p>我们可以给套接字加上SO_REUSEADDR选项，让其可以绑定处于TIME_WAIT阶段端口，但即使这样，如果我们试图连接相同的服务器，还是无法连接，因为那个socket对处于2MSL阶段。但是如果是服务器主动关闭，这却可以实现。：）</p>\n<h3 id=\"Half-Open\"><a href=\"#Half-Open\" class=\"headerlink\" title=\"Half-Open\"></a>Half-Open</h3><p><b>A TCP connection is said to be half-open if one end has closed or aborted the connection without the knowledge of the other end.</b></p>\n<p>没有办法在半开状态传送数据，也没有办法察觉。常见的原因可能是突然断掉电源。</p>\n<h3 id=\"Simultaneous-Open\"><a href=\"#Simultaneous-Open\" class=\"headerlink\" title=\"Simultaneous Open\"></a>Simultaneous Open</h3><p><b>TCP was purposely designed to handle simultaneous opens and the rule is that only one connection results from this, not two connections.</b></p>\n<p>同时打开需要交换4条Segments，两端都扮演着客户端和服务端。</p>\n<p>疑问：（这种同时打开的意义在哪？还有，是不是必须得创建监听套接字）</p>\n<h3 id=\"Delayed-Acknowledgments\"><a href=\"#Delayed-Acknowledgments\" class=\"headerlink\" title=\"Delayed Acknowledgments\"></a>Delayed Acknowledgments</h3><p>当TCP连接用于交互式数据传输时，每次传输的数据可能会很少。为了减少包头的开销以及减少链路上的数据包的数目，通过采取一种叫做延迟确认的技术。这种技术是说，在收到数据包后，不立即确认，而是先等待一阵子，看看有没有要发的数据，把数据和确认号一起发过去。大多数实现采用200ms的延迟。</p>\n<p>TCP的计时往往是基于心跳的，它不是说一定得准确计时200ms后再发送。就好比一个闹钟，它每隔一段时间滴答一下，用以大致估计时间。闹钟的时间是在流逝的，但我不关注，我关注的只是心跳。比方说我关心200ms的心跳，那么我收到数据时可能离上次心跳刚过去0-199ms这都不能确定，所以我的延迟不是准确的200ms，而是到下一次的心跳发生的间隔。</p>\n<h3 id=\"Nagle-Algorithm\"><a href=\"#Nagle-Algorithm\" class=\"headerlink\" title=\"Nagle Algorithm\"></a>Nagle Algorithm</h3><p>这个算法意思是说不会有数据就传，而是等之前的数据的Ack确认号收到后再传，在此之前可以将数据收集起来。这个算法用于交互式的小数据传输，可以节省数据包头并且减少网络中包的数量。</p>\n<p>这个算法是自适应的，Nagle算法是为了减少小的数据包的数量，降低网络中的通信压力，当信路通畅时，它发的也快，当信路状况不好时，它也可以通过减少包的数量，降低发送速率来缓解线路压力。</p>\n<p>有时候我们需要关闭Nagle算法，比方说我们的信息交互是即时的，对延迟比较敏感。另外，假如我们键入指令让远程执行，如果TCP拿到一个字节数据发给服务端，服务端靠这一个字节的数据无法产生应答，直到Delayed（200ms）时间到了，才将Ack返回。这也就是说，至少要等200ms，才能让后续的字节发过去，造成了明显的延迟。</p>\n<h3 id=\"Sliding-Windows\"><a href=\"#Sliding-Windows\" class=\"headerlink\" title=\"Sliding Windows\"></a>Sliding Windows</h3><p>滑动窗口是为了控制两端的流量，在两端发送和接受速率存在很大差别时，不至于让大量的数据无意义的传输。</p>\n<p><b>The window advertised by receiver is called the offered window.</b></p>\n<p><img src=\"/images/slide_window.jpg\" alt></p>\n<p>窗口移动有如下三种情况：</p>\n<ul>\n<li>发送方的消息被确认时，发送窗口的左端右移。</li>\n<li>当接受方的接收窗口数据被进程读取后，腾出空间，这时发送方的发送窗口右端右移。</li>\n<li>发送窗口的右端左移（RFC是禁止的，但是TCP必须能与这样行为的对端成功合作）</li>\n</ul>\n<p>窗口的大小往往是由进程确定的。</p>\n<h3 id=\"PUSH-Flag\"><a href=\"#PUSH-Flag\" class=\"headerlink\" title=\"PUSH Flag\"></a>PUSH Flag</h3><p>PUSH Flag是一个信号，用来告诉接受方，你把数据尽快递给进程，不要让数据在TCP的buffer里逗留等待额外的数据。接受方收到PUSH后，它就会知道，不需要等待额外的数据了。</p>\n<p>现在往往没有Api去设置这个信号位，如果在数据发送后缓冲清空了的话，大多数伯克利衍生的实现会自动的加上这个标志。</p>\n<h3 id=\"Bulk-Data-Throughput（不太懂）\"><a href=\"#Bulk-Data-Throughput（不太懂）\" class=\"headerlink\" title=\"Bulk Data Throughput（不太懂）\"></a>Bulk Data Throughput（不太懂）</h3><h3 id=\"TCP重传\"><a href=\"#TCP重传\" class=\"headerlink\" title=\"TCP重传\"></a>TCP重传</h3><p>TCP的重传计时是以连接的RTT为基础的，而RTT又是随着时间会发生变动的，所以我们需要对RTT有一定的测量方案，并尽量反应网络状况。</p>\n<p>第一个算法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R&lt;-αR + (1-α)M</span><br><span class=\"line\">RTO = Rβ</span><br></pre></td></tr></table></figure>\n<p>其中α代表着平滑因子，一般选取0.9，而β一般选取2.RTO为计算得到的超时重传时间。</p>\n<p>这个方法看上去不错，但是有一个问题，它无法反映RTT的急剧变化。比方说RTT突然增大，但是RTO不能反映这种剧烈变化，造成的影响是RTO比理论偏小，造成了不必要的重传。</p>\n<p>Jacobson提出了另外的一种算法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Err = M - A</span><br><span class=\"line\">A &lt;- A + gErr</span><br><span class=\"line\">D &lt;- D + h(|Err| - D)</span><br><span class=\"line\">RTO = A + 4D</span><br></pre></td></tr></table></figure>\n<p>g，h一般分别取0.125，0.25.</p>\n<p>D便是测定的平均变化程度，这种算法便考虑了剧烈变化的影响。</p>\n<p><strong>关于RTT的测量需要注意一些问题</strong></p>\n<ul>\n<li>如果一个报文段准备发送时，而此时timer正在被使用，那么这个报文段不计入RTT的测量。</li>\n<li>RTT的计时是基于500ms-timer，也就是说550ms的发出到收到ACK时间间隔，可能被计入1tick或2ticks，分别代表500ms和1000ms。</li>\n<li>重传的报文段不计入RTT的测量，因为不知道这个回应是针对哪个报文段。依据<i>Karn’s Algorithm</i>，我们将重新使用加倍后的RTO。</li>\n</ul>\n<p>具体的例子参考《TCP/IP详解 Vol1》p304</p>\n<h3 id=\"拥塞避免\"><a href=\"#拥塞避免\" class=\"headerlink\" title=\"拥塞避免\"></a>拥塞避免</h3><h4 id=\"Slow-Start\"><a href=\"#Slow-Start\" class=\"headerlink\" title=\"Slow Start\"></a>Slow Start</h4><p>在发送方存在另外一个窗口，叫做<i>拥塞窗口</i>，用来模拟当前的网络状况。拥塞窗口初始值为一个Segment，每次收到一个ACK，拥塞窗口便增加一个Segment。每次发送方能够发送advertise window和拥塞窗口中的更小值量的数据。也就是说，我开始只能发一个Segment，但当我收到ACK后，我就能发两个了。当发送的两个都收到以后，我就能发四个。意思就是每收到一个ACK，就能让我能发送的个数增加1.</p>\n<p>拥塞避免和Slow Start是不同的算法，当拥塞发生时，我们需要减缓发送速率，需要使用拥塞避免算法和Slow Start的结合。需要维护两个变量：</p>\n<ul>\n<li>拥塞窗口（congestion window，<i>cwnd</i>）</li>\n<li>慢启动门槛（slow start threshold size， <i>ssthresh</i>）</li>\n</ul>\n<p>算法具体操作如下：</p>\n<ol>\n<li><p>将<i>cwnd</i>初始化为1个Segment，<i>ssthresh</i>初始化为65535个字节。</p>\n</li>\n<li><p>TCP不会发送大于<i>cwnd</i>和advertised window中更小者的数据量。</p>\n</li>\n<li><p>当拥塞发生后（超时或连续收到3个相同的ACK），<strong>将<i>ssthresh</i>设置为当前窗口的一半（<i>cwnd</i>和advertised window的更小者，但至少是2个Segment）</strong>，如果拥塞发生的原因是超时，那么<i>cwnd</i>设置为1个segment。</p>\n</li>\n<li><p>当新的数据被ACK后，我们需要增加<i>cwnd</i>，但增加的方式取决于我们在进行慢启动还是拥塞避免。</p>\n<p>如果<i>cwnd</i>小于等于<i>ssthresh</i>，我们做慢启动，不然我们就是处于拥塞避免阶段。Slow Start到我们拥塞发生的地方，然后拥塞避免就开始了。</p>\n<p>Slow Start的<i>cwnd</i>刚开始是1个Segment，每次收到收到一个ACK就会增加1.增长的速率是指数倍的，1，2，4…这也就是为什么拥塞发生时，<i>ssthresh</i>要减少至一半。拥塞避免阶段，每次收到一个ACK，增加1/<i>cwnd</i>。</p>\n<p>我们在这里提到增长以段为单元，实际上是按照字节来的。</p>\n</li>\n</ol>\n<h4 id=\"Fast-Retransmit-and-Fast-Recovery\"><a href=\"#Fast-Retransmit-and-Fast-Recovery\" class=\"headerlink\" title=\"Fast Retransmit and Fast Recovery\"></a>Fast Retransmit and Fast Recovery</h4><p>有时不用等到超时我们就能判断丢包，当我们连续收到3个或以上相同的ACK，我们便可以知道极大可能是发生了丢包。这叫做<b>快重传</b>。另外，正如在上面提到的，不会开始慢启动，而是采取叫做快恢复的方式。之所以采用快恢复是因为我们注意到还是收到了3个ACK，说明当前的网络状况不算太糟糕。没必要启用慢启动。</p>\n<p>算法的步骤大致如下：</p>\n<ul>\n<li><p>当收到重复的ACK后，设置<i>ssthresh</i>为窗口的一半。（<i>cwnd</i>和advertised window的更小者，至少是2个Segment）</p>\n<p>重传丢失的Segment，设置<i>cwnd</i>为<i>ssthresh</i>+3个Segment大小。</p>\n</li>\n<li><p>每次收到重复的ACK，将<i>cwnd</i>增加一个Segment大小，然后重传一个包。</p>\n</li>\n<li><p>当下一个对新数据的ACK到达后，将<i>cwnd</i>设置为<i>ssthresh</i>。</p>\n</li>\n</ul>\n<p>具体的计算实例参考《TCP/IP详解 Vol1》p314</p>\n<h3 id=\"TCP-Persist-Timer\"><a href=\"#TCP-Persist-Timer\" class=\"headerlink\" title=\"TCP Persist Timer\"></a>TCP Persist Timer</h3><p>假设我们有A，B双方通信，A准备给B发送消息，无奈B的接收窗口一直为0。后来B腾出了空间，将这个信息告诉A，可惜这个信息还丢了。因为这个信息不存在重传，所以导致了一个A想给B发信息发不了，B在等A信息的局面。</p>\n<p>这时就需要使用使用Persist Timer，当A收到B的通告说接收窗口为0时，A会设置一个Persist Timer，一旦过了这个时间还没有B窗口能用的信息，它就怀疑是ACK丢了，于是它发送一个window probe，询问信息。如果ACK没丢，只是单纯的没地方，那么B的回复就重置Persist Timer，并且时间翻倍。</p>\n<h4 id=\"糊涂窗口症状\"><a href=\"#糊涂窗口症状\" class=\"headerlink\" title=\"糊涂窗口症状\"></a>糊涂窗口症状</h4><p>所谓的糊涂窗口症状是说，总是小的数据在传递，而不是一个满的数据段。</p>\n<p>它的发生可能是两端的原因：接受方通告了太小的接收窗口（而不是等窗口大一点后再通告）；或者发送方发送少量数据，而不是等到积累一定数据量后一起发。为避免糊涂窗口症状，两端都在为此付出努力。</p>\n<ul>\n<li>接受方禁止通告小窗口，一般的算法是，等到可接收窗口的大小到了min（Segment，buffer space / 2）再做通告</li>\n<li>发送方只有再满足如下条件才传输数据：<ul>\n<li>Segment数据能够传送。</li>\n<li>能传送对端advertise过的最大窗口的一半的数据。</li>\n<li>我们能发送任何已有数据，要么我们开启了Nagle算法但不存在未确认数据了，要么禁止了Nagle算法。</li>\n</ul>\n</li>\n</ul>\n<p>这里就有可能发生一种情况，B给A通告的窗口大于一个Segment，A发送的数据为一个Segment，此时B的窗口不足以通告，但是必须通告，并且这个值不能为0，不然A的发送窗口就出现了右端左移的情况。</p>\n<p>具体的例子参考《TCP/IP详解 Vol1》p329</p>\n<h3 id=\"TCP-Keepalive-Timer\"><a href=\"#TCP-Keepalive-Timer\" class=\"headerlink\" title=\"TCP Keepalive Timer\"></a>TCP Keepalive Timer</h3><p>通常设置keepalive选项的是服务器，为了判断当前是否是half open状态。</p>\n<p>如果当前连接已经两个小时没有互动了，服务器就会发送一个Probe Segment到客户端，客户可能处于以下几种状态：</p>\n<ul>\n<li>运行并可达，这时客户端会响应服务端，让它知道自己一切都好，然后服务端重新设置keepalive timer为2个小时。</li>\n<li>宕机，服务器收不到回复，并且在75秒后超时。服务器一共会发10个，分隔75秒，如果一个回复都收不到，服务器都会猜测客户端已经宕机，随机关闭连接。</li>\n<li>宕机又重启，这时客户端收到Probe，因为刚重启，会相应一个Reset，导致服务端终止连接。</li>\n<li>运行不可达，这种情况类似第二种，TCP不能辨别。</li>\n</ul>\n"},{"title":"Effective C++读书笔记<六>","date":"2019-05-06T16:00:00.000Z","_content":"\n## 《Effective C++》读书笔记<六>\n\n#### Item 32：明确你的public继承塑模出is-a关系\n\n如果令class D以public方式继承class B，相当于告诉编译器，每个类型为D的对象同时也是一个类型为B的对象。你的意思是B比D表现出更为一般的概念，而D比B表现出更特殊化的概念。<b>凡是B对象可以派上用场的地方，D对象一样可以排上用场</b>\n\n\n\n#### Item 33：避免遮掩继承而来的名称\n\n如果你在使用public继承，但是却不继承base的函数，便是对<b>is-a</b>关系的违反。\n\n倘若你在子类D中定义了从B中继承而来的同名函数，那么从<b>名称查找</b>的观念来看，B中的函数便不再被继承。你在D中定义的函数遮掩了继承的函数。\n\n```C++\nclass B{\npublic:  \n    virtual void f1() = 0;\n    virtual void f1(int);\n    virtual void f2();\n    void f3();\n    void f3(int);\n};\n\nclass D:public B{\npublic:\n    virtual void f1();//override f1(), but hide f1(int). \n    void f3();//hide f3().\n    void f4();\n};\n```\n\n你可以使用using声明解决问题\n\n```c++\nclass D:public B{\npublic:\n    using B::f1;\n    using B::f3;\n    virtual void f1(); \n    void f3();\n    void f4();\n};\n\nD d;\nd.f1(); // D::f1.\nd.f1(1); // B::f1.\nd.f2(); // B::f2.\nd.f3(); // D::f3.\nd.f3(1); // B::f3.\n```\n\n值得注意的是，<b>using的意思与字面有区别，不是说接下来的调用都是使用这个using指明的范围，而是说让using指明的名字在当前作用域可见。</b>\n\n有时候不想继承基类所有的函数，而是说只想继承一部分。当然这对于public继承是不可能的，但是对于private继承有时候可能会有这种需求。这个时候使用using会暴露父类所有该名函数，我们需要不同的技术，叫做<b>转交函数</b>。\n\n```c++\nclass Base{\npublic:\n    virtual void f1() = 0;\n    virtual void f1(int);\n};\nclass Derived: private Base{\npublic:\n    virtual void f1(){//转交函数，遮掩父类所有f1函数\n        Base::f1();//暗自成为inline.\n    }\n};\n\nD d;\nd.f1();// 调用D::f1()->B::f1().\nd.f1(1);// 错误.\n```\n\n\n\n#### Item 34：区分接口继承和实现继承\n\n身为class设计者，有时你会希望derived classes只继承成员函数的接口；有时你又会希望derived class同时继承函数的接口和实现，但又能override它们所继承的实现；有时你希望derived classes同时继承函数的接口和实现，并且不允许覆写任何东西。\n\n- 成员函数总是会被继承。public继承意味着is-a的关系，父类所有的函数在子类上都能施行。\n- pure函数是为了让derived classes只继承函数接口。(我们可以为纯虚函数提供定义，但是意义不大)\n- 声明impure virtual函数是为了让derived classes继承该函数的接口和缺省实现。它表示每个子类都必须支持这样一个函数，如果不想写，可使用缺省版本。\n- 声明non-virtual函数目的是为了令derived classes继承一份接口和一份将强制性实现。\n\n\n\n#### Item 35：考虑virtual函数以外的其他选择\n\n假设我们现在写一款游戏，不同角色攻击时会释放不同的技能，可能我们会想到使用virtual函数，让特殊角色都继承于GameCharacter，GameCharacter提供了一份缺省实现，特殊角色可针对自己的情况改写攻击函数。\n\n当然这也是我们最常规的办法，除此之外，也存在着许多其他的方式供我们选择。\n\n- <b>Non-Virtual Interface的手法实现Template Method模式</b>\n\n```c++\nclass GameCharacter{\npublic:\n    void attack(){\n        beforeAttack();\n        doAttack();\n        afterAttack();\n    }\nprivate:\n    virtual void doAttack(){\n        ...\n    }\n};\n```\n\n这就是所谓的NVI手法，attack是作为doAttack的外覆器。\n\nNVI的优势在于我们可以在进行实际操作前后做些处理，正如我们beforeAttack()，afterAttack()写的那样。\n\n- <b>基于Function Pointers实现的Strategy模式</b>\n\n我们可以让不同角色保存一个函数指针，该函数指针执行特殊攻击操作。但是这样存在一个问题，就是函数指针指向的函数可能需要访问对象的私有元素，这样可能就需要采用friend关键字来为函数特殊访问权限。\n\n- <b>基于std::function实现的Strategy模式</b>\n\n与上面的Function Pointers相似，只不过<i>std::function</i>具有更好的封装，可以保存成员函数。\n\n- <b>传统的Strategy模式</b>\n\n让不同操作封装在不同类里，并形成继承链，在不同角色中保存有这些操作的对象，并在角色的攻击函数中调用操作对象的接口。\n\n这里只是介绍传统的Strategy模式，在这个例子里面意义不大。\n\n\n\n#### Item 36：绝不重新定义继承而来的non-virtual函数\n\n因为这个时候对于一个D对象，通过B指针访问该函数和通过D指针访问该函数的表现不再相同。也就是说用到D指针的地方不能用B指针替代，也就是违背了public继承is-a的关系。\n\n很显然，父类的non-virtual函数体现了某种<b>不变性</b>，一旦子类改变定义，便是对is-a关系的违反。如果希望子类对某些函数表现出特异性，这时就需要virtual关键字，virtual函数通过虚函数表的机制，向子类提供了一种保证：你可以大可以重新定义我，我将仍然维护is-a关系。因为D对象不论是通过D指针还是通过B指针访问，表现都是相同的。\n\n\n\n#### Item 37：绝不重新定义继承而来的缺省参数值\n\nvirtual函数是动态绑定的，而缺省参数值确实静态绑定的。\n\n```C++\nclass A{\npublic:\n    virtual void f(int i = 0);\n}\nclass B:public A{\npublic:\n\tvoid f(int i = 1);\n}\nA* a = new B();\na->f();//我们可能期待参数为1，但实际上是0\n```\n\n在上面的例子里面，我们重新定义了继承而来的缺省参数值，但通过指针或引用来访问时，由于缺省参数值是静态绑定的，a的静态类型是A，所以我们绑定了缺省参数值0，在运行时才调用到B::f()，这就很容易造成误解，所以最好的做法是不要重新定义继承而来的缺省参数值。\n\n之所以让绑定缺省参数在编译器进行，是为了降低运行期的开销。\n\n\n\n#### Item 38：通过复合塑模出has-a或is-implemented-in-terms-of\n\n复合有两个意义。复合意味<i>has-a</i>或<i>is-implemented-in-terms-of</i>。程序中的对象其实相当于你所塑造的世界中的某些事物，例如人、汽车、视频画面等等。这样的对象属于<b>应用域部分</b>。其他对象则纯粹是实现细节上的人工制品，像是缓冲区、互斥器、查找树等等。这些对象属于<b>实现域部分</b>。复合发生于应用域内对象之间，表现出<i>has-a</i>关系，当发生于实现域内则是表现<i>is-implemented-in-terms-of</i>关系。\n\n\n\n#### Item 39：明智而谨慎地使用private继承\n\n```c++\nclass Person{};\nclass Student:private Person{};\nvoid eat(const Person&);\nvoid study(const Student&);\n\nPerson p;\nStudent s;\neat(p);//正确\neat(s);//错误，没有is-a关系\n```\n\nprivate继承意味着implemented-in-terms-of。如果让D以private形式继承B，用意是采用B中已经备妥的某些特性，不是因为B和D有任何观念上的关系。\n\nprivate继承与复合有点相似，我们在两者间的取舍可总结为：尽可能使用复合，必要时才使用private继承。private继承主要用于<B>\"一个意欲成为derived class者像访问一个意欲成为base class者的protected成分，或为了重新定义一或多个virtual函数\"。</B>\n\n```c++\n/*private继承*/\nclass Timer{\npublic:\n    explicit Timer(int tickFrequency);\n    virtual void onTick() const;\n};\n\nclass Widget: private Timer{\nprivate:\n    virtual void onTick() const;\n}//Widget可以调用onTick().\n\n/*普通复合*/\nclass Widget{\nprivate:\n    class WidgetTimer:public Timer{\n    public:\n        virtual void onTick() const;\n    };//定义于Widget内部,让其他类无法继承WidgetTimer。\n    WidgetTimer timer;\n};\n```\n\n另外在一种激进情况涉及空间最优化，可能促使你选择\"private继承\"而不是\"继承加复合\"。\n\n```c++\nclass Empty{};\nclass HoldAnInt{\nprivate:\n    int x;\n    Empty e;\n};//sizeof(HoldAnInt) > sizeof(int)\n\n//独立对象大小不为零。\n//sizeoff(Empty) == 1.编译器默默安插一个char到空对象里，虽然char不算大，但在复合关系里，可能存在对齐问题，导致额外的padding开销。\n\n```\n\n我们提到了独立对象不为零，如果该对象是作为另一对象的附带情况就会不一样了。\n\n```c++\nclass HoldAnInt:private Empty{\nprivate:\n    int x;\n};\n//这个时候sizeof(HoldAnInt) == sizeof(int)\n```\n\n这就是所谓的<b>EBO优化(empty base optimization)</b>\n\n\n\n#### Item 40：明智而谨慎的选择多继承\n\n- 多重继承比单一继承复杂。可能导致歧义性，以及对virtual继承的需要。\n- virtual继承会增加大小、速度、初始化复杂度等等成本。如果virtual base classes不带任何数据，将是最有使用价值的情况。\n- 多重继承有正当用途。其中一个情节涉及\"public继承某个Interface class\"和“private继承某个协助实现的class“两相组合\n\n\n\n","source":"_posts/C++/2019-05-07-EffectiveC++读书笔记[6].md","raw":"---\ntitle: Effective C++读书笔记<六>\ncategories: C++\ntags: [C++,读书笔记,Effective C++]\ndate: 2019-05-07\n---\n\n## 《Effective C++》读书笔记<六>\n\n#### Item 32：明确你的public继承塑模出is-a关系\n\n如果令class D以public方式继承class B，相当于告诉编译器，每个类型为D的对象同时也是一个类型为B的对象。你的意思是B比D表现出更为一般的概念，而D比B表现出更特殊化的概念。<b>凡是B对象可以派上用场的地方，D对象一样可以排上用场</b>\n\n\n\n#### Item 33：避免遮掩继承而来的名称\n\n如果你在使用public继承，但是却不继承base的函数，便是对<b>is-a</b>关系的违反。\n\n倘若你在子类D中定义了从B中继承而来的同名函数，那么从<b>名称查找</b>的观念来看，B中的函数便不再被继承。你在D中定义的函数遮掩了继承的函数。\n\n```C++\nclass B{\npublic:  \n    virtual void f1() = 0;\n    virtual void f1(int);\n    virtual void f2();\n    void f3();\n    void f3(int);\n};\n\nclass D:public B{\npublic:\n    virtual void f1();//override f1(), but hide f1(int). \n    void f3();//hide f3().\n    void f4();\n};\n```\n\n你可以使用using声明解决问题\n\n```c++\nclass D:public B{\npublic:\n    using B::f1;\n    using B::f3;\n    virtual void f1(); \n    void f3();\n    void f4();\n};\n\nD d;\nd.f1(); // D::f1.\nd.f1(1); // B::f1.\nd.f2(); // B::f2.\nd.f3(); // D::f3.\nd.f3(1); // B::f3.\n```\n\n值得注意的是，<b>using的意思与字面有区别，不是说接下来的调用都是使用这个using指明的范围，而是说让using指明的名字在当前作用域可见。</b>\n\n有时候不想继承基类所有的函数，而是说只想继承一部分。当然这对于public继承是不可能的，但是对于private继承有时候可能会有这种需求。这个时候使用using会暴露父类所有该名函数，我们需要不同的技术，叫做<b>转交函数</b>。\n\n```c++\nclass Base{\npublic:\n    virtual void f1() = 0;\n    virtual void f1(int);\n};\nclass Derived: private Base{\npublic:\n    virtual void f1(){//转交函数，遮掩父类所有f1函数\n        Base::f1();//暗自成为inline.\n    }\n};\n\nD d;\nd.f1();// 调用D::f1()->B::f1().\nd.f1(1);// 错误.\n```\n\n\n\n#### Item 34：区分接口继承和实现继承\n\n身为class设计者，有时你会希望derived classes只继承成员函数的接口；有时你又会希望derived class同时继承函数的接口和实现，但又能override它们所继承的实现；有时你希望derived classes同时继承函数的接口和实现，并且不允许覆写任何东西。\n\n- 成员函数总是会被继承。public继承意味着is-a的关系，父类所有的函数在子类上都能施行。\n- pure函数是为了让derived classes只继承函数接口。(我们可以为纯虚函数提供定义，但是意义不大)\n- 声明impure virtual函数是为了让derived classes继承该函数的接口和缺省实现。它表示每个子类都必须支持这样一个函数，如果不想写，可使用缺省版本。\n- 声明non-virtual函数目的是为了令derived classes继承一份接口和一份将强制性实现。\n\n\n\n#### Item 35：考虑virtual函数以外的其他选择\n\n假设我们现在写一款游戏，不同角色攻击时会释放不同的技能，可能我们会想到使用virtual函数，让特殊角色都继承于GameCharacter，GameCharacter提供了一份缺省实现，特殊角色可针对自己的情况改写攻击函数。\n\n当然这也是我们最常规的办法，除此之外，也存在着许多其他的方式供我们选择。\n\n- <b>Non-Virtual Interface的手法实现Template Method模式</b>\n\n```c++\nclass GameCharacter{\npublic:\n    void attack(){\n        beforeAttack();\n        doAttack();\n        afterAttack();\n    }\nprivate:\n    virtual void doAttack(){\n        ...\n    }\n};\n```\n\n这就是所谓的NVI手法，attack是作为doAttack的外覆器。\n\nNVI的优势在于我们可以在进行实际操作前后做些处理，正如我们beforeAttack()，afterAttack()写的那样。\n\n- <b>基于Function Pointers实现的Strategy模式</b>\n\n我们可以让不同角色保存一个函数指针，该函数指针执行特殊攻击操作。但是这样存在一个问题，就是函数指针指向的函数可能需要访问对象的私有元素，这样可能就需要采用friend关键字来为函数特殊访问权限。\n\n- <b>基于std::function实现的Strategy模式</b>\n\n与上面的Function Pointers相似，只不过<i>std::function</i>具有更好的封装，可以保存成员函数。\n\n- <b>传统的Strategy模式</b>\n\n让不同操作封装在不同类里，并形成继承链，在不同角色中保存有这些操作的对象，并在角色的攻击函数中调用操作对象的接口。\n\n这里只是介绍传统的Strategy模式，在这个例子里面意义不大。\n\n\n\n#### Item 36：绝不重新定义继承而来的non-virtual函数\n\n因为这个时候对于一个D对象，通过B指针访问该函数和通过D指针访问该函数的表现不再相同。也就是说用到D指针的地方不能用B指针替代，也就是违背了public继承is-a的关系。\n\n很显然，父类的non-virtual函数体现了某种<b>不变性</b>，一旦子类改变定义，便是对is-a关系的违反。如果希望子类对某些函数表现出特异性，这时就需要virtual关键字，virtual函数通过虚函数表的机制，向子类提供了一种保证：你可以大可以重新定义我，我将仍然维护is-a关系。因为D对象不论是通过D指针还是通过B指针访问，表现都是相同的。\n\n\n\n#### Item 37：绝不重新定义继承而来的缺省参数值\n\nvirtual函数是动态绑定的，而缺省参数值确实静态绑定的。\n\n```C++\nclass A{\npublic:\n    virtual void f(int i = 0);\n}\nclass B:public A{\npublic:\n\tvoid f(int i = 1);\n}\nA* a = new B();\na->f();//我们可能期待参数为1，但实际上是0\n```\n\n在上面的例子里面，我们重新定义了继承而来的缺省参数值，但通过指针或引用来访问时，由于缺省参数值是静态绑定的，a的静态类型是A，所以我们绑定了缺省参数值0，在运行时才调用到B::f()，这就很容易造成误解，所以最好的做法是不要重新定义继承而来的缺省参数值。\n\n之所以让绑定缺省参数在编译器进行，是为了降低运行期的开销。\n\n\n\n#### Item 38：通过复合塑模出has-a或is-implemented-in-terms-of\n\n复合有两个意义。复合意味<i>has-a</i>或<i>is-implemented-in-terms-of</i>。程序中的对象其实相当于你所塑造的世界中的某些事物，例如人、汽车、视频画面等等。这样的对象属于<b>应用域部分</b>。其他对象则纯粹是实现细节上的人工制品，像是缓冲区、互斥器、查找树等等。这些对象属于<b>实现域部分</b>。复合发生于应用域内对象之间，表现出<i>has-a</i>关系，当发生于实现域内则是表现<i>is-implemented-in-terms-of</i>关系。\n\n\n\n#### Item 39：明智而谨慎地使用private继承\n\n```c++\nclass Person{};\nclass Student:private Person{};\nvoid eat(const Person&);\nvoid study(const Student&);\n\nPerson p;\nStudent s;\neat(p);//正确\neat(s);//错误，没有is-a关系\n```\n\nprivate继承意味着implemented-in-terms-of。如果让D以private形式继承B，用意是采用B中已经备妥的某些特性，不是因为B和D有任何观念上的关系。\n\nprivate继承与复合有点相似，我们在两者间的取舍可总结为：尽可能使用复合，必要时才使用private继承。private继承主要用于<B>\"一个意欲成为derived class者像访问一个意欲成为base class者的protected成分，或为了重新定义一或多个virtual函数\"。</B>\n\n```c++\n/*private继承*/\nclass Timer{\npublic:\n    explicit Timer(int tickFrequency);\n    virtual void onTick() const;\n};\n\nclass Widget: private Timer{\nprivate:\n    virtual void onTick() const;\n}//Widget可以调用onTick().\n\n/*普通复合*/\nclass Widget{\nprivate:\n    class WidgetTimer:public Timer{\n    public:\n        virtual void onTick() const;\n    };//定义于Widget内部,让其他类无法继承WidgetTimer。\n    WidgetTimer timer;\n};\n```\n\n另外在一种激进情况涉及空间最优化，可能促使你选择\"private继承\"而不是\"继承加复合\"。\n\n```c++\nclass Empty{};\nclass HoldAnInt{\nprivate:\n    int x;\n    Empty e;\n};//sizeof(HoldAnInt) > sizeof(int)\n\n//独立对象大小不为零。\n//sizeoff(Empty) == 1.编译器默默安插一个char到空对象里，虽然char不算大，但在复合关系里，可能存在对齐问题，导致额外的padding开销。\n\n```\n\n我们提到了独立对象不为零，如果该对象是作为另一对象的附带情况就会不一样了。\n\n```c++\nclass HoldAnInt:private Empty{\nprivate:\n    int x;\n};\n//这个时候sizeof(HoldAnInt) == sizeof(int)\n```\n\n这就是所谓的<b>EBO优化(empty base optimization)</b>\n\n\n\n#### Item 40：明智而谨慎的选择多继承\n\n- 多重继承比单一继承复杂。可能导致歧义性，以及对virtual继承的需要。\n- virtual继承会增加大小、速度、初始化复杂度等等成本。如果virtual base classes不带任何数据，将是最有使用价值的情况。\n- 多重继承有正当用途。其中一个情节涉及\"public继承某个Interface class\"和“private继承某个协助实现的class“两相组合\n\n\n\n","slug":"C++/2019-05-07-EffectiveC++读书笔记[6]","published":1,"updated":"2019-05-07T09:23:31.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdlcryd000reguhvl81k6n2","content":"<h2 id=\"《Effective-C-》读书笔记-lt-六-gt\"><a href=\"#《Effective-C-》读书笔记-lt-六-gt\" class=\"headerlink\" title=\"《Effective C++》读书笔记&lt;六&gt;\"></a>《Effective C++》读书笔记&lt;六&gt;</h2><h4 id=\"Item-32：明确你的public继承塑模出is-a关系\"><a href=\"#Item-32：明确你的public继承塑模出is-a关系\" class=\"headerlink\" title=\"Item 32：明确你的public继承塑模出is-a关系\"></a>Item 32：明确你的public继承塑模出is-a关系</h4><p>如果令class D以public方式继承class B，相当于告诉编译器，每个类型为D的对象同时也是一个类型为B的对象。你的意思是B比D表现出更为一般的概念，而D比B表现出更特殊化的概念。<b>凡是B对象可以派上用场的地方，D对象一样可以排上用场</b></p>\n<h4 id=\"Item-33：避免遮掩继承而来的名称\"><a href=\"#Item-33：避免遮掩继承而来的名称\" class=\"headerlink\" title=\"Item 33：避免遮掩继承而来的名称\"></a>Item 33：避免遮掩继承而来的名称</h4><p>如果你在使用public继承，但是却不继承base的函数，便是对<b>is-a</b>关系的违反。</p>\n<p>倘若你在子类D中定义了从B中继承而来的同名函数，那么从<b>名称查找</b>的观念来看，B中的函数便不再被继承。你在D中定义的函数遮掩了继承的函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f1</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f1</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f3</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span>:</span><span class=\"keyword\">public</span> B&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f1</span><span class=\"params\">()</span></span>;<span class=\"comment\">//override f1(), but hide f1(int). </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f3</span><span class=\"params\">()</span></span>;<span class=\"comment\">//hide f3().</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f4</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>你可以使用using声明解决问题</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span>:</span><span class=\"keyword\">public</span> B&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">using</span> B::f1;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> B::f3;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f1</span><span class=\"params\">()</span></span>; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f4</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">D d;</span><br><span class=\"line\">d.f1(); <span class=\"comment\">// D::f1.</span></span><br><span class=\"line\">d.f1(<span class=\"number\">1</span>); <span class=\"comment\">// B::f1.</span></span><br><span class=\"line\">d.f2(); <span class=\"comment\">// B::f2.</span></span><br><span class=\"line\">d.f3(); <span class=\"comment\">// D::f3.</span></span><br><span class=\"line\">d.f3(<span class=\"number\">1</span>); <span class=\"comment\">// B::f3.</span></span><br></pre></td></tr></table></figure>\n<p>值得注意的是，<b>using的意思与字面有区别，不是说接下来的调用都是使用这个using指明的范围，而是说让using指明的名字在当前作用域可见。</b></p>\n<p>有时候不想继承基类所有的函数，而是说只想继承一部分。当然这对于public继承是不可能的，但是对于private继承有时候可能会有这种需求。这个时候使用using会暴露父类所有该名函数，我们需要不同的技术，叫做<b>转交函数</b>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f1</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f1</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span>:</span> <span class=\"keyword\">private</span> Base&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f1</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">//转交函数，遮掩父类所有f1函数</span></span><br><span class=\"line\">        Base::f1();<span class=\"comment\">//暗自成为inline.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">D d;</span><br><span class=\"line\">d.f1();<span class=\"comment\">// 调用D::f1()-&gt;B::f1().</span></span><br><span class=\"line\">d.f1(<span class=\"number\">1</span>);<span class=\"comment\">// 错误.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Item-34：区分接口继承和实现继承\"><a href=\"#Item-34：区分接口继承和实现继承\" class=\"headerlink\" title=\"Item 34：区分接口继承和实现继承\"></a>Item 34：区分接口继承和实现继承</h4><p>身为class设计者，有时你会希望derived classes只继承成员函数的接口；有时你又会希望derived class同时继承函数的接口和实现，但又能override它们所继承的实现；有时你希望derived classes同时继承函数的接口和实现，并且不允许覆写任何东西。</p>\n<ul>\n<li>成员函数总是会被继承。public继承意味着is-a的关系，父类所有的函数在子类上都能施行。</li>\n<li>pure函数是为了让derived classes只继承函数接口。(我们可以为纯虚函数提供定义，但是意义不大)</li>\n<li>声明impure virtual函数是为了让derived classes继承该函数的接口和缺省实现。它表示每个子类都必须支持这样一个函数，如果不想写，可使用缺省版本。</li>\n<li>声明non-virtual函数目的是为了令derived classes继承一份接口和一份将强制性实现。</li>\n</ul>\n<h4 id=\"Item-35：考虑virtual函数以外的其他选择\"><a href=\"#Item-35：考虑virtual函数以外的其他选择\" class=\"headerlink\" title=\"Item 35：考虑virtual函数以外的其他选择\"></a>Item 35：考虑virtual函数以外的其他选择</h4><p>假设我们现在写一款游戏，不同角色攻击时会释放不同的技能，可能我们会想到使用virtual函数，让特殊角色都继承于GameCharacter，GameCharacter提供了一份缺省实现，特殊角色可针对自己的情况改写攻击函数。</p>\n<p>当然这也是我们最常规的办法，除此之外，也存在着许多其他的方式供我们选择。</p>\n<ul>\n<li><b>Non-Virtual Interface的手法实现Template Method模式</b></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameCharacter</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">attack</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        beforeAttack();</span><br><span class=\"line\">        doAttack();</span><br><span class=\"line\">        afterAttack();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">doAttack</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这就是所谓的NVI手法，attack是作为doAttack的外覆器。</p>\n<p>NVI的优势在于我们可以在进行实际操作前后做些处理，正如我们beforeAttack()，afterAttack()写的那样。</p>\n<ul>\n<li><b>基于Function Pointers实现的Strategy模式</b></li>\n</ul>\n<p>我们可以让不同角色保存一个函数指针，该函数指针执行特殊攻击操作。但是这样存在一个问题，就是函数指针指向的函数可能需要访问对象的私有元素，这样可能就需要采用friend关键字来为函数特殊访问权限。</p>\n<ul>\n<li><b>基于std::function实现的Strategy模式</b></li>\n</ul>\n<p>与上面的Function Pointers相似，只不过<i>std::function</i>具有更好的封装，可以保存成员函数。</p>\n<ul>\n<li><b>传统的Strategy模式</b></li>\n</ul>\n<p>让不同操作封装在不同类里，并形成继承链，在不同角色中保存有这些操作的对象，并在角色的攻击函数中调用操作对象的接口。</p>\n<p>这里只是介绍传统的Strategy模式，在这个例子里面意义不大。</p>\n<h4 id=\"Item-36：绝不重新定义继承而来的non-virtual函数\"><a href=\"#Item-36：绝不重新定义继承而来的non-virtual函数\" class=\"headerlink\" title=\"Item 36：绝不重新定义继承而来的non-virtual函数\"></a>Item 36：绝不重新定义继承而来的non-virtual函数</h4><p>因为这个时候对于一个D对象，通过B指针访问该函数和通过D指针访问该函数的表现不再相同。也就是说用到D指针的地方不能用B指针替代，也就是违背了public继承is-a的关系。</p>\n<p>很显然，父类的non-virtual函数体现了某种<b>不变性</b>，一旦子类改变定义，便是对is-a关系的违反。如果希望子类对某些函数表现出特异性，这时就需要virtual关键字，virtual函数通过虚函数表的机制，向子类提供了一种保证：你可以大可以重新定义我，我将仍然维护is-a关系。因为D对象不论是通过D指针还是通过B指针访问，表现都是相同的。</p>\n<h4 id=\"Item-37：绝不重新定义继承而来的缺省参数值\"><a href=\"#Item-37：绝不重新定义继承而来的缺省参数值\" class=\"headerlink\" title=\"Item 37：绝不重新定义继承而来的缺省参数值\"></a>Item 37：绝不重新定义继承而来的缺省参数值</h4><p>virtual函数是动态绑定的，而缺省参数值确实静态绑定的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>:</span><span class=\"keyword\">public</span> A&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">A* a = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">a-&gt;f();<span class=\"comment\">//我们可能期待参数为1，但实际上是0</span></span><br></pre></td></tr></table></figure>\n<p>在上面的例子里面，我们重新定义了继承而来的缺省参数值，但通过指针或引用来访问时，由于缺省参数值是静态绑定的，a的静态类型是A，所以我们绑定了缺省参数值0，在运行时才调用到B::f()，这就很容易造成误解，所以最好的做法是不要重新定义继承而来的缺省参数值。</p>\n<p>之所以让绑定缺省参数在编译器进行，是为了降低运行期的开销。</p>\n<h4 id=\"Item-38：通过复合塑模出has-a或is-implemented-in-terms-of\"><a href=\"#Item-38：通过复合塑模出has-a或is-implemented-in-terms-of\" class=\"headerlink\" title=\"Item 38：通过复合塑模出has-a或is-implemented-in-terms-of\"></a>Item 38：通过复合塑模出has-a或is-implemented-in-terms-of</h4><p>复合有两个意义。复合意味<i>has-a</i>或<i>is-implemented-in-terms-of</i>。程序中的对象其实相当于你所塑造的世界中的某些事物，例如人、汽车、视频画面等等。这样的对象属于<b>应用域部分</b>。其他对象则纯粹是实现细节上的人工制品，像是缓冲区、互斥器、查找树等等。这些对象属于<b>实现域部分</b>。复合发生于应用域内对象之间，表现出<i>has-a</i>关系，当发生于实现域内则是表现<i>is-implemented-in-terms-of</i>关系。</p>\n<h4 id=\"Item-39：明智而谨慎地使用private继承\"><a href=\"#Item-39：明智而谨慎地使用private继承\" class=\"headerlink\" title=\"Item 39：明智而谨慎地使用private继承\"></a>Item 39：明智而谨慎地使用private继承</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>&#123;</span>&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>:</span><span class=\"keyword\">private</span> Person&#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(<span class=\"keyword\">const</span> Person&amp;)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">(<span class=\"keyword\">const</span> Student&amp;)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Person p;</span><br><span class=\"line\">Student s;</span><br><span class=\"line\">eat(p);<span class=\"comment\">//正确</span></span><br><span class=\"line\">eat(s);<span class=\"comment\">//错误，没有is-a关系</span></span><br></pre></td></tr></table></figure>\n<p>private继承意味着implemented-in-terms-of。如果让D以private形式继承B，用意是采用B中已经备妥的某些特性，不是因为B和D有任何观念上的关系。</p>\n<p>private继承与复合有点相似，我们在两者间的取舍可总结为：尽可能使用复合，必要时才使用private继承。private继承主要用于<b>“一个意欲成为derived class者像访问一个意欲成为base class者的protected成分，或为了重新定义一或多个virtual函数”。</b></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*private继承*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">Timer</span><span class=\"params\">(<span class=\"keyword\">int</span> tickFrequency)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">onTick</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span>:</span> <span class=\"keyword\">private</span> Timer&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">onTick</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">//Widget可以调用onTick().</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*普通复合*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetTimer</span>:</span><span class=\"keyword\">public</span> Timer&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">onTick</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">    &#125;;<span class=\"comment\">//定义于Widget内部,让其他类无法继承WidgetTimer。</span></span><br><span class=\"line\">    WidgetTimer timer;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>另外在一种激进情况涉及空间最优化，可能促使你选择”private继承”而不是”继承加复合”。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Empty</span>&#123;</span>&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoldAnInt</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    Empty e;</span><br><span class=\"line\">&#125;;<span class=\"comment\">//sizeof(HoldAnInt) &gt; sizeof(int)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//独立对象大小不为零。</span></span><br><span class=\"line\"><span class=\"comment\">//sizeoff(Empty) == 1.编译器默默安插一个char到空对象里，虽然char不算大，但在复合关系里，可能存在对齐问题，导致额外的padding开销。</span></span><br></pre></td></tr></table></figure>\n<p>我们提到了独立对象不为零，如果该对象是作为另一对象的附带情况就会不一样了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoldAnInt</span>:</span><span class=\"keyword\">private</span> Empty&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//这个时候sizeof(HoldAnInt) == sizeof(int)</span></span><br></pre></td></tr></table></figure>\n<p>这就是所谓的<b>EBO优化(empty base optimization)</b></p>\n<h4 id=\"Item-40：明智而谨慎的选择多继承\"><a href=\"#Item-40：明智而谨慎的选择多继承\" class=\"headerlink\" title=\"Item 40：明智而谨慎的选择多继承\"></a>Item 40：明智而谨慎的选择多继承</h4><ul>\n<li>多重继承比单一继承复杂。可能导致歧义性，以及对virtual继承的需要。</li>\n<li>virtual继承会增加大小、速度、初始化复杂度等等成本。如果virtual base classes不带任何数据，将是最有使用价值的情况。</li>\n<li>多重继承有正当用途。其中一个情节涉及”public继承某个Interface class”和“private继承某个协助实现的class“两相组合</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"《Effective-C-》读书笔记-lt-六-gt\"><a href=\"#《Effective-C-》读书笔记-lt-六-gt\" class=\"headerlink\" title=\"《Effective C++》读书笔记&lt;六&gt;\"></a>《Effective C++》读书笔记&lt;六&gt;</h2><h4 id=\"Item-32：明确你的public继承塑模出is-a关系\"><a href=\"#Item-32：明确你的public继承塑模出is-a关系\" class=\"headerlink\" title=\"Item 32：明确你的public继承塑模出is-a关系\"></a>Item 32：明确你的public继承塑模出is-a关系</h4><p>如果令class D以public方式继承class B，相当于告诉编译器，每个类型为D的对象同时也是一个类型为B的对象。你的意思是B比D表现出更为一般的概念，而D比B表现出更特殊化的概念。<b>凡是B对象可以派上用场的地方，D对象一样可以排上用场</b></p>\n<h4 id=\"Item-33：避免遮掩继承而来的名称\"><a href=\"#Item-33：避免遮掩继承而来的名称\" class=\"headerlink\" title=\"Item 33：避免遮掩继承而来的名称\"></a>Item 33：避免遮掩继承而来的名称</h4><p>如果你在使用public继承，但是却不继承base的函数，便是对<b>is-a</b>关系的违反。</p>\n<p>倘若你在子类D中定义了从B中继承而来的同名函数，那么从<b>名称查找</b>的观念来看，B中的函数便不再被继承。你在D中定义的函数遮掩了继承的函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f1</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f1</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f3</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span>:</span><span class=\"keyword\">public</span> B&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f1</span><span class=\"params\">()</span></span>;<span class=\"comment\">//override f1(), but hide f1(int). </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f3</span><span class=\"params\">()</span></span>;<span class=\"comment\">//hide f3().</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f4</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>你可以使用using声明解决问题</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span>:</span><span class=\"keyword\">public</span> B&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">using</span> B::f1;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> B::f3;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f1</span><span class=\"params\">()</span></span>; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f4</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">D d;</span><br><span class=\"line\">d.f1(); <span class=\"comment\">// D::f1.</span></span><br><span class=\"line\">d.f1(<span class=\"number\">1</span>); <span class=\"comment\">// B::f1.</span></span><br><span class=\"line\">d.f2(); <span class=\"comment\">// B::f2.</span></span><br><span class=\"line\">d.f3(); <span class=\"comment\">// D::f3.</span></span><br><span class=\"line\">d.f3(<span class=\"number\">1</span>); <span class=\"comment\">// B::f3.</span></span><br></pre></td></tr></table></figure>\n<p>值得注意的是，<b>using的意思与字面有区别，不是说接下来的调用都是使用这个using指明的范围，而是说让using指明的名字在当前作用域可见。</b></p>\n<p>有时候不想继承基类所有的函数，而是说只想继承一部分。当然这对于public继承是不可能的，但是对于private继承有时候可能会有这种需求。这个时候使用using会暴露父类所有该名函数，我们需要不同的技术，叫做<b>转交函数</b>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f1</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f1</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span>:</span> <span class=\"keyword\">private</span> Base&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f1</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">//转交函数，遮掩父类所有f1函数</span></span><br><span class=\"line\">        Base::f1();<span class=\"comment\">//暗自成为inline.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">D d;</span><br><span class=\"line\">d.f1();<span class=\"comment\">// 调用D::f1()-&gt;B::f1().</span></span><br><span class=\"line\">d.f1(<span class=\"number\">1</span>);<span class=\"comment\">// 错误.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Item-34：区分接口继承和实现继承\"><a href=\"#Item-34：区分接口继承和实现继承\" class=\"headerlink\" title=\"Item 34：区分接口继承和实现继承\"></a>Item 34：区分接口继承和实现继承</h4><p>身为class设计者，有时你会希望derived classes只继承成员函数的接口；有时你又会希望derived class同时继承函数的接口和实现，但又能override它们所继承的实现；有时你希望derived classes同时继承函数的接口和实现，并且不允许覆写任何东西。</p>\n<ul>\n<li>成员函数总是会被继承。public继承意味着is-a的关系，父类所有的函数在子类上都能施行。</li>\n<li>pure函数是为了让derived classes只继承函数接口。(我们可以为纯虚函数提供定义，但是意义不大)</li>\n<li>声明impure virtual函数是为了让derived classes继承该函数的接口和缺省实现。它表示每个子类都必须支持这样一个函数，如果不想写，可使用缺省版本。</li>\n<li>声明non-virtual函数目的是为了令derived classes继承一份接口和一份将强制性实现。</li>\n</ul>\n<h4 id=\"Item-35：考虑virtual函数以外的其他选择\"><a href=\"#Item-35：考虑virtual函数以外的其他选择\" class=\"headerlink\" title=\"Item 35：考虑virtual函数以外的其他选择\"></a>Item 35：考虑virtual函数以外的其他选择</h4><p>假设我们现在写一款游戏，不同角色攻击时会释放不同的技能，可能我们会想到使用virtual函数，让特殊角色都继承于GameCharacter，GameCharacter提供了一份缺省实现，特殊角色可针对自己的情况改写攻击函数。</p>\n<p>当然这也是我们最常规的办法，除此之外，也存在着许多其他的方式供我们选择。</p>\n<ul>\n<li><b>Non-Virtual Interface的手法实现Template Method模式</b></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameCharacter</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">attack</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        beforeAttack();</span><br><span class=\"line\">        doAttack();</span><br><span class=\"line\">        afterAttack();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">doAttack</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这就是所谓的NVI手法，attack是作为doAttack的外覆器。</p>\n<p>NVI的优势在于我们可以在进行实际操作前后做些处理，正如我们beforeAttack()，afterAttack()写的那样。</p>\n<ul>\n<li><b>基于Function Pointers实现的Strategy模式</b></li>\n</ul>\n<p>我们可以让不同角色保存一个函数指针，该函数指针执行特殊攻击操作。但是这样存在一个问题，就是函数指针指向的函数可能需要访问对象的私有元素，这样可能就需要采用friend关键字来为函数特殊访问权限。</p>\n<ul>\n<li><b>基于std::function实现的Strategy模式</b></li>\n</ul>\n<p>与上面的Function Pointers相似，只不过<i>std::function</i>具有更好的封装，可以保存成员函数。</p>\n<ul>\n<li><b>传统的Strategy模式</b></li>\n</ul>\n<p>让不同操作封装在不同类里，并形成继承链，在不同角色中保存有这些操作的对象，并在角色的攻击函数中调用操作对象的接口。</p>\n<p>这里只是介绍传统的Strategy模式，在这个例子里面意义不大。</p>\n<h4 id=\"Item-36：绝不重新定义继承而来的non-virtual函数\"><a href=\"#Item-36：绝不重新定义继承而来的non-virtual函数\" class=\"headerlink\" title=\"Item 36：绝不重新定义继承而来的non-virtual函数\"></a>Item 36：绝不重新定义继承而来的non-virtual函数</h4><p>因为这个时候对于一个D对象，通过B指针访问该函数和通过D指针访问该函数的表现不再相同。也就是说用到D指针的地方不能用B指针替代，也就是违背了public继承is-a的关系。</p>\n<p>很显然，父类的non-virtual函数体现了某种<b>不变性</b>，一旦子类改变定义，便是对is-a关系的违反。如果希望子类对某些函数表现出特异性，这时就需要virtual关键字，virtual函数通过虚函数表的机制，向子类提供了一种保证：你可以大可以重新定义我，我将仍然维护is-a关系。因为D对象不论是通过D指针还是通过B指针访问，表现都是相同的。</p>\n<h4 id=\"Item-37：绝不重新定义继承而来的缺省参数值\"><a href=\"#Item-37：绝不重新定义继承而来的缺省参数值\" class=\"headerlink\" title=\"Item 37：绝不重新定义继承而来的缺省参数值\"></a>Item 37：绝不重新定义继承而来的缺省参数值</h4><p>virtual函数是动态绑定的，而缺省参数值确实静态绑定的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>:</span><span class=\"keyword\">public</span> A&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">A* a = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">a-&gt;f();<span class=\"comment\">//我们可能期待参数为1，但实际上是0</span></span><br></pre></td></tr></table></figure>\n<p>在上面的例子里面，我们重新定义了继承而来的缺省参数值，但通过指针或引用来访问时，由于缺省参数值是静态绑定的，a的静态类型是A，所以我们绑定了缺省参数值0，在运行时才调用到B::f()，这就很容易造成误解，所以最好的做法是不要重新定义继承而来的缺省参数值。</p>\n<p>之所以让绑定缺省参数在编译器进行，是为了降低运行期的开销。</p>\n<h4 id=\"Item-38：通过复合塑模出has-a或is-implemented-in-terms-of\"><a href=\"#Item-38：通过复合塑模出has-a或is-implemented-in-terms-of\" class=\"headerlink\" title=\"Item 38：通过复合塑模出has-a或is-implemented-in-terms-of\"></a>Item 38：通过复合塑模出has-a或is-implemented-in-terms-of</h4><p>复合有两个意义。复合意味<i>has-a</i>或<i>is-implemented-in-terms-of</i>。程序中的对象其实相当于你所塑造的世界中的某些事物，例如人、汽车、视频画面等等。这样的对象属于<b>应用域部分</b>。其他对象则纯粹是实现细节上的人工制品，像是缓冲区、互斥器、查找树等等。这些对象属于<b>实现域部分</b>。复合发生于应用域内对象之间，表现出<i>has-a</i>关系，当发生于实现域内则是表现<i>is-implemented-in-terms-of</i>关系。</p>\n<h4 id=\"Item-39：明智而谨慎地使用private继承\"><a href=\"#Item-39：明智而谨慎地使用private继承\" class=\"headerlink\" title=\"Item 39：明智而谨慎地使用private继承\"></a>Item 39：明智而谨慎地使用private继承</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>&#123;</span>&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>:</span><span class=\"keyword\">private</span> Person&#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">(<span class=\"keyword\">const</span> Person&amp;)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">(<span class=\"keyword\">const</span> Student&amp;)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Person p;</span><br><span class=\"line\">Student s;</span><br><span class=\"line\">eat(p);<span class=\"comment\">//正确</span></span><br><span class=\"line\">eat(s);<span class=\"comment\">//错误，没有is-a关系</span></span><br></pre></td></tr></table></figure>\n<p>private继承意味着implemented-in-terms-of。如果让D以private形式继承B，用意是采用B中已经备妥的某些特性，不是因为B和D有任何观念上的关系。</p>\n<p>private继承与复合有点相似，我们在两者间的取舍可总结为：尽可能使用复合，必要时才使用private继承。private继承主要用于<b>“一个意欲成为derived class者像访问一个意欲成为base class者的protected成分，或为了重新定义一或多个virtual函数”。</b></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*private继承*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">Timer</span><span class=\"params\">(<span class=\"keyword\">int</span> tickFrequency)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">onTick</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span>:</span> <span class=\"keyword\">private</span> Timer&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">onTick</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">//Widget可以调用onTick().</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*普通复合*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetTimer</span>:</span><span class=\"keyword\">public</span> Timer&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">onTick</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">    &#125;;<span class=\"comment\">//定义于Widget内部,让其他类无法继承WidgetTimer。</span></span><br><span class=\"line\">    WidgetTimer timer;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>另外在一种激进情况涉及空间最优化，可能促使你选择”private继承”而不是”继承加复合”。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Empty</span>&#123;</span>&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoldAnInt</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    Empty e;</span><br><span class=\"line\">&#125;;<span class=\"comment\">//sizeof(HoldAnInt) &gt; sizeof(int)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//独立对象大小不为零。</span></span><br><span class=\"line\"><span class=\"comment\">//sizeoff(Empty) == 1.编译器默默安插一个char到空对象里，虽然char不算大，但在复合关系里，可能存在对齐问题，导致额外的padding开销。</span></span><br></pre></td></tr></table></figure>\n<p>我们提到了独立对象不为零，如果该对象是作为另一对象的附带情况就会不一样了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoldAnInt</span>:</span><span class=\"keyword\">private</span> Empty&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//这个时候sizeof(HoldAnInt) == sizeof(int)</span></span><br></pre></td></tr></table></figure>\n<p>这就是所谓的<b>EBO优化(empty base optimization)</b></p>\n<h4 id=\"Item-40：明智而谨慎的选择多继承\"><a href=\"#Item-40：明智而谨慎的选择多继承\" class=\"headerlink\" title=\"Item 40：明智而谨慎的选择多继承\"></a>Item 40：明智而谨慎的选择多继承</h4><ul>\n<li>多重继承比单一继承复杂。可能导致歧义性，以及对virtual继承的需要。</li>\n<li>virtual继承会增加大小、速度、初始化复杂度等等成本。如果virtual base classes不带任何数据，将是最有使用价值的情况。</li>\n<li>多重继承有正当用途。其中一个情节涉及”public继承某个Interface class”和“private继承某个协助实现的class“两相组合</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjvdlcrx70000eguhpdnm9xyj","category_id":"cjunfoz3000041kuh0trloxhu","_id":"cjvdlcrxj0006eguh1w3w53nn"},{"post_id":"cjvdlcrxd0001eguhy2j1q4p5","category_id":"cjunfoz37000a1kuh1v2akl9h","_id":"cjvdlcrxl0009eguh5sdfgzio"},{"post_id":"cjvdlcrxg0003eguh67w6u6tl","category_id":"cjunfoz3b000i1kuhdp7lhp2j","_id":"cjvdlcrxn000ceguh6zdov92e"},{"post_id":"cjvdlcrxi0005eguh6b6t6x6f","category_id":"cjunfoz3000041kuh0trloxhu","_id":"cjvdlcrxo000eeguhjsp5qz4j"},{"post_id":"cjvdlcrxk0008eguhc2pmcy07","category_id":"cjunfoz37000a1kuh1v2akl9h","_id":"cjvdlcrxo000geguhjxxyecfc"},{"post_id":"cjvdlcrxm000beguhf4rh6c4y","category_id":"cjunfoz39000d1kuh7yj2ymzg","_id":"cjvdlcrxp000ieguhxycsb13c"},{"post_id":"cjvdlcry8000oeguhnsau4ujz","category_id":"cjunfoz37000a1kuh1v2akl9h","_id":"cjvdlcryf000teguhyxlrwfrx"},{"post_id":"cjvdlcryb000peguhqy2vkveu","category_id":"cjunfoz5a00141kuhf1n15hq3","_id":"cjvdlcryn000weguhoya6511d"},{"post_id":"cjvdlcryd000reguhvl81k6n2","category_id":"cjunfoz3000041kuh0trloxhu","_id":"cjvdlcryo000yeguha24vhjor"}],"PostTag":[{"post_id":"cjvdlcrx70000eguhpdnm9xyj","tag_id":"cjunfoz5g001b1kuhyxb2qbw7","_id":"cjvdlcrxg0002eguhxh260k8e"},{"post_id":"cjvdlcrx70000eguhpdnm9xyj","tag_id":"cjunfoz3200051kuht6x30d98","_id":"cjvdlcrxi0004eguhu8ltj0ed"},{"post_id":"cjvdlcrxd0001eguhy2j1q4p5","tag_id":"cjunfoz3j000w1kuhae8bmjuf","_id":"cjvdlcrxk0007eguhww8vcnfg"},{"post_id":"cjvdlcrxd0001eguhy2j1q4p5","tag_id":"cjunfoz39000e1kuhs5m9cwu1","_id":"cjvdlcrxm000aeguh1sgd1pd2"},{"post_id":"cjvdlcrxg0003eguh67w6u6tl","tag_id":"cjunfoz3h000s1kuhtui84xkx","_id":"cjvdlcrxn000deguhnp2375a3"},{"post_id":"cjvdlcrxg0003eguh67w6u6tl","tag_id":"cjunfoz3i000v1kuhfatp1hb2","_id":"cjvdlcrxo000feguho6du8pkm"},{"post_id":"cjvdlcrxi0005eguh6b6t6x6f","tag_id":"cjunfoz3200051kuht6x30d98","_id":"cjvdlcrxp000heguhx6tojguu"},{"post_id":"cjvdlcrxi0005eguh6b6t6x6f","tag_id":"cjunfoz38000b1kuhtibvi33q","_id":"cjvdlcrxp000jeguhi3kd5iwp"},{"post_id":"cjvdlcrxk0008eguhc2pmcy07","tag_id":"cjunfoz39000e1kuhs5m9cwu1","_id":"cjvdlcrxp000keguhlcn9n2vo"},{"post_id":"cjvdlcrxk0008eguhc2pmcy07","tag_id":"cjunfoz3b000j1kuhm2a1gwxp","_id":"cjvdlcrxq000leguh6vw1g67p"},{"post_id":"cjvdlcrxk0008eguhc2pmcy07","tag_id":"cjunfoz3d000m1kuh3e36vg9u","_id":"cjvdlcrxq000meguhrntbdrv2"},{"post_id":"cjvdlcrxm000beguhf4rh6c4y","tag_id":"cjunfoz3f000o1kuh0a1lsa0g","_id":"cjvdlcrxq000neguh4mra6f6i"},{"post_id":"cjvdlcry8000oeguhnsau4ujz","tag_id":"cjunfoz39000e1kuhs5m9cwu1","_id":"cjvdlcryd000qeguhxilqknem"},{"post_id":"cjvdlcry8000oeguhnsau4ujz","tag_id":"cjunfoz3j000w1kuhae8bmjuf","_id":"cjvdlcryf000seguhl6y7b2ch"},{"post_id":"cjvdlcry8000oeguhnsau4ujz","tag_id":"cjunfoz5h001e1kuhmwcjf09j","_id":"cjvdlcryn000veguhcl2teghw"},{"post_id":"cjvdlcryb000peguhqy2vkveu","tag_id":"cjunfoz5b00151kuhrt1dctmw","_id":"cjvdlcryo000xeguh6rhh1g38"},{"post_id":"cjvdlcryb000peguhqy2vkveu","tag_id":"cjunfoz5e00181kuh7b3jfz0u","_id":"cjvdlcryp000zeguhkwy2imxa"},{"post_id":"cjvdlcryd000reguhvl81k6n2","tag_id":"cjunfoz3200051kuht6x30d98","_id":"cjvdlcryq0011eguh3axafzto"},{"post_id":"cjvdlcryd000reguhvl81k6n2","tag_id":"cjvdlcryg000ueguhpc8s5pv8","_id":"cjvdlcryr0012eguhtdhpbob6"},{"post_id":"cjvdlcryd000reguhvl81k6n2","tag_id":"cjvdlcryp0010eguhkutsq2gy","_id":"cjvdlcryr0013eguhwrcgb914"}],"Tag":[{"name":"C++","_id":"cjunfoz3200051kuht6x30d98"},{"name":"对象模型","_id":"cjunfoz38000b1kuhtibvi33q"},{"name":"Unix","_id":"cjunfoz39000e1kuhs5m9cwu1"},{"name":"进程","_id":"cjunfoz3b000j1kuhm2a1gwxp"},{"name":"信号","_id":"cjunfoz3d000m1kuh3e36vg9u"},{"name":"操作系统","_id":"cjunfoz3f000o1kuh0a1lsa0g"},{"name":"算法","_id":"cjunfoz3h000s1kuhtui84xkx"},{"name":"编译原理","_id":"cjunfoz3i000v1kuhfatp1hb2"},{"name":"APUE","_id":"cjunfoz3j000w1kuhae8bmjuf"},{"name":"计算机网络","_id":"cjunfoz5b00151kuhrt1dctmw"},{"name":"TCP","_id":"cjunfoz5e00181kuh7b3jfz0u"},{"name":"面试","_id":"cjunfoz5g001b1kuhyxb2qbw7"},{"name":"IPC","_id":"cjunfoz5h001e1kuhmwcjf09j"},{"name":"读书笔记","_id":"cjvdlcryg000ueguhpc8s5pv8"},{"name":"Effective C++","_id":"cjvdlcryp0010eguhkutsq2gy"}]}}